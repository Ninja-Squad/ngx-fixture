var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.5","fields":["title","body"],"fieldVectors":[["title/classes/ComponentTester.html",[0,0.088,1,0.559]],["body/classes/ComponentTester.html",[0,0.053,1,0.903,2,0.334,3,0.485,4,0.485,5,0.334,6,4.48,7,1.516,8,1.278,9,2.348,10,2.348,11,2.348,12,1.841,13,1.278,14,1.508,15,3.343,16,2.348,17,1.841,18,1.841,19,3.237,20,0.865,21,1.508,22,1.059,23,1.386,24,1.468,25,1.226,26,2.348,27,1.121,28,0.211,29,2.378,30,3.677,31,1.095,32,2.874,33,1.841,34,2.905,35,0.875,36,1.404,37,1.312,38,1.34,39,0.894,40,1.845,41,2.254,42,0.99,43,0.936,44,2.348,45,1.07,46,0.069,47,1.42,48,1.516,49,2.905,50,1.208,51,1.507,52,2.538,53,3.502,54,1.841,55,2.348,56,1.841,57,2.348,58,2.348,59,2.348,60,3.237,61,2.348,62,2.348,63,2.348,64,1.41,65,2.348,66,1.841,67,3.237,68,2.348,69,0.865,70,0.865,71,2.348,72,2.348,73,2.348,74,1.036,75,1.841,76,3.237,77,1.119,78,0.903,79,0.903,80,3.237,81,3.237,82,1.516,83,1.516,84,1.095,85,0.894,86,1.226,87,1.516,88,1.72,89,1.34,90,1.846,91,1.566,92,1.56,93,1.312,94,1.56,95,1.56,96,1.447,97,1.003,98,0.768,99,1.767,100,2.348,101,1.516,102,2.874,103,1.516,104,2.348,105,2.254,106,1.516,107,0.752,108,1.516,109,1.516,110,0.485,111,0.894,112,1.516,113,0.056,114,1.036,115,1.232,116,0.627,117,1.232,118,1.232,119,0.789,120,0.903,121,1.036,122,0.576,123,0.894,124,0.894,125,0.894,126,1.516,127,1.278,128,0.894,129,0.627,130,0.894,131,1.516,132,0.894,133,1.516,134,0.511,135,0.894,136,1.516,137,0.633,138,1.189,139,1.516,140,1.841,141,0.752,142,2.348,143,2.348,144,1.516,145,1.516,146,1.841,147,1.516,148,1.516,149,1.508,150,1.067,151,1.516,152,0.405,153,1.189,154,1.189,155,2.139,156,0.485,157,0.812,158,1.516,159,0.812,160,1.516,161,1.516,162,1.189,163,1.516,164,1.516,165,1.516,166,1.516,167,1.516,168,1.516,169,1.516,170,1.516,171,1.516,172,1.516,173,1.516,174,1.516,175,1.516,176,0.02,177,0.02]],["title/classes/TestButton.html",[0,0.088,98,0.679]],["body/classes/TestButton.html",[0,0.115,1,1.004,2,0.732,3,1.063,4,1.063,5,0.732,8,1.063,20,1.219,24,1.402,28,0.464,31,1.219,35,0.812,39,1.544,42,1.299,43,0.888,45,0.732,46,0.068,47,1.402,51,1.063,69,0.888,70,0.888,77,0.888,78,0.732,79,0.732,84,0.888,97,0.732,98,1.084,107,1.063,110,1.063,113,0.054,119,0.591,150,1.17,152,0.888,156,1.063,176,0.045,177,0.045,178,1.666,179,3.322,180,1.544,181,1.298,182,1.544,183,1.544,184,1.298,185,1.084,186,1.544,187,1.736,188,1.976,189,2.11,190,1.544,191,3.322,192,1.544,193,1.499,194,1.78,195,1.499,196,1.78,197,3.322,198,4.057,199,1.499,200,1.499,201,1.78]],["title/classes/TestElement.html",[0,0.088,25,0.679]],["body/classes/TestElement.html",[0,0.059,1,0.753,2,0.851,3,0.539,4,0.539,5,0.371,8,1.322,13,1.095,20,0.914,23,1.379,24,1.516,25,1.185,27,1.095,28,0.235,29,1.082,31,1.129,35,0.887,36,1.436,37,1.353,38,1.379,39,0.969,40,1.971,42,1.103,43,0.68,45,1.043,46,0.069,47,1.436,50,1.247,51,0.539,64,1.302,69,0.914,70,0.914,74,0.815,77,1.151,78,1.014,79,0.949,84,0.981,85,0.969,86,1.28,88,1.753,89,1.379,90,1.864,91,1.58,92,1.608,93,1.353,94,1.608,95,1.608,96,1.493,97,1.014,98,0.82,99,1.794,107,1.095,110,0.815,111,0.969,113,0.058,114,1.095,115,1.302,116,0.68,117,1.302,118,1.302,119,0.806,120,0.931,121,1.095,122,0.609,123,0.969,124,0.969,125,0.969,127,1.42,128,0.969,129,0.68,130,0.969,132,0.969,134,0.546,135,0.969,137,0.676,138,1.322,141,0.815,149,1.082,150,1.072,152,0.45,153,1.997,154,1.997,155,2.149,156,0.539,159,0.903,176,0.023,177,0.023,178,1.724,180,0.969,181,0.815,182,0.969,183,0.969,184,0.815,185,0.68,190,0.641,192,1.168,202,1.322,203,1.149,204,0.969,205,1.149,206,2.407,207,1.685,208,1.149,209,1.685,210,1.543,211,1.685,212,1.149,213,1.571,214,1.685,215,1.543,216,1.149,217,1.685,218,1.685,219,1.685,220,1.685,221,1.685,222,1.685,223,1.685,224,1.685,225,1.685,226,1.365,227,2.546,228,1.685,229,1.685,230,1.685,231,1.685,232,1.685,233,1.685,234,1.685,235,1.685,236,1.685,237,1.685,238,1.685,239,1.997,240,1.685,241,1.685,242,1.685,243,1.685,244,1.685,245,1.685,246,1.685,247,1.685,248,1.685]],["title/classes/TestHtmlElement.html",[0,0.088,187,0.967]],["body/classes/TestHtmlElement.html",[0,0.079,1,0.866,2,0.499,3,0.725,4,0.725,5,0.499,8,1.434,13,1.011,20,1.051,23,1.37,24,1.504,25,1.293,27,1.011,28,0.316,31,1.105,35,0.881,36,1.406,37,1.323,38,1.323,42,1.197,43,0.606,45,1.061,46,0.068,47,1.491,50,1.216,51,0.725,64,1.202,69,1.051,70,1.051,74,0.725,77,1.232,78,1.043,79,1.015,84,0.606,85,0.862,86,1.287,88,1.672,89,1.323,90,1.833,91,1.56,92,1.496,93,1.259,94,1.496,95,1.496,96,1.434,97,1.015,98,0.606,99,1.754,107,1.259,110,1.164,111,0.862,113,0.057,114,1.011,115,1.202,116,0.606,117,1.202,118,1.202,119,0.562,120,0.866,121,1.011,122,0.562,123,0.862,124,0.862,125,0.862,127,1.259,128,0.862,129,0.606,130,0.862,132,0.862,134,0.403,135,0.862,137,0.499,141,1.011,150,0.971,152,0.606,156,0.725,176,0.03,177,0.03,178,1.383,180,1.202,181,1.011,182,1.202,183,1.202,184,1.011,185,0.844,186,1.202,187,1.202,188,1.774,190,1.202,192,1.202,193,2.053,195,1.425,199,1.865,200,1.022,202,1.777,203,1.425,204,1.202,205,1.425,208,1.022,210,1.425,212,1.022,213,1.573,215,1.425,216,1.022,239,1.777,249,2.266,250,2.266,251,2.266,252,2.266,253,2.266,254,2.266,255,2.266,256,2.266,257,2.266,258,2.266,259,2.266,260,2.266]],["title/classes/TestInput.html",[0,0.088,120,0.559]],["body/classes/TestInput.html",[0,0.067,1,0.806,2,0.426,3,0.619,4,0.619,5,0.426,8,1.403,13,0.903,20,0.978,23,1.3,24,1.553,25,1.04,27,0.903,28,0.27,31,1.04,35,0.866,36,1.561,37,1.246,38,1.246,39,1.074,42,1.149,43,0.517,45,1.068,46,0.068,47,1.516,50,1.171,51,0.619,64,1.074,69,1.231,70,1.171,74,0.619,77,1.206,78,1.023,79,0.994,84,0.517,85,0.736,86,1.278,88,1.596,89,1.246,90,1.792,91,1.531,92,1.393,93,1.172,94,1.393,95,1.393,96,1.376,97,1.015,98,0.517,99,1.695,107,1.403,110,1.3,111,0.736,113,0.054,114,0.903,115,1.074,116,1.231,117,1.074,118,1.074,119,0.692,120,0.895,121,0.903,122,0.502,123,0.736,124,0.736,125,0.736,127,1.172,128,0.736,129,0.517,130,0.736,132,0.736,134,0.344,135,0.736,137,0.426,141,0.903,150,0.89,152,0.517,155,1.037,156,0.619,159,1.512,176,0.026,177,0.026,178,1.636,180,1.074,181,0.903,182,1.074,183,1.074,184,0.903,185,0.754,186,1.074,187,1.754,188,1.502,189,1.756,190,1.074,192,1.074,193,2.009,194,1.037,195,0.873,196,1.037,199,1.502,200,0.873,201,1.037,203,1.273,204,1.074,205,1.273,208,0.873,210,1.273,212,0.873,213,1.718,215,1.939,216,0.873,261,1.935,262,2.35,263,2.213,264,3.66,265,3.052,266,1.935,267,1.935,268,2.213,269,2.213,270,1.935,271,2.213,272,1.935,273,2.822,274,1.243,275,1.243,276,1.243,277,1.243,278,1.243,279,1.243,280,1.243,281,1.243,282,1.243,283,1.518,284,1.935,285,1.935,286,1.935,287,1.962,288,1.935,289,2.213,290,1.518,291,3.33,292,1.935,293,2.213,294,1.243]],["title/classes/TestSelect.html",[0,0.088,134,0.452]],["body/classes/TestSelect.html",[0,0.059,1,0.759,2,0.376,3,0.547,4,0.547,5,0.376,8,1.327,13,0.824,20,0.921,23,1.243,24,1.497,25,0.987,27,0.824,28,0.613,31,0.987,35,0.854,36,1.29,37,1.478,38,1.183,39,0.979,42,1.108,43,0.457,45,1.06,46,0.069,47,1.519,50,1.256,51,0.547,64,0.979,69,1.224,70,1.134,74,0.547,77,1.202,78,1.017,79,0.991,84,0.457,85,0.65,86,1.286,88,1.533,89,1.358,90,1.757,91,1.505,92,1.311,93,1.103,94,1.311,95,1.311,96,1.327,97,1.03,98,0.457,99,1.757,107,1.358,110,1.243,111,0.65,113,0.052,114,0.824,115,0.979,116,1.108,117,0.979,118,0.979,119,0.717,120,0.759,121,0.824,122,0.458,123,0.65,124,0.65,125,0.65,127,1.384,128,0.65,129,0.457,130,0.65,132,0.65,134,0.551,135,0.65,137,0.376,141,0.824,150,0.827,152,0.457,156,0.547,157,1.379,176,0.023,177,0.023,178,1.693,180,0.979,181,0.824,182,0.979,183,0.979,184,0.824,185,0.688,186,0.979,187,1.712,188,1.396,189,1.667,190,0.979,192,0.979,193,1.95,194,0.916,195,0.771,196,0.916,199,1.396,200,0.771,201,0.916,203,1.161,204,0.979,205,1.161,208,0.771,210,1.161,212,0.771,213,1.671,215,1.871,216,0.771,226,1.659,274,1.097,275,1.097,276,1.097,277,1.097,278,1.097,279,1.097,280,1.097,281,1.097,282,1.097,287,1.379,293,1.34,295,1.709,296,2.574,297,2.574,298,2.574,299,3.096,300,3.096,301,2.574,302,2.574,303,3.096,304,3.096,305,1.709,306,2.574,307,2.587,308,1.709,309,3.883,310,3.621,311,2.574,312,1.709,313,3.327,314,3.445,315,3.445,316,3.445,317,3.445,318,2.574,319,1.709,320,1.709,321,1.709,322,3.252,323,1.709,324,1.709,325,1.709,326,1.709,327,1.709,328,1.709,329,1.34,330,2.898,331,1.709,332,1.709,333,2.574,334,2.574,335,1.709,336,1.709,337,1.709,338,2.574,339,1.709,340,2.018,341,2.574,342,1.709,343,1.709,344,2.574,345,2.574,346,1.709,347,1.709,348,1.709]],["title/classes/TestTextArea.html",[0,0.088,137,0.559]],["body/classes/TestTextArea.html",[0,0.073,1,0.836,2,0.461,3,0.671,4,0.671,5,0.461,8,1.431,13,0.957,20,1.015,23,1.336,24,1.533,25,1.073,27,0.957,28,0.292,31,1.073,35,0.873,36,1.431,37,1.285,38,1.517,39,1.137,42,1.174,43,0.56,45,1.064,46,0.068,47,1.507,50,1.194,51,0.671,64,1.137,69,1.073,70,1.073,74,0.671,77,1.226,78,1.037,79,1.01,84,0.56,85,0.797,86,1.291,88,1.635,89,1.285,90,1.813,91,1.546,92,1.445,93,1.216,94,1.445,95,1.445,96,1.406,97,1.01,98,0.56,99,1.725,107,1.285,110,1.216,111,0.797,113,0.056,114,0.957,115,1.137,116,1.249,117,1.137,118,1.137,119,0.676,120,0.836,121,0.957,122,0.532,123,0.797,124,0.797,125,0.797,127,1.216,128,0.797,129,0.56,130,0.797,132,0.797,134,0.373,135,0.797,137,0.767,141,0.957,150,0.931,152,0.56,155,1.123,156,0.671,159,1.601,176,0.028,177,0.028,178,1.528,180,1.137,181,0.957,182,1.137,183,1.137,184,0.957,185,0.799,186,1.137,187,1.779,188,1.571,189,1.811,190,1.137,192,1.137,193,2.045,194,1.123,195,0.945,196,1.123,199,1.571,200,0.945,201,1.123,203,1.348,204,1.137,205,1.348,208,0.945,210,1.348,212,0.945,213,1.635,215,1.713,216,0.945,263,2.344,269,2.344,271,2.344,274,1.345,275,1.345,276,1.345,277,1.345,278,1.345,279,1.345,280,1.345,281,1.345,282,1.345,283,1.643,287,1.601,289,2.344,290,1.643,349,2.095,350,2.095,351,2.095,352,2.095,353,2.095]],["title/changelog.html",[22,0.969,354,1.151,355,1.684]],["body/changelog.html",[0,0.106,5,0.67,14,2.989,29,1.954,35,0.541,46,0.052,78,0.67,89,0.974,113,0.052,116,0.813,119,0.541,120,0.67,122,0.541,129,0.813,134,0.541,137,0.67,146,2.386,176,0.041,177,0.041,189,1.373,226,1.631,287,1.631,294,1.954,355,2.386,356,3.043,357,3.841,358,2.386,359,3.043,360,2.386,361,2.386,362,4.209,363,3.043,364,3.043,365,3.043,366,3.043,367,4.209,368,3.043,369,4.209,370,4.209,371,3.575,372,2.386,373,2.386,374,2.386,375,3.043,376,3.043,377,3.301,378,3.301,379,3.043,380,3.043,381,3.043,382,3.043,383,3.043,384,3.043,385,3.043,386,3.043,387,3.043,388,3.043,389,3.043,390,3.043,391,3.043,392,3.043,393,3.043,394,2.386,395,3.043,396,3.043,397,3.043,398,3.043,399,3.043,400,3.043,401,3.043,402,3.043,403,3.012,404,3.043,405,3.043,406,3.043,407,3.043,408,3.043,409,3.043,410,3.043,411,3.043,412,3.043,413,3.043,414,3.707,415,3.841,416,3.841,417,3.841,418,3.043,419,3.841,420,3.043,421,3.841,422,3.043,423,2.386,424,3.043,425,3.043,426,3.043,427,3.043,428,3.841,429,3.043,430,3.043,431,3.043,432,3.043,433,3.043,434,3.043,435,3.043,436,3.043,437,3.043,438,3.043,439,3.043,440,3.043,441,3.043,442,4.209,443,3.043,444,3.841,445,3.043,446,3.043,447,3.043,448,3.785,449,2.386,450,2.386,451,3.043,452,3.043,453,3.012,454,3.043,455,3.043,456,3.75,457,3.043,458,3.043,459,1.954,460,3.043,461,2.386,462,3.043,463,3.043,464,2.386,465,3.043,466,2.386,467,3.043,468,2.386,469,3.043,470,3.043,471,3.043,472,3.043,473,3.043,474,3.043,475,3.043]],["title/dependencies.html",[476,2.147,477,2.385]],["body/dependencies.html",[46,0.066,113,0.06,152,1.036,176,0.052,177,0.052,372,3.04,373,3.04,374,3.04,403,3.665,477,3.04,478,3.877,479,3.877,480,3.877]],["title/miscellaneous/functions.html",[481,1.151,482,2.385]],["body/miscellaneous/functions.html",[21,2.615,28,0.467,46,0.064,49,3.194,50,0.894,56,3.444,66,3.194,75,3.194,77,1.088,78,0.897,79,0.897,84,1.088,97,0.897,113,0.055,122,0.725,176,0.045,177,0.045,185,1.088,329,3.194,330,3.194,481,1.792,482,2.623,483,4.073,484,4.073,485,4.073,486,3.344,487,3.344,488,4.571,489,4.073,490,4.571,491,3.737,492,4.073,493,4.073,494,4.073,495,2.615,496,4.571,497,4.073,498,4.073,499,4.073,500,4.904,501,4.073,502,4.765,503,3.344,504,4.392,505,4.073,506,4.073,507,4.073,508,4.073,509,3.344,510,2.623,511,4.073,512,3.194,513,4.073,514,3.344,515,4.073]],["title/index.html",[22,0.969,28,0.3,354,1.151]],["body/index.html",[0,0.115,1,0.931,2,0.726,5,0.531,12,1.891,13,0.772,14,2.592,15,1.891,17,1.891,18,1.891,20,1.129,21,1.548,22,1.088,23,1.397,27,1.055,28,0.336,30,2.585,31,0.644,33,1.891,34,2.585,35,0.429,36,0.772,37,0.772,38,0.772,40,2.116,41,1.891,42,0.644,43,0.644,45,0.726,46,0.068,52,3.567,69,0.644,70,0.644,74,0.772,79,0.531,86,1.166,91,1.055,93,0.772,97,0.726,113,0.044,119,0.586,121,0.772,122,0.429,129,0.881,134,0.586,140,1.891,149,1.548,150,0.644,157,2.013,176,0.032,177,0.032,181,1.055,184,1.055,185,1.215,186,0.917,204,1.254,262,1.548,307,1.548,310,2.585,340,1.891,354,1.292,358,2.585,360,1.891,361,1.891,371,2.585,377,3.503,378,3.503,394,1.891,423,1.891,448,3.166,449,3.166,450,2.585,456,1.891,459,1.548,495,1.548,512,1.891,516,2.411,517,4.037,518,3.755,519,3.296,520,3.755,521,2.411,522,3.296,523,4.037,524,3.296,525,2.411,526,2.411,527,3.296,528,3.296,529,2.411,530,2.411,531,2.411,532,2.411,533,2.411,534,2.411,535,2.411,536,2.411,537,2.411,538,2.411,539,1.891,540,4.227,541,3.296,542,3.296,543,4.037,544,4.037,545,4.227,546,3.296,547,3.755,548,3.296,549,3.296,550,3.296,551,3.296,552,3.296,553,4.037,554,3.296,555,3.755,556,2.411,557,2.411,558,2.411,559,2.411,560,2.411,561,2.411,562,2.411,563,2.411,564,2.411,565,3.296,566,3.296,567,3.296,568,2.411,569,3.166,570,2.411,571,2.411,572,2.411,573,2.411,574,3.296,575,3.296,576,2.411,577,2.411,578,2.411,579,2.411,580,2.411,581,2.411,582,2.411,583,3.296,584,2.411,585,2.411,586,2.411,587,2.411,588,3.755,589,3.296,590,2.411,591,2.411,592,2.411,593,2.411,594,2.411,595,2.411,596,2.411,597,4.037,598,2.411,599,3.296,600,3.296,601,2.411,602,2.411,603,3.296,604,2.411,605,2.411,606,2.411,607,3.296,608,2.411,609,2.411,610,2.411,611,2.411,612,2.411,613,2.411,614,2.411,615,2.411,616,2.411,617,2.411,618,3.755,619,2.411,620,2.411,621,2.411,622,2.411,623,2.411,624,2.411,625,2.411,626,2.411,627,2.411,628,2.411,629,3.296,630,2.411,631,2.411,632,3.296,633,3.296,634,2.411,635,2.411,636,2.411,637,3.755,638,2.411,639,2.411,640,2.411,641,2.411,642,2.411,643,1.891,644,2.411,645,2.411,646,3.296,647,2.411,648,2.411,649,2.411,650,2.411,651,3.296,652,2.411,653,2.411,654,2.411,655,2.411,656,2.411,657,2.411,658,2.411,659,2.411,660,2.411,661,2.411,662,2.411,663,2.411]],["title/license.html",[22,0.969,354,1.151,664,1.684]],["body/license.html",[46,0.056,113,0.056,122,0.74,176,0.046,177,0.046,213,1.318,414,2.716,510,3.497,539,2.716,569,2.716,643,2.716,664,2.716,665,3.463,666,4.459,667,3.463,668,3.463,669,3.463,670,4.16,671,3.463,672,3.463,673,3.463,674,3.463,675,3.463,676,3.463,677,4.16,678,4.932,679,3.463,680,3.463,681,3.463,682,3.463,683,4.16,684,3.463,685,3.463,686,3.463,687,3.463,688,3.463,689,3.463,690,3.463,691,3.463,692,3.463,693,4.16,694,3.463,695,3.463,696,3.463,697,3.463,698,3.463,699,4.16,700,4.16,701,3.463,702,3.463,703,3.463,704,3.463,705,3.463,706,3.463,707,3.463,708,3.463,709,3.463,710,3.463,711,3.463,712,3.463,713,3.463,714,3.463,715,3.463,716,3.463,717,3.463,718,3.463,719,3.463,720,3.463,721,3.463,722,3.463,723,3.463,724,3.463,725,3.463,726,3.463,727,3.463,728,3.463,729,3.463,730,3.463]],["title/modules.html",[731,2.678]],["body/modules.html",[46,0.06,113,0.06,176,0.053,177,0.053,731,3.107]],["title/overview.html",[732,2.678]],["body/overview.html",[2,0.87,46,0.06,113,0.06,176,0.053,177,0.053,732,3.097,733,3.95]],["title/miscellaneous/variables.html",[481,1.151,734,2.385]],["body/miscellaneous/variables.html",[0,0.112,25,1.115,28,0.486,35,0.881,45,0.33,46,0.069,50,1.063,54,3.016,86,1.223,96,0.479,105,3.118,113,0.031,114,1.475,116,1.136,119,0.882,120,0.767,127,1.273,134,0.727,137,0.628,141,1.231,157,2.584,162,3.202,176,0.02,177,0.02,206,2.237,226,2.188,262,2.895,265,2.237,268,3.118,294,2.895,307,1.831,313,2.731,322,3.385,453,1.175,459,0.962,461,1.175,464,1.175,466,1.175,468,1.175,481,0.803,491,3.887,495,1.494,734,1.175,735,2.326,736,1.498,737,1.498,738,1.498,739,1.498,740,3.976,741,1.498,742,3.976,743,3.976,744,3.976,745,3.976,746,3.976,747,4.755,748,4.991,749,5.064,750,4.844,751,3.976,752,1.498,753,2.326,754,2.326,755,1.498,756,1.498,757,1.498,758,3.976,759,4.51,760,3.976,761,3.976,762,3.976,763,1.498,764,1.498,765,1.498,766,2.326,767,2.326,768,1.498,769,1.498,770,1.498,771,2.326,772,2.326,773,1.498,774,1.498]]],"invertedIndex":[["",{"_index":46,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":340,"title":{},"body":{"classes/TestSelect.html":{},"index.html":{}}}],["0.1.0",{"_index":471,"title":{},"body":{"changelog.html":{}}}],["0.2.0",{"_index":446,"title":{},"body":{"changelog.html":{}}}],["0.2.1",{"_index":445,"title":{},"body":{"changelog.html":{}}}],["0.2.2",{"_index":443,"title":{},"body":{"changelog.html":{}}}],["0.2.3",{"_index":441,"title":{},"body":{"changelog.html":{}}}],["0172de3",{"_index":455,"title":{},"body":{"changelog.html":{}}}],["02",{"_index":422,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":444,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":367,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":442,"title":{},"body":{"changelog.html":{}}}],["065ab58",{"_index":460,"title":{},"body":{"changelog.html":{}}}],["085fd65",{"_index":469,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":754,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":421,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":413,"title":{},"body":{"changelog.html":{}}}],["100",{"_index":420,"title":{},"body":{"changelog.html":{}}}],["11",{"_index":415,"title":{},"body":{"changelog.html":{}}}],["12",{"_index":550,"title":{},"body":{"index.html":{}}}],["13",{"_index":462,"title":{},"body":{"changelog.html":{}}}],["17",{"_index":416,"title":{},"body":{"changelog.html":{}}}],["17ac60f",{"_index":387,"title":{},"body":{"changelog.html":{}}}],["2.0.0",{"_index":365,"title":{},"body":{"changelog.html":{}}}],["2018",{"_index":414,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["2019",{"_index":366,"title":{},"body":{"changelog.html":{}}}],["25",{"_index":472,"title":{},"body":{"changelog.html":{}}}],["27b885a",{"_index":400,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":447,"title":{},"body":{"changelog.html":{}}}],["2c49330",{"_index":467,"title":{},"body":{"changelog.html":{}}}],["2e6bce7",{"_index":439,"title":{},"body":{"changelog.html":{}}}],["31",{"_index":368,"title":{},"body":{"changelog.html":{}}}],["39d1f3a",{"_index":457,"title":{},"body":{"changelog.html":{}}}],["3a159e3",{"_index":396,"title":{},"body":{"changelog.html":{}}}],["3b7ff6c",{"_index":384,"title":{},"body":{"changelog.html":{}}}],["3c95bc6",{"_index":393,"title":{},"body":{"changelog.html":{}}}],["42",{"_index":440,"title":{},"body":{"changelog.html":{}}}],["6",{"_index":428,"title":{},"body":{"changelog.html":{}}}],["6.5.2",{"_index":480,"title":{},"body":{"dependencies.html":{}}}],["6179153",{"_index":390,"title":{},"body":{"changelog.html":{}}}],["7",{"_index":733,"title":{},"body":{"overview.html":{}}}],["7.0.0",{"_index":424,"title":{},"body":{"changelog.html":{}}}],["7.x",{"_index":410,"title":{},"body":{"changelog.html":{}}}],["8.0.0",{"_index":403,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["8036c22",{"_index":470,"title":{},"body":{"changelog.html":{}}}],["a282826",{"_index":451,"title":{},"body":{"changelog.html":{}}}],["above",{"_index":569,"title":{},"body":{"index.html":{},"license.html":{}}}],["access",{"_index":17,"title":{},"body":{"classes/ComponentTester.html":{},"index.html":{}}}],["accessors",{"_index":39,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["action",{"_index":723,"title":{},"body":{"license.html":{}}}],["activatedroute",{"_index":490,"title":{},"body":{"miscellaneous/functions.html":{}}}],["activatedroutesnapshot",{"_index":515,"title":{},"body":{"miscellaneous/functions.html":{}}}],["actual",{"_index":114,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/variables.html":{}}}],["actual.indexof(expected",{"_index":753,"title":{},"body":{"miscellaneous/variables.html":{}}}],["actual.join",{"_index":756,"title":{},"body":{"miscellaneous/variables.html":{}}}],["actual.length",{"_index":755,"title":{},"body":{"miscellaneous/variables.html":{}}}],["actually",{"_index":95,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["add",{"_index":371,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["additional",{"_index":181,"title":{},"body":{"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["against",{"_index":408,"title":{},"body":{"changelog.html":{}}}],["allows",{"_index":21,"title":{},"body":{"classes/ComponentTester.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["already",{"_index":394,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["although",{"_index":425,"title":{},"body":{"changelog.html":{}}}],["always",{"_index":450,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["and/or",{"_index":691,"title":{},"body":{"license.html":{}}}],["angular",{"_index":14,"title":{},"body":{"classes/ComponentTester.html":{},"changelog.html":{},"index.html":{}}}],["angular/core",{"_index":152,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"dependencies.html":{}}}],["angular/core/testing",{"_index":151,"title":{},"body":{"classes/ComponentTester.html":{}}}],["angular/platform",{"_index":372,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["angular/router",{"_index":478,"title":{},"body":{"dependencies.html":{}}}],["api",{"_index":12,"title":{},"body":{"classes/ComponentTester.html":{},"index.html":{}}}],["arg",{"_index":80,"title":{},"body":{"classes/ComponentTester.html":{}}}],["arising",{"_index":727,"title":{},"body":{"license.html":{}}}],["around",{"_index":575,"title":{},"body":{"index.html":{}}}],["array",{"_index":127,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/variables.html":{}}}],["array).map(option",{"_index":345,"title":{},"body":{"classes/TestSelect.html":{}}}],["array.prototype.slice.call(this.nativeelement.classlist",{"_index":241,"title":{},"body":{"classes/TestElement.html":{}}}],["array.prototype.slice.call(this.nativeelement.options",{"_index":344,"title":{},"body":{"classes/TestSelect.html":{}}}],["assert",{"_index":746,"title":{},"body":{"miscellaneous/variables.html":{}}}],["assert(false",{"_index":760,"title":{},"body":{"miscellaneous/variables.html":{}}}],["assert(true",{"_index":762,"title":{},"body":{"miscellaneous/variables.html":{}}}],["associated",{"_index":679,"title":{},"body":{"license.html":{}}}],["attr",{"_index":203,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["attr(name",{"_index":208,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["attribute",{"_index":210,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["attributes",{"_index":182,"title":{},"body":{"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["authors",{"_index":716,"title":{},"body":{"license.html":{}}}],["automatic",{"_index":579,"title":{},"body":{"index.html":{}}}],["avoid",{"_index":572,"title":{},"body":{"index.html":{}}}],["b2e77d6",{"_index":418,"title":{},"body":{"changelog.html":{}}}],["based",{"_index":423,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["beforeeach",{"_index":607,"title":{},"body":{"index.html":{}}}],["benefitting",{"_index":645,"title":{},"body":{"index.html":{}}}],["block",{"_index":649,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":105,"title":{},"body":{"classes/ComponentTester.html":{},"miscellaneous/variables.html":{}}}],["breaking",{"_index":405,"title":{},"body":{"changelog.html":{}}}],["browser",{"_index":373,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["bug",{"_index":369,"title":{},"body":{"changelog.html":{}}}],["built",{"_index":407,"title":{},"body":{"changelog.html":{}}}],["button",{"_index":31,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["button(selector",{"_index":85,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["button.ts",{"_index":179,"title":{},"body":{"classes/TestButton.html":{}}}],["button.ts:16",{"_index":197,"title":{},"body":{"classes/TestButton.html":{}}}],["button.ts:8",{"_index":191,"title":{},"body":{"classes/TestButton.html":{}}}],["buttons",{"_index":594,"title":{},"body":{"index.html":{}}}],["c",{"_index":667,"title":{},"body":{"license.html":{}}}],["call",{"_index":60,"title":{},"body":{"classes/ComponentTester.html":{}}}],["care",{"_index":536,"title":{},"body":{"index.html":{}}}],["case",{"_index":587,"title":{},"body":{"index.html":{}}}],["champagne",{"_index":475,"title":{},"body":{"changelog.html":{}}}],["change",{"_index":69,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["changelog",{"_index":355,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":357,"title":{},"body":{"changelog.html":{}}}],["charge",{"_index":674,"title":{},"body":{"license.html":{}}}],["check",{"_index":262,"title":{},"body":{"classes/TestInput.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["checked",{"_index":265,"title":{},"body":{"classes/TestInput.html":{},"miscellaneous/variables.html":{}}}],["checknochanges",{"_index":108,"title":{},"body":{"classes/ComponentTester.html":{}}}],["checks",{"_index":268,"title":{},"body":{"classes/TestInput.html":{},"miscellaneous/variables.html":{}}}],["chore",{"_index":401,"title":{},"body":{"changelog.html":{}}}],["cities",{"_index":543,"title":{},"body":{"index.html":{}}}],["city",{"_index":555,"title":{},"body":{"index.html":{}}}],["claim",{"_index":719,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{},"overview.html":{}}}],["cleaner",{"_index":519,"title":{},"body":{"index.html":{}}}],["click",{"_index":188,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["clicks",{"_index":195,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["closes",{"_index":419,"title":{},"body":{"changelog.html":{}}}],["code",{"_index":505,"title":{},"body":{"miscellaneous/functions.html":{}}}],["codelyzer",{"_index":382,"title":{},"body":{"changelog.html":{}}}],["combine",{"_index":385,"title":{},"body":{"changelog.html":{}}}],["commit",{"_index":363,"title":{},"body":{"changelog.html":{}}}],["compare",{"_index":758,"title":{},"body":{"miscellaneous/variables.html":{}}}],["complete",{"_index":618,"title":{},"body":{"index.html":{}}}],["component",{"_index":51,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["component.spec.ts",{"_index":634,"title":{},"body":{"index.html":{}}}],["componentfixture",{"_index":15,"title":{},"body":{"classes/ComponentTester.html":{},"index.html":{}}}],["componentinstance",{"_index":41,"title":{},"body":{"classes/ComponentTester.html":{},"index.html":{}}}],["components",{"_index":521,"title":{},"body":{"index.html":{}}}],["componenttester",{"_index":1,"title":{"classes/ComponentTester.html":{}},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["componenttester(fixture",{"_index":160,"title":{},"body":{"classes/ComponentTester.html":{}}}],["componenttype",{"_index":103,"title":{},"body":{"classes/ComponentTester.html":{}}}],["conditions",{"_index":698,"title":{},"body":{"license.html":{}}}],["connection",{"_index":729,"title":{},"body":{"license.html":{}}}],["const",{"_index":157,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestSelect.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":43,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["constructor(arg",{"_index":44,"title":{},"body":{"classes/ComponentTester.html":{}}}],["constructor(tester",{"_index":190,"title":{},"body":{"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["contain",{"_index":495,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["contains",{"_index":767,"title":{},"body":{"miscellaneous/variables.html":{}}}],["content",{"_index":227,"title":{},"body":{"classes/TestElement.html":{}}}],["contents",{"_index":454,"title":{},"body":{"changelog.html":{}}}],["contract",{"_index":724,"title":{},"body":{"license.html":{}}}],["copies",{"_index":693,"title":{},"body":{"license.html":{}}}],["copy",{"_index":677,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":666,"title":{},"body":{"license.html":{}}}],["correct",{"_index":613,"title":{},"body":{"index.html":{}}}],["country",{"_index":545,"title":{},"body":{"index.html":{}}}],["countryselect",{"_index":547,"title":{},"body":{"index.html":{}}}],["countryselect.dispatchevent(new",{"_index":551,"title":{},"body":{"index.html":{}}}],["countryselect.selectedindex",{"_index":549,"title":{},"body":{"index.html":{}}}],["create",{"_index":33,"title":{},"body":{"classes/ComponentTester.html":{},"index.html":{}}}],["create(componenttype",{"_index":100,"title":{},"body":{"classes/ComponentTester.html":{}}}],["created",{"_index":66,"title":{},"body":{"classes/ComponentTester.html":{},"miscellaneous/functions.html":{}}}],["creates",{"_index":49,"title":{},"body":{"classes/ComponentTester.html":{},"miscellaneous/functions.html":{}}}],["css",{"_index":96,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/variables.html":{}}}],["custom",{"_index":448,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["customequalitytesters",{"_index":744,"title":{},"body":{"miscellaneous/variables.html":{}}}],["damages",{"_index":720,"title":{},"body":{"license.html":{}}}],["deal",{"_index":681,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":730,"title":{},"body":{"license.html":{}}}],["debug",{"_index":149,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"index.html":{}}}],["debugelement",{"_index":42,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["default",{"_index":739,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":47,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["delegates",{"_index":57,"title":{},"body":{"classes/ComponentTester.html":{}}}],["delegating",{"_index":55,"title":{},"body":{"classes/ComponentTester.html":{}}}],["demo",{"_index":663,"title":{},"body":{"index.html":{}}}],["dep",{"_index":375,"title":{},"body":{"changelog.html":{}}}],["dependencies",{"_index":477,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["dependency",{"_index":380,"title":{},"body":{"changelog.html":{}}}],["depending",{"_index":513,"title":{},"body":{"miscellaneous/functions.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["details",{"_index":644,"title":{},"body":{"index.html":{}}}],["detectchanges",{"_index":34,"title":{},"body":{"classes/ComponentTester.html":{},"index.html":{}}}],["detectchanges(checknochanges",{"_index":104,"title":{},"body":{"classes/ComponentTester.html":{}}}],["detection",{"_index":70,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["dev",{"_index":632,"title":{},"body":{"index.html":{}}}],["df43796",{"_index":381,"title":{},"body":{"changelog.html":{}}}],["directly",{"_index":58,"title":{},"body":{"classes/ComponentTester.html":{}}}],["disabled",{"_index":189,"title":{},"body":{"classes/TestButton.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{}}}],["dispatches",{"_index":215,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["dispatchevent",{"_index":204,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["dispatchevent(event",{"_index":212,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["dispatcheventoftype",{"_index":205,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["dispatcheventoftype(type",{"_index":216,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["dispatching",{"_index":576,"title":{},"body":{"index.html":{}}}],["display",{"_index":541,"title":{},"body":{"index.html":{}}}],["distribute",{"_index":689,"title":{},"body":{"license.html":{}}}],["docs",{"_index":436,"title":{},"body":{"changelog.html":{}}}],["documentation",{"_index":643,"title":{},"body":{"index.html":{},"license.html":{}}}],["documented",{"_index":359,"title":{},"body":{"changelog.html":{}}}],["doesn't",{"_index":503,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dom",{"_index":141,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/variables.html":{}}}],["don't",{"_index":509,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dry",{"_index":567,"title":{},"body":{"index.html":{}}}],["e",{"_index":234,"title":{},"body":{"classes/TestElement.html":{}}}],["e0a0472",{"_index":463,"title":{},"body":{"changelog.html":{}}}],["e1163fb",{"_index":465,"title":{},"body":{"changelog.html":{}}}],["e354723",{"_index":376,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":647,"title":{},"body":{"index.html":{}}}],["easier",{"_index":528,"title":{},"body":{"index.html":{}}}],["eee2e97",{"_index":458,"title":{},"body":{"changelog.html":{}}}],["el",{"_index":748,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.checked",{"_index":768,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.classes",{"_index":752,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.selectedindex",{"_index":770,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.selectedlabel",{"_index":774,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.selectedvalue",{"_index":773,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.textcontent",{"_index":766,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.value",{"_index":764,"title":{},"body":{"miscellaneous/variables.html":{}}}],["element",{"_index":35,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["element(selector",{"_index":111,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["element.ts",{"_index":202,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{}}}],["element.ts:106",{"_index":221,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:116",{"_index":222,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:125",{"_index":211,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:14",{"_index":207,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:16",{"_index":250,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["element.ts:26",{"_index":223,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:33",{"_index":225,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:40",{"_index":217,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:48",{"_index":214,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:56",{"_index":229,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:64",{"_index":209,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:76",{"_index":218,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:8",{"_index":249,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["element.ts:88",{"_index":219,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:97",{"_index":220,"title":{},"body":{"classes/TestElement.html":{}}}],["elements",{"_index":23,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["elements(selector",{"_index":125,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["empty",{"_index":129,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"index.html":{}}}],["encourage",{"_index":434,"title":{},"body":{"changelog.html":{}}}],["enjoy",{"_index":650,"title":{},"body":{"index.html":{}}}],["entry",{"_index":10,"title":{},"body":{"classes/ComponentTester.html":{}}}],["equal",{"_index":772,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error",{"_index":93,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["etc",{"_index":588,"title":{},"body":{"index.html":{}}}],["evaluated",{"_index":73,"title":{},"body":{"classes/ComponentTester.html":{}}}],["even",{"_index":582,"title":{},"body":{"index.html":{}}}],["event",{"_index":213,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"license.html":{}}}],["event('change",{"_index":552,"title":{},"body":{"index.html":{}}}],["event(type",{"_index":238,"title":{},"body":{"classes/TestElement.html":{}}}],["events",{"_index":577,"title":{},"body":{"index.html":{}}}],["everything",{"_index":612,"title":{},"body":{"index.html":{}}}],["exact",{"_index":765,"title":{},"body":{"miscellaneous/variables.html":{}}}],["example",{"_index":27,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["exist",{"_index":593,"title":{},"body":{"index.html":{}}}],["expect(city).tobetruthy",{"_index":557,"title":{},"body":{"index.html":{}}}],["expect(city.options.length).tobe(3",{"_index":558,"title":{},"body":{"index.html":{}}}],["expect(city.options[0].label).tobe",{"_index":560,"title":{},"body":{"index.html":{}}}],["expect(city.options[0].value).tobe",{"_index":559,"title":{},"body":{"index.html":{}}}],["expect(city.options[1].label).tobe('paris",{"_index":562,"title":{},"body":{"index.html":{}}}],["expect(city.options[1].value).tobe('paris",{"_index":561,"title":{},"body":{"index.html":{}}}],["expect(city.options[2].label).tobe('lyon",{"_index":564,"title":{},"body":{"index.html":{}}}],["expect(city.options[2].value).tobe('lyon",{"_index":563,"title":{},"body":{"index.html":{}}}],["expect(fixture.nativeelement.queryselector('#city')).tobefalsy",{"_index":568,"title":{},"body":{"index.html":{}}}],["expect(tester.city).tobefalsy",{"_index":604,"title":{},"body":{"index.html":{}}}],["expect(tester.city).tohaveselectedlabel('paris",{"_index":615,"title":{},"body":{"index.html":{}}}],["expect(tester.city.optionlabels).toequal",{"_index":601,"title":{},"body":{"index.html":{}}}],["expect(tester.city.optionvalues).toequal",{"_index":598,"title":{},"body":{"index.html":{}}}],["expect(tester.country).tohaveselectedvalue('fr",{"_index":614,"title":{},"body":{"index.html":{}}}],["expect(tester.informationmessage).tocontaintext('please",{"_index":611,"title":{},"body":{"index.html":{}}}],["expect(tester.name).tohavevalue('doe",{"_index":616,"title":{},"body":{"index.html":{}}}],["expect(tester.newsletter).tobechecked",{"_index":617,"title":{},"body":{"index.html":{}}}],["expectations",{"_index":583,"title":{},"body":{"index.html":{}}}],["expected",{"_index":749,"title":{},"body":{"miscellaneous/variables.html":{}}}],["export",{"_index":156,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["expose",{"_index":638,"title":{},"body":{"index.html":{}}}],["express",{"_index":707,"title":{},"body":{"license.html":{}}}],["extending",{"_index":636,"title":{},"body":{"index.html":{}}}],["extends",{"_index":186,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["f46816e",{"_index":404,"title":{},"body":{"changelog.html":{}}}],["fake",{"_index":488,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fakeroute",{"_index":483,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fakeroute(options",{"_index":487,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fakesnapshot",{"_index":485,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fakesnapshot(options",{"_index":514,"title":{},"body":{"miscellaneous/functions.html":{}}}],["false",{"_index":294,"title":{},"body":{"classes/TestInput.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["falsy",{"_index":751,"title":{},"body":{"miscellaneous/variables.html":{}}}],["features",{"_index":417,"title":{},"body":{"changelog.html":{}}}],["feedback",{"_index":655,"title":{},"body":{"index.html":{}}}],["few",{"_index":533,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"index.html":{}}}],["files",{"_index":680,"title":{},"body":{"license.html":{}}}],["filing",{"_index":656,"title":{},"body":{"index.html":{}}}],["fillwith",{"_index":263,"title":{},"body":{"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["fillwith(value",{"_index":269,"title":{},"body":{"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["fine",{"_index":427,"title":{},"body":{"changelog.html":{}}}],["first",{"_index":89,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{}}}],["fitness",{"_index":712,"title":{},"body":{"license.html":{}}}],["fix",{"_index":452,"title":{},"body":{"changelog.html":{}}}],["fixes",{"_index":370,"title":{},"body":{"changelog.html":{}}}],["fixture",{"_index":30,"title":{},"body":{"classes/ComponentTester.html":{},"index.html":{}}}],["fixture.detectchanges",{"_index":554,"title":{},"body":{"index.html":{}}}],["fixture.nativeelement.queryselector('#city",{"_index":556,"title":{},"body":{"index.html":{}}}],["fixture.nativeelement.queryselector('#country",{"_index":548,"title":{},"body":{"index.html":{}}}],["flag",{"_index":198,"title":{},"body":{"classes/TestButton.html":{}}}],["following",{"_index":539,"title":{},"body":{"index.html":{},"license.html":{}}}],["form",{"_index":610,"title":{},"body":{"index.html":{}}}],["formatting",{"_index":392,"title":{},"body":{"changelog.html":{}}}],["found",{"_index":117,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["france",{"_index":546,"title":{},"body":{"index.html":{}}}],["free",{"_index":673,"title":{},"body":{"license.html":{}}}],["french",{"_index":542,"title":{},"body":{"index.html":{}}}],["frequent",{"_index":606,"title":{},"body":{"index.html":{}}}],["functions",{"_index":482,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":696,"title":{},"body":{"license.html":{}}}],["future",{"_index":429,"title":{},"body":{"changelog.html":{}}}],["getchecked",{"_index":285,"title":{},"body":{"classes/TestInput.html":{}}}],["getclasses",{"_index":228,"title":{},"body":{"classes/TestElement.html":{}}}],["getcomponentinstance",{"_index":144,"title":{},"body":{"classes/ComponentTester.html":{}}}],["getdebugelement",{"_index":147,"title":{},"body":{"classes/ComponentTester.html":{}}}],["getdisabled",{"_index":196,"title":{},"body":{"classes/TestButton.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["getnativeelement",{"_index":138,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{}}}],["getoptionlabels",{"_index":331,"title":{},"body":{"classes/TestSelect.html":{}}}],["getoptionvalues",{"_index":327,"title":{},"body":{"classes/TestSelect.html":{}}}],["gets",{"_index":88,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["getselectedindex",{"_index":320,"title":{},"body":{"classes/TestSelect.html":{}}}],["getselectedlabel",{"_index":325,"title":{},"body":{"classes/TestSelect.html":{}}}],["getselectedvalue",{"_index":323,"title":{},"body":{"classes/TestSelect.html":{}}}],["getsize",{"_index":335,"title":{},"body":{"classes/TestSelect.html":{}}}],["getters",{"_index":639,"title":{},"body":{"index.html":{}}}],["gettextcontent",{"_index":224,"title":{},"body":{"classes/TestElement.html":{}}}],["getting",{"_index":22,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"classes/ComponentTester.html":{},"index.html":{}}}],["getvalue",{"_index":283,"title":{},"body":{"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["github",{"_index":660,"title":{},"body":{"index.html":{}}}],["given",{"_index":50,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["gives",{"_index":16,"title":{},"body":{"classes/ComponentTester.html":{}}}],["goes",{"_index":497,"title":{},"body":{"miscellaneous/functions.html":{}}}],["granted",{"_index":672,"title":{},"body":{"license.html":{}}}],["guaranteed",{"_index":431,"title":{},"body":{"changelog.html":{}}}],["guidelines",{"_index":364,"title":{},"body":{"changelog.html":{}}}],["helping",{"_index":183,"title":{},"body":{"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["helps",{"_index":516,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":671,"title":{},"body":{"license.html":{}}}],["hide",{"_index":565,"title":{},"body":{"index.html":{}}}],["holders",{"_index":717,"title":{},"body":{"license.html":{}}}],["host",{"_index":142,"title":{},"body":{"classes/ComponentTester.html":{}}}],["html",{"_index":199,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["htmlelement",{"_index":143,"title":{},"body":{"classes/ComponentTester.html":{}}}],["implicit",{"_index":379,"title":{},"body":{"changelog.html":{}}}],["implied",{"_index":708,"title":{},"body":{"license.html":{}}}],["import",{"_index":150,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["imports",{"_index":386,"title":{},"body":{"changelog.html":{}}}],["included",{"_index":701,"title":{},"body":{"license.html":{}}}],["includes",{"_index":620,"title":{},"body":{"index.html":{}}}],["including",{"_index":683,"title":{},"body":{"license.html":{}}}],["index",{"_index":28,"title":{"index.html":{}},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["inherited",{"_index":193,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["input",{"_index":36,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["input(selector",{"_index":130,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["input.ts",{"_index":261,"title":{},"body":{"classes/TestInput.html":{}}}],["input.ts:17",{"_index":270,"title":{},"body":{"classes/TestInput.html":{}}}],["input.ts:25",{"_index":284,"title":{},"body":{"classes/TestInput.html":{}}}],["input.ts:32",{"_index":286,"title":{},"body":{"classes/TestInput.html":{}}}],["input.ts:39",{"_index":288,"title":{},"body":{"classes/TestInput.html":{}}}],["input.ts:46",{"_index":267,"title":{},"body":{"classes/TestInput.html":{}}}],["input.ts:54",{"_index":272,"title":{},"body":{"classes/TestInput.html":{}}}],["input.ts:8",{"_index":266,"title":{},"body":{"classes/TestInput.html":{}}}],["inputs",{"_index":74,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["install",{"_index":630,"title":{},"body":{"index.html":{}}}],["installation",{"_index":628,"title":{},"body":{"index.html":{}}}],["instance",{"_index":76,"title":{},"body":{"classes/ComponentTester.html":{}}}],["instanceof",{"_index":162,"title":{},"body":{"classes/ComponentTester.html":{},"miscellaneous/variables.html":{}}}],["instead",{"_index":317,"title":{},"body":{"classes/TestSelect.html":{}}}],["isn't",{"_index":94,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["isnegative",{"_index":747,"title":{},"body":{"miscellaneous/variables.html":{}}}],["issues",{"_index":651,"title":{},"body":{"index.html":{}}}],["it's",{"_index":62,"title":{},"body":{"classes/ComponentTester.html":{}}}],["it('should",{"_index":540,"title":{},"body":{"index.html":{}}}],["jasmine",{"_index":605,"title":{},"body":{"index.html":{}}}],["jasmine.addmatchers(speculoosmatchers",{"_index":608,"title":{},"body":{"index.html":{}}}],["jasmine.custommatcher",{"_index":745,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jasmine.custommatcherfactories",{"_index":738,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jasmine.custommatcherresult",{"_index":759,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jasmine.matchersutil",{"_index":743,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jsdoc",{"_index":391,"title":{},"body":{"changelog.html":{}}}],["kind",{"_index":706,"title":{},"body":{"license.html":{}}}],["know",{"_index":535,"title":{},"body":{"index.html":{}}}],["label",{"_index":313,"title":{},"body":{"classes/TestSelect.html":{},"miscellaneous/variables.html":{}}}],["labels",{"_index":333,"title":{},"body":{"classes/TestSelect.html":{}}}],["latest",{"_index":399,"title":{},"body":{"changelog.html":{}}}],["liability",{"_index":721,"title":{},"body":{"license.html":{}}}],["liable",{"_index":718,"title":{},"body":{"license.html":{}}}],["library",{"_index":529,"title":{},"body":{"index.html":{}}}],["license",{"_index":664,"title":{"license.html":{}},"body":{"license.html":{}}}],["limitation",{"_index":684,"title":{},"body":{"license.html":{}}}],["limited",{"_index":709,"title":{},"body":{"license.html":{}}}],["lint",{"_index":388,"title":{},"body":{"changelog.html":{}}}],["list",{"_index":619,"title":{},"body":{"index.html":{}}}],["look",{"_index":661,"title":{},"body":{"index.html":{}}}],["lyon",{"_index":600,"title":{},"body":{"index.html":{}}}],["made",{"_index":61,"title":{},"body":{"classes/ComponentTester.html":{}}}],["main",{"_index":9,"title":{},"body":{"classes/ComponentTester.html":{}}}],["make",{"_index":527,"title":{},"body":{"index.html":{}}}],["matched",{"_index":90,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["matcher",{"_index":456,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["matchers",{"_index":449,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["matches",{"_index":124,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["matching",{"_index":113,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["merchantability",{"_index":711,"title":{},"body":{"license.html":{}}}],["merge",{"_index":687,"title":{},"body":{"license.html":{}}}],["message",{"_index":750,"title":{},"body":{"miscellaneous/variables.html":{}}}],["messages",{"_index":586,"title":{},"body":{"index.html":{}}}],["method",{"_index":118,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["methods",{"_index":20,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["minimal",{"_index":662,"title":{},"body":{"index.html":{}}}],["minutes",{"_index":534,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":481,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":665,"title":{},"body":{"license.html":{}}}],["modify",{"_index":686,"title":{},"body":{"license.html":{}}}],["modules",{"_index":731,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":584,"title":{},"body":{"index.html":{}}}],["mycomponenttester",{"_index":589,"title":{},"body":{"index.html":{}}}],["name",{"_index":78,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["native",{"_index":140,"title":{},"body":{"classes/ComponentTester.html":{},"index.html":{}}}],["nativeelement",{"_index":40,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"index.html":{}}}],["necessary",{"_index":71,"title":{},"body":{"classes/ComponentTester.html":{}}}],["need",{"_index":553,"title":{},"body":{"index.html":{}}}],["needed",{"_index":597,"title":{},"body":{"index.html":{}}}],["negativecompare",{"_index":761,"title":{},"body":{"miscellaneous/variables.html":{}}}],["new",{"_index":159,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["ngx",{"_index":377,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["ninja",{"_index":668,"title":{},"body":{"license.html":{}}}],["none",{"_index":757,"title":{},"body":{"miscellaneous/variables.html":{}}}],["noninfringement",{"_index":715,"title":{},"body":{"license.html":{}}}],["notable",{"_index":356,"title":{},"body":{"changelog.html":{}}}],["note",{"_index":59,"title":{},"body":{"classes/ComponentTester.html":{}}}],["nothing",{"_index":314,"title":{},"body":{"classes/TestSelect.html":{}}}],["notice",{"_index":699,"title":{},"body":{"license.html":{}}}],["now",{"_index":406,"title":{},"body":{"changelog.html":{}}}],["npm",{"_index":629,"title":{},"body":{"index.html":{}}}],["null",{"_index":99,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["number",{"_index":307,"title":{},"body":{"classes/TestSelect.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":523,"title":{},"body":{"index.html":{}}}],["obtaining",{"_index":676,"title":{},"body":{"license.html":{}}}],["once",{"_index":67,"title":{},"body":{"classes/ComponentTester.html":{}}}],["one",{"_index":642,"title":{},"body":{"index.html":{}}}],["option",{"_index":310,"title":{},"body":{"classes/TestSelect.html":{},"index.html":{}}}],["option's",{"_index":771,"title":{},"body":{"miscellaneous/variables.html":{}}}],["option.label",{"_index":347,"title":{},"body":{"classes/TestSelect.html":{}}}],["option.value",{"_index":346,"title":{},"body":{"classes/TestSelect.html":{}}}],["optional",{"_index":79,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["optionlabels",{"_index":303,"title":{},"body":{"classes/TestSelect.html":{}}}],["options",{"_index":330,"title":{},"body":{"classes/TestSelect.html":{},"miscellaneous/functions.html":{}}}],["optionvalues",{"_index":302,"title":{},"body":{"classes/TestSelect.html":{}}}],["otherwise",{"_index":726,"title":{},"body":{"license.html":{}}}],["out",{"_index":728,"title":{},"body":{"license.html":{}}}],["overview",{"_index":732,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":476,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":522,"title":{},"body":{"index.html":{}}}],["param",{"_index":155,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["parameters",{"_index":77,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{}}}],["parammap",{"_index":494,"title":{},"body":{"miscellaneous/functions.html":{}}}],["params",{"_index":492,"title":{},"body":{"miscellaneous/functions.html":{}}}],["parent",{"_index":500,"title":{},"body":{"miscellaneous/functions.html":{}}}],["paris",{"_index":599,"title":{},"body":{"index.html":{}}}],["partial",{"_index":489,"title":{},"body":{"miscellaneous/functions.html":{}}}],["partially",{"_index":511,"title":{},"body":{"miscellaneous/functions.html":{}}}],["particular",{"_index":713,"title":{},"body":{"license.html":{}}}],["pass",{"_index":491,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["passed",{"_index":56,"title":{},"body":{"classes/ComponentTester.html":{},"miscellaneous/functions.html":{}}}],["pattern",{"_index":524,"title":{},"body":{"index.html":{}}}],["peer",{"_index":374,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["permission",{"_index":670,"title":{},"body":{"license.html":{}}}],["permit",{"_index":694,"title":{},"body":{"license.html":{}}}],["person",{"_index":675,"title":{},"body":{"license.html":{}}}],["persons",{"_index":695,"title":{},"body":{"license.html":{}}}],["please",{"_index":653,"title":{},"body":{"index.html":{}}}],["point",{"_index":11,"title":{},"body":{"classes/ComponentTester.html":{}}}],["polyfill.ts",{"_index":398,"title":{},"body":{"changelog.html":{}}}],["populated",{"_index":512,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["portions",{"_index":703,"title":{},"body":{"license.html":{}}}],["pre",{"_index":609,"title":{},"body":{"index.html":{}}}],["prefer",{"_index":640,"title":{},"body":{"index.html":{}}}],["previous",{"_index":412,"title":{},"body":{"changelog.html":{}}}],["previously",{"_index":566,"title":{},"body":{"index.html":{}}}],["private",{"_index":230,"title":{},"body":{"classes/TestElement.html":{}}}],["project",{"_index":358,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["properties",{"_index":19,"title":{},"body":{"classes/ComponentTester.html":{}}}],["property",{"_index":287,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{}}}],["protected",{"_index":231,"title":{},"body":{"classes/TestElement.html":{}}}],["provide",{"_index":654,"title":{},"body":{"index.html":{}}}],["provided",{"_index":704,"title":{},"body":{"license.html":{}}}],["provides",{"_index":525,"title":{},"body":{"index.html":{}}}],["providing",{"_index":180,"title":{},"body":{"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["public",{"_index":395,"title":{},"body":{"changelog.html":{}}}],["public_api.ts",{"_index":389,"title":{},"body":{"changelog.html":{}}}],["publish",{"_index":688,"title":{},"body":{"license.html":{}}}],["pull",{"_index":658,"title":{},"body":{"index.html":{}}}],["purpose",{"_index":714,"title":{},"body":{"license.html":{}}}],["querier",{"_index":154,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{}}}],["queryparammap",{"_index":499,"title":{},"body":{"miscellaneous/functions.html":{}}}],["queryparams",{"_index":498,"title":{},"body":{"miscellaneous/functions.html":{}}}],["questions",{"_index":652,"title":{},"body":{"index.html":{}}}],["read",{"_index":581,"title":{},"body":{"index.html":{}}}],["readable",{"_index":585,"title":{},"body":{"index.html":{}}}],["readme",{"_index":438,"title":{},"body":{"changelog.html":{}}}],["readonly",{"_index":29,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"changelog.html":{}}}],["receiver",{"_index":740,"title":{},"body":{"miscellaneous/variables.html":{}}}],["recommended",{"_index":571,"title":{},"body":{"index.html":{}}}],["release",{"_index":474,"title":{},"body":{"changelog.html":{}}}],["repetition",{"_index":603,"title":{},"body":{"index.html":{}}}],["repetitions",{"_index":573,"title":{},"body":{"index.html":{}}}],["requests",{"_index":659,"title":{},"body":{"index.html":{}}}],["restriction",{"_index":682,"title":{},"body":{"license.html":{}}}],["result",{"_index":176,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":177,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":119,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":115,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["returning",{"_index":641,"title":{},"body":{"index.html":{}}}],["returns",{"_index":97,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["rights",{"_index":685,"title":{},"body":{"license.html":{}}}],["route",{"_index":501,"title":{},"body":{"miscellaneous/functions.html":{}}}],["route's",{"_index":493,"title":{},"body":{"miscellaneous/functions.html":{}}}],["route.parent.snapshot",{"_index":507,"title":{},"body":{"miscellaneous/functions.html":{}}}],["route.snapshot.parent",{"_index":508,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rule",{"_index":383,"title":{},"body":{"changelog.html":{}}}],["run",{"_index":426,"title":{},"body":{"changelog.html":{}}}],["rxjs",{"_index":479,"title":{},"body":{"dependencies.html":{}}}],["same",{"_index":496,"title":{},"body":{"miscellaneous/functions.html":{}}}],["save",{"_index":631,"title":{},"body":{"index.html":{}}}],["see",{"_index":360,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["select",{"_index":37,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["select(selector",{"_index":132,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["select.ts",{"_index":295,"title":{},"body":{"classes/TestSelect.html":{}}}],["select.ts:16",{"_index":308,"title":{},"body":{"classes/TestSelect.html":{}}}],["select.ts:26",{"_index":319,"title":{},"body":{"classes/TestSelect.html":{}}}],["select.ts:38",{"_index":312,"title":{},"body":{"classes/TestSelect.html":{}}}],["select.ts:48",{"_index":321,"title":{},"body":{"classes/TestSelect.html":{}}}],["select.ts:55",{"_index":324,"title":{},"body":{"classes/TestSelect.html":{}}}],["select.ts:65",{"_index":326,"title":{},"body":{"classes/TestSelect.html":{}}}],["select.ts:75",{"_index":328,"title":{},"body":{"classes/TestSelect.html":{}}}],["select.ts:8",{"_index":305,"title":{},"body":{"classes/TestSelect.html":{}}}],["select.ts:82",{"_index":332,"title":{},"body":{"classes/TestSelect.html":{}}}],["select.ts:89",{"_index":336,"title":{},"body":{"classes/TestSelect.html":{}}}],["select.ts:96",{"_index":337,"title":{},"body":{"classes/TestSelect.html":{}}}],["selected",{"_index":322,"title":{},"body":{"classes/TestSelect.html":{},"miscellaneous/variables.html":{}}}],["selectedindex",{"_index":299,"title":{},"body":{"classes/TestSelect.html":{}}}],["selectedlabel",{"_index":301,"title":{},"body":{"classes/TestSelect.html":{}}}],["selectedvalue",{"_index":300,"title":{},"body":{"classes/TestSelect.html":{}}}],["selectindex",{"_index":296,"title":{},"body":{"classes/TestSelect.html":{}}}],["selectindex(index",{"_index":306,"title":{},"body":{"classes/TestSelect.html":{}}}],["selecting",{"_index":544,"title":{},"body":{"index.html":{}}}],["selectlabel",{"_index":297,"title":{},"body":{"classes/TestSelect.html":{}}}],["selectlabel(label",{"_index":311,"title":{},"body":{"classes/TestSelect.html":{}}}],["selector",{"_index":91,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["selects",{"_index":309,"title":{},"body":{"classes/TestSelect.html":{}}}],["selectvalue",{"_index":298,"title":{},"body":{"classes/TestSelect.html":{}}}],["selectvalue(value",{"_index":318,"title":{},"body":{"classes/TestSelect.html":{}}}],["sell",{"_index":692,"title":{},"body":{"license.html":{}}}],["set",{"_index":75,"title":{},"body":{"classes/ComponentTester.html":{},"miscellaneous/functions.html":{}}}],["sets",{"_index":271,"title":{},"body":{"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["shall",{"_index":700,"title":{},"body":{"license.html":{}}}],["shown",{"_index":637,"title":{},"body":{"index.html":{}}}],["similar",{"_index":592,"title":{},"body":{"index.html":{}}}],["simpler",{"_index":518,"title":{},"body":{"index.html":{}}}],["simply",{"_index":530,"title":{},"body":{"index.html":{}}}],["size",{"_index":304,"title":{},"body":{"classes/TestSelect.html":{}}}],["snapshot",{"_index":502,"title":{},"body":{"miscellaneous/functions.html":{}}}],["snapshot's",{"_index":504,"title":{},"body":{"miscellaneous/functions.html":{}}}],["software",{"_index":678,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["speculoos",{"_index":378,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["speculoosmatchers",{"_index":735,"title":{},"body":{"miscellaneous/variables.html":{}}}],["squad",{"_index":669,"title":{},"body":{"license.html":{}}}],["src/.../matchers.ts",{"_index":736,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../route.ts",{"_index":484,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/lib/component",{"_index":6,"title":{},"body":{"classes/ComponentTester.html":{}}}],["src/lib/matchers.ts",{"_index":737,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/lib/route.ts",{"_index":486,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/lib/test",{"_index":178,"title":{},"body":{"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["standard",{"_index":361,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["start",{"_index":532,"title":{},"body":{"index.html":{}}}],["started",{"_index":354,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["static",{"_index":32,"title":{},"body":{"classes/ComponentTester.html":{}}}],["stick",{"_index":411,"title":{},"body":{"changelog.html":{}}}],["string",{"_index":86,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["subclass",{"_index":64,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["subclasses",{"_index":26,"title":{},"body":{"classes/ComponentTester.html":{}}}],["subject",{"_index":697,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":690,"title":{},"body":{"license.html":{}}}],["submitting",{"_index":657,"title":{},"body":{"index.html":{}}}],["substantial",{"_index":702,"title":{},"body":{"license.html":{}}}],["super(mycomponent",{"_index":590,"title":{},"body":{"index.html":{}}}],["super(tester",{"_index":200,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["support",{"_index":432,"title":{},"body":{"changelog.html":{}}}],["t",{"_index":102,"title":{},"body":{"classes/ComponentTester.html":{}}}],["templates",{"_index":72,"title":{},"body":{"classes/ComponentTester.html":{}}}],["test",{"_index":84,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{}}}],["testbed",{"_index":53,"title":{},"body":{"classes/ComponentTester.html":{}}}],["testbed.createcomponent(arg",{"_index":163,"title":{},"body":{"classes/ComponentTester.html":{}}}],["testbed.createcomponent(componenttype",{"_index":158,"title":{},"body":{"classes/ComponentTester.html":{}}}],["testbutton",{"_index":98,"title":{"classes/TestButton.html":{}},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["tested",{"_index":146,"title":{},"body":{"classes/ComponentTester.html":{},"changelog.html":{}}}],["testelement",{"_index":25,"title":{"classes/TestElement.html":{}},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/variables.html":{}}}],["testelement:106",{"_index":258,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["testelement:116",{"_index":259,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["testelement:125",{"_index":252,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["testelement:40",{"_index":254,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["testelement:48",{"_index":253,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["testelement:64",{"_index":251,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["testelement:76",{"_index":255,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["testelement:88",{"_index":256,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["testelement:97",{"_index":257,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["testelementquerier",{"_index":153,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{}}}],["testelementquerier(tester",{"_index":233,"title":{},"body":{"classes/TestElement.html":{}}}],["testelementquerier.wrap(this.debugelement",{"_index":165,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester",{"_index":192,"title":{},"body":{"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["tester.country.selectindex(0",{"_index":602,"title":{},"body":{"index.html":{}}}],["tester.country.selectlabel('france",{"_index":596,"title":{},"body":{"index.html":{}}}],["tester.element('#some",{"_index":123,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["tester.elements('input",{"_index":128,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["tester.ts",{"_index":7,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:101",{"_index":131,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:110",{"_index":133,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:120",{"_index":136,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:129",{"_index":87,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:136",{"_index":106,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:20",{"_index":83,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:25",{"_index":82,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:30",{"_index":101,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:33",{"_index":48,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:54",{"_index":139,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:61",{"_index":145,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:68",{"_index":148,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:80",{"_index":112,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:92",{"_index":126,"title":{},"body":{"classes/ComponentTester.html":{}}}],["testhtmlelement",{"_index":187,"title":{"classes/TestHtmlElement.html":{}},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testhtmlelement:106",{"_index":281,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testhtmlelement:116",{"_index":282,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testhtmlelement:125",{"_index":275,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testhtmlelement:16",{"_index":194,"title":{},"body":{"classes/TestButton.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testhtmlelement:40",{"_index":277,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testhtmlelement:48",{"_index":276,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testhtmlelement:64",{"_index":274,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testhtmlelement:76",{"_index":278,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testhtmlelement:88",{"_index":279,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testhtmlelement:97",{"_index":280,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testinput",{"_index":120,"title":{"classes/TestInput.html":{}},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["tests",{"_index":185,"title":{},"body":{"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["testselect",{"_index":134,"title":{"classes/TestSelect.html":{}},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["testtextarea",{"_index":137,"title":{"classes/TestTextArea.html":{}},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["testxxx",{"_index":646,"title":{},"body":{"index.html":{}}}],["text",{"_index":226,"title":{},"body":{"classes/TestElement.html":{},"classes/TestSelect.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["textarea",{"_index":38,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["textarea(selector",{"_index":135,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["textarea.ts",{"_index":349,"title":{},"body":{"classes/TestTextArea.html":{}}}],["textarea.ts:17",{"_index":351,"title":{},"body":{"classes/TestTextArea.html":{}}}],["textarea.ts:25",{"_index":352,"title":{},"body":{"classes/TestTextArea.html":{}}}],["textarea.ts:32",{"_index":353,"title":{},"body":{"classes/TestTextArea.html":{}}}],["textarea.ts:8",{"_index":350,"title":{},"body":{"classes/TestTextArea.html":{}}}],["textcontent",{"_index":206,"title":{},"body":{"classes/TestElement.html":{},"miscellaneous/variables.html":{}}}],["texts",{"_index":334,"title":{},"body":{"classes/TestSelect.html":{}}}],["this.debugelement.nativeelement",{"_index":235,"title":{},"body":{"classes/TestElement.html":{}}}],["this.dispatcheventoftype('change",{"_index":293,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{}}}],["this.dispatcheventoftype('input",{"_index":290,"title":{},"body":{"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["this.fixture",{"_index":161,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.fixture.componentinstance",{"_index":167,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.fixture.debugelement",{"_index":168,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.fixture.detectchanges(checknochanges",{"_index":175,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.fixture.nativeelement",{"_index":166,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.nativeelement.checked",{"_index":291,"title":{},"body":{"classes/TestInput.html":{}}}],["this.nativeelement.click",{"_index":260,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["this.nativeelement.disabled",{"_index":201,"title":{},"body":{"classes/TestButton.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["this.nativeelement.dispatchevent(event",{"_index":240,"title":{},"body":{"classes/TestElement.html":{}}}],["this.nativeelement.dispatchevent(new",{"_index":237,"title":{},"body":{"classes/TestElement.html":{}}}],["this.nativeelement.getattribute(name",{"_index":242,"title":{},"body":{"classes/TestElement.html":{}}}],["this.nativeelement.options.length",{"_index":348,"title":{},"body":{"classes/TestSelect.html":{}}}],["this.nativeelement.selectedindex",{"_index":338,"title":{},"body":{"classes/TestSelect.html":{}}}],["this.nativeelement.textcontent",{"_index":236,"title":{},"body":{"classes/TestElement.html":{}}}],["this.nativeelement.value",{"_index":289,"title":{},"body":{"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["this.optionlabels.indexof(label",{"_index":342,"title":{},"body":{"classes/TestSelect.html":{}}}],["this.optionvalues.indexof(value",{"_index":339,"title":{},"body":{"classes/TestSelect.html":{}}}],["this.querier",{"_index":232,"title":{},"body":{"classes/TestElement.html":{}}}],["this.querier.button(selector",{"_index":248,"title":{},"body":{"classes/TestElement.html":{}}}],["this.querier.element(selector",{"_index":243,"title":{},"body":{"classes/TestElement.html":{}}}],["this.querier.elements(selector",{"_index":244,"title":{},"body":{"classes/TestElement.html":{}}}],["this.querier.input(selector",{"_index":245,"title":{},"body":{"classes/TestElement.html":{}}}],["this.querier.select(selector",{"_index":246,"title":{},"body":{"classes/TestElement.html":{}}}],["this.querier.textarea(selector",{"_index":247,"title":{},"body":{"classes/TestElement.html":{}}}],["this.select('#city",{"_index":595,"title":{},"body":{"index.html":{}}}],["this.select('#country",{"_index":591,"title":{},"body":{"index.html":{}}}],["this.selectedindex",{"_index":343,"title":{},"body":{"classes/TestSelect.html":{}}}],["this.selectindex(index",{"_index":341,"title":{},"body":{"classes/TestSelect.html":{}}}],["this.testelement",{"_index":164,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.testelement.button(selector",{"_index":174,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.testelement.element(selector",{"_index":169,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.testelement.elements(selector",{"_index":170,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.testelement.input(selector",{"_index":171,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.testelement.select(selector",{"_index":172,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.testelement.textarea(selector",{"_index":173,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.tester.detectchanges",{"_index":239,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{}}}],["though",{"_index":433,"title":{},"body":{"changelog.html":{}}}],["throw",{"_index":316,"title":{},"body":{"classes/TestSelect.html":{}}}],["throws",{"_index":92,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["thus",{"_index":121,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["tobechecked",{"_index":459,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["tocontaintext",{"_index":461,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["tocontaintext(textcontent",{"_index":624,"title":{},"body":{"index.html":{}}}],["todo",{"_index":315,"title":{},"body":{"classes/TestSelect.html":{}}}],["tohaveclass",{"_index":741,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tohaveclass(classname",{"_index":621,"title":{},"body":{"index.html":{}}}],["tohaveselectedindex",{"_index":464,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["tohaveselectedindex(index",{"_index":625,"title":{},"body":{"index.html":{}}}],["tohaveselectedlabel",{"_index":466,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["tohaveselectedlabel(label",{"_index":627,"title":{},"body":{"index.html":{}}}],["tohaveselectedvalue",{"_index":468,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["tohaveselectedvalue(value",{"_index":626,"title":{},"body":{"index.html":{}}}],["tohavetext",{"_index":453,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["tohavetext(textcontent",{"_index":623,"title":{},"body":{"index.html":{}}}],["tohavevalue",{"_index":763,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tohavevalue(value",{"_index":622,"title":{},"body":{"index.html":{}}}],["tort",{"_index":725,"title":{},"body":{"license.html":{}}}],["trigger",{"_index":68,"title":{},"body":{"classes/ComponentTester.html":{}}}],["triggering",{"_index":578,"title":{},"body":{"index.html":{}}}],["triggers",{"_index":107,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["true",{"_index":292,"title":{},"body":{"classes/TestInput.html":{}}}],["type",{"_index":45,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["typically",{"_index":635,"title":{},"body":{"index.html":{}}}],["typo",{"_index":437,"title":{},"body":{"changelog.html":{}}}],["ugrade",{"_index":435,"title":{},"body":{"changelog.html":{}}}],["uncheck",{"_index":264,"title":{},"body":{"classes/TestInput.html":{}}}],["unchecks",{"_index":273,"title":{},"body":{"classes/TestInput.html":{}}}],["under",{"_index":506,"title":{},"body":{"miscellaneous/functions.html":{}}}],["understand",{"_index":531,"title":{},"body":{"index.html":{}}}],["unit",{"_index":520,"title":{},"body":{"index.html":{}}}],["up",{"_index":63,"title":{},"body":{"classes/ComponentTester.html":{}}}],["update",{"_index":397,"title":{},"body":{"changelog.html":{}}}],["upgrade",{"_index":402,"title":{},"body":{"changelog.html":{}}}],["use",{"_index":122,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{}}}],["used",{"_index":18,"title":{},"body":{"classes/ComponentTester.html":{},"index.html":{}}}],["useful",{"_index":580,"title":{},"body":{"index.html":{}}}],["user",{"_index":65,"title":{},"body":{"classes/ComponentTester.html":{}}}],["using",{"_index":52,"title":{},"body":{"classes/ComponentTester.html":{},"index.html":{}}}],["util",{"_index":742,"title":{},"body":{"miscellaneous/variables.html":{}}}],["utilities",{"_index":526,"title":{},"body":{"index.html":{}}}],["value",{"_index":116,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":329,"title":{},"body":{"classes/TestSelect.html":{},"miscellaneous/functions.html":{}}}],["variables",{"_index":734,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":362,"title":{},"body":{"changelog.html":{}}}],["versions",{"_index":430,"title":{},"body":{"changelog.html":{}}}],["very",{"_index":473,"title":{},"body":{"changelog.html":{}}}],["void",{"_index":110,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["want",{"_index":409,"title":{},"body":{"changelog.html":{}}}],["warranties",{"_index":710,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":705,"title":{},"body":{"license.html":{}}}],["was${!isnegative",{"_index":769,"title":{},"body":{"miscellaneous/variables.html":{}}}],["way",{"_index":570,"title":{},"body":{"index.html":{}}}],["whether",{"_index":722,"title":{},"body":{"license.html":{}}}],["without",{"_index":510,"title":{},"body":{"miscellaneous/functions.html":{},"license.html":{}}}],["wrap",{"_index":81,"title":{},"body":{"classes/ComponentTester.html":{}}}],["wrapped",{"_index":24,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["wrapper",{"_index":648,"title":{},"body":{"index.html":{}}}],["wrappers",{"_index":574,"title":{},"body":{"index.html":{}}}],["wrapping",{"_index":54,"title":{},"body":{"classes/ComponentTester.html":{},"miscellaneous/variables.html":{}}}],["wraps",{"_index":13,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["write",{"_index":517,"title":{},"body":{"index.html":{}}}],["writing",{"_index":184,"title":{},"body":{"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["written",{"_index":538,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":633,"title":{},"body":{"index.html":{}}}],["yes",{"_index":109,"title":{},"body":{"classes/ComponentTester.html":{}}}],["you've",{"_index":537,"title":{},"body":{"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/ComponentTester.html":{"url":"classes/ComponentTester.html","title":"class - ComponentTester","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ComponentTester\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/component-tester.ts\n        \n\n            \n                Description\n            \n            \n                The main entry point of the API. It wraps an Angular ComponentFixture, and gives access to its\nmost used properties and methods. It also allows getting elements wrapped in TestElement (and its subclasses)\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                fixture\n                            \n                            \n                                    Readonly\n                                testElement\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                button\n                            \n                            \n                                    Static\n                                create\n                            \n                            \n                                detectChanges\n                            \n                            \n                                element\n                            \n                            \n                                elements\n                            \n                            \n                                input\n                            \n                            \n                                select\n                            \n                            \n                                textarea\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    nativeElement\n                                \n                                \n                                    componentInstance\n                                \n                                \n                                    debugElement\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(arg: Type | ComponentFixture)\n                    \n                \n                        \n                            \n                                Defined in src/lib/component-tester.ts:33\n                            \n                        \n\n                \n                    \n                            Creates a ComponentFixture for the given component type using the TestBed, and creates a ComponentTester\nwrapping (and delegating) to this fixture. If a fixture is passed, then delegates to this fixture directly.\nNote that no detectChanges() call is made by this constructor. It's up to the subclass constructor,\nor to the user of the created ComponentTester, to call detectChanges() at least once to trigger change\ndetection. This is necessary because some component templates can only be evaluated once inputs\nhave been set on the component instance.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        arg\n                                                  \n                                                        \n                                                                    Type | ComponentFixture\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                the type of the component to wrap, or a component fixture to wrap\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            fixture\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ComponentFixture\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/component-tester.ts:25\n                            \n                        \n\n                \n                    \n                        The component fixture of the component\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            testElement\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     TestElement\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/component-tester.ts:20\n                            \n                        \n\n                \n                    \n                        The test element of the component\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            button\n                            \n                            \n                        \n                    \n                \n                \n                    \nbutton(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/component-tester.ts:129\n                            \n                        \n\n\n                \n                    \n                            Gets the first button matched by the given selector. Throws an Error if the matched element isn't actually a button.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestButton | null\n\n                            \n                                \n                                    the wrapped button, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            create\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        create(componentType: Type)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/component-tester.ts:30\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n                            Creates a component fixture of the given type with the TestBed and wraps it into a ComponentTester\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        componentType\n                                                        \n                                                                    Type\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     ComponentTester\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            detectChanges\n                            \n                            \n                        \n                    \n                \n                \n                    \ndetectChanges(checkNoChanges?: boolean)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/component-tester.ts:136\n                            \n                        \n\n\n                \n                    \n                            Triggers a change detection using the wrapped fixture\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        checkNoChanges\n                                                        \n                                                                    boolean\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            element\n                            \n                            \n                        \n                    \n                \n                \n                    \nelement(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/component-tester.ts:80\n                            \n                        \n\n\n                \n                    \n                            Gets the first element matching the given CSS selector and wraps it into a TestElement. The actual type\nof the returned value is the TestElement subclass matching the type of the found element. So, if the\nmatched element is an input for example, the method will return a TestInput. You can thus use\ntester.element('#some-input') as TestInput.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestElement | null\n\n                            \n                                \n                                    the wrapped element, or null if no element matches the selector.\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            elements\n                            \n                            \n                        \n                    \n                \n                \n                    \nelements(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/component-tester.ts:92\n                            \n                        \n\n\n                \n                    \n                            Gets all the elements matching the given CSS selector and wraps them into a TestElement. The actual type\nof the returned elements is the TestElement subclass matching the type of the found element. So, if the\nmatched elements are inputs for example, the method will return an array of TestInput. You can thus use\ntester.elements('input') as Array.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Array>\n\n                            \n                                \n                                    the array of matched elements, empty if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            input\n                            \n                            \n                        \n                    \n                \n                \n                    \ninput(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/component-tester.ts:101\n                            \n                        \n\n\n                \n                    \n                            Gets the first input matched by the given selector. Throws an Error if the matched element isn't actually an input.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestInput | null\n\n                            \n                                \n                                    the wrapped input, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            select\n                            \n                            \n                        \n                    \n                \n                \n                    \nselect(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/component-tester.ts:110\n                            \n                        \n\n\n                \n                    \n                            Gets the first select matched by the given selector. Throws an Error if the matched element isn't actually a select.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestSelect | null\n\n                            \n                                \n                                    the wrapped select, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            textarea\n                            \n                            \n                        \n                    \n                \n                \n                    \ntextarea(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/component-tester.ts:120\n                            \n                        \n\n\n                \n                    \n                            Gets the first textarea matched by the given selector\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestTextArea | null\n\n                            \n                                \n                                    the wrapped textarea, or null if no element was matched. Throws an Error if the matched element isn't actually a textarea.\n\n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        nativeElement\n                    \n                \n\n                \n                    \n                        getnativeElement()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/component-tester.ts:54\n                                \n                            \n                    \n                        \n                                The native DOM host element of the component\n\n\n                                \n                                    Returns :     HTMLElement\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        componentInstance\n                    \n                \n\n                \n                    \n                        getcomponentInstance()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/component-tester.ts:61\n                                \n                            \n                    \n                        \n                                Gets the instance of the tested component from the wrapped fixture\n\n\n                                \n                                    Returns :     T\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        debugElement\n                    \n                \n\n                \n                    \n                        getdebugElement()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/component-tester.ts:68\n                                \n                            \n                    \n                        \n                                Gets the debug element from the wrapped fixture\n\n\n                                \n                                    Returns :     DebugElement\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { DebugElement, Type } from '@angular/core';\nimport { TestTextArea } from './test-textarea';\nimport { TestElement } from './test-element';\nimport { TestInput } from './test-input';\nimport { TestSelect } from './test-select';\nimport { TestButton } from './test-button';\nimport { TestElementQuerier } from './test-element-querier';\n\n/**\n * The main entry point of the API. It wraps an Angular ComponentFixture, and gives access to its\n * most used properties and methods. It also allows getting elements wrapped in TestElement (and its subclasses)\n * @param  the type of the component to test\n */\nexport class ComponentTester {\n\n  /**\n   * The test element of the component\n   */\n  readonly testElement: TestElement;\n\n  /**\n   * The component fixture of the component\n   */\n  readonly fixture: ComponentFixture;\n\n  /**\n   * Creates a component fixture of the given type with the TestBed and wraps it into a ComponentTester\n   */\n  static create(componentType: Type) {\n    const fixture = TestBed.createComponent(componentType);\n    return new ComponentTester(fixture);\n  }\n\n  /**\n   * Creates a ComponentFixture for the given component type using the TestBed, and creates a ComponentTester\n   * wrapping (and delegating) to this fixture. If a fixture is passed, then delegates to this fixture directly.\n   *\n   * Note that no `detectChanges()` call is made by this constructor. It's up to the subclass constructor,\n   * or to the user of the created ComponentTester, to call `detectChanges()` at least once to trigger change\n   * detection. This is necessary because some component templates can only be evaluated once inputs\n   * have been set on the component instance.\n   *\n   * @param arg the type of the component to wrap, or a component fixture to wrap\n   */\n  constructor(arg: Type | ComponentFixture) {\n    this.fixture = (arg instanceof ComponentFixture) ? arg : TestBed.createComponent(arg);\n    this.testElement = TestElementQuerier.wrap(this.debugElement, this);\n  }\n\n  /**\n   * The native DOM host element of the component\n   */\n  get nativeElement(): HTMLElement {\n    return this.fixture.nativeElement;\n  }\n\n  /**\n   * Gets the instance of the tested component from the wrapped fixture\n   */\n  get componentInstance(): T {\n    return this.fixture.componentInstance;\n  }\n\n  /**\n   * Gets the debug element from the wrapped fixture\n   */\n  get debugElement(): DebugElement {\n    return this.fixture.debugElement;\n  }\n\n  /**\n   * Gets the first element matching the given CSS selector and wraps it into a TestElement. The actual type\n   * of the returned value is the TestElement subclass matching the type of the found element. So, if the\n   * matched element is an input for example, the method will return a TestInput. You can thus use\n   * `tester.element('#some-input') as TestInput`.\n   * @param selector a CSS selector\n   * @returns the wrapped element, or null if no element matches the selector.\n   */\n  element(selector: string): TestElement | null {\n    return this.testElement.element(selector);\n  }\n\n  /**\n   * Gets all the elements matching the given CSS selector and wraps them into a TestElement. The actual type\n   * of the returned elements is the TestElement subclass matching the type of the found element. So, if the\n   * matched elements are inputs for example, the method will return an array of TestInput. You can thus use\n   * `tester.elements('input') as Array`.\n   * @param selector a CSS selector\n   * @returns the array of matched elements, empty if no element was matched\n   */\n  elements(selector: string): Array> {\n    return this.testElement.elements(selector);\n  }\n\n  /**\n   * Gets the first input matched by the given selector. Throws an Error if the matched element isn't actually an input.\n   * @param selector a CSS selector\n   * @returns the wrapped input, or null if no element was matched\n   */\n  input(selector: string): TestInput | null  {\n    return this.testElement.input(selector);\n  }\n\n  /**\n   * Gets the first select matched by the given selector. Throws an Error if the matched element isn't actually a select.\n   * @param selector a CSS selector\n   * @returns the wrapped select, or null if no element was matched\n   */\n  select(selector: string): TestSelect | null  {\n    return this.testElement.select(selector);\n  }\n\n  /**\n   * Gets the first textarea matched by the given selector\n   * @param selector a CSS selector\n   * @returns the wrapped textarea, or null if no element was matched. Throws an Error if the matched element isn't actually a textarea.\n   * @throws {Error} if the matched element isn't actually a textarea\n   */\n  textarea(selector: string): TestTextArea | null {\n    return this.testElement.textarea(selector);\n  }\n\n  /**\n   * Gets the first button matched by the given selector. Throws an Error if the matched element isn't actually a button.\n   * @param selector a CSS selector\n   * @returns the wrapped button, or null if no element was matched\n   */\n  button(selector: string): TestButton | null {\n    return this.testElement.button(selector);\n  }\n\n  /**\n   * Triggers a change detection using the wrapped fixture\n   */\n  detectChanges(checkNoChanges?: boolean) {\n    this.fixture.detectChanges(checkNoChanges);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TestButton.html":{"url":"classes/TestButton.html","title":"class - TestButton","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TestButton\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/test-button.ts\n        \n\n            \n                Description\n            \n            \n                A wrapped button element, providing additional methods and attributes helping with writing tests\n\n            \n\n            \n                Extends\n            \n            \n                    TestHtmlElement\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    disabled\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tester: ComponentTester, debugElement: DebugElement)\n                    \n                \n                        \n                            \n                                Defined in src/lib/test-button.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tester\n                                                  \n                                                        \n                                                                    ComponentTester\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        debugElement\n                                                  \n                                                        \n                                                                    DebugElement\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            click\n                            \n                            \n                        \n                    \n                \n                \n                    \nclick()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:16\n                            \n                        \n\n\n                \n                    \n                            Clicks on the wrapped element, then triggers a change detection\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        disabled\n                    \n                \n\n                \n                    \n                        getdisabled()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-button.ts:16\n                                \n                            \n                    \n                        \n                                the disabled flag of the button\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { ComponentTester } from './component-tester';\nimport { TestHtmlElement } from './test-html-element';\nimport { DebugElement } from '@angular/core';\n\n/**\n * A wrapped button element, providing additional methods and attributes helping with writing tests\n */\nexport class TestButton extends TestHtmlElement {\n  constructor(tester: ComponentTester, debugElement: DebugElement) {\n    super(tester, debugElement);\n  }\n\n  /**\n   * the disabled flag of the button\n   */\n  get disabled() {\n    return this.nativeElement.disabled;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TestElement.html":{"url":"classes/TestElement.html","title":"class - TestElement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TestElement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/test-element.ts\n        \n\n            \n                Description\n            \n            \n                A wrapped DOM element, providing additional methods and attributes helping with writing tests\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                attr\n                            \n                            \n                                button\n                            \n                            \n                                dispatchEvent\n                            \n                            \n                                dispatchEventOfType\n                            \n                            \n                                element\n                            \n                            \n                                elements\n                            \n                            \n                                input\n                            \n                            \n                                select\n                            \n                            \n                                textarea\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    nativeElement\n                                \n                                \n                                    textContent\n                                \n                                \n                                    classes\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tester: ComponentTester, debugElement: DebugElement)\n                    \n                \n                        \n                            \n                                Defined in src/lib/test-element.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tester\n                                                  \n                                                        \n                                                                    ComponentTester\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        debugElement\n                                                  \n                                                        \n                                                                    DebugElement\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            attr\n                            \n                            \n                        \n                    \n                \n                \n                    \nattr(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-element.ts:64\n                            \n                        \n\n\n                \n                    \n                            Gets the attribute of the wrapped element with the given name\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                the name of the attribute to get\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            button\n                            \n                            \n                        \n                    \n                \n                \n                    \nbutton(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-element.ts:125\n                            \n                        \n\n\n                \n                    \n                            Gets the first button matched by the given selector. Throws an Error if the matched element isn't actually a button.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestButton | null\n\n                            \n                                \n                                    the wrapped button, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dispatchEvent\n                            \n                            \n                        \n                    \n                \n                \n                    \ndispatchEvent(event: Event)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-element.ts:48\n                            \n                        \n\n\n                \n                    \n                            dispatches the given event from the wrapped element, then triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        event\n                                                        \n                                                                    Event\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dispatchEventOfType\n                            \n                            \n                        \n                    \n                \n                \n                    \ndispatchEventOfType(type: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-element.ts:40\n                            \n                        \n\n\n                \n                    \n                            dispatches an event of the given type from the wrapped element, then triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        type\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            element\n                            \n                            \n                        \n                    \n                \n                \n                    \nelement(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-element.ts:76\n                            \n                        \n\n\n                \n                    \n                            Gets the first element matching the given CSS selector and wraps it into a TestElement. The actual type\nof the returned value is the TestElement subclass matching the type of the found element. So, if the\nmatched element is an input for example, the method will return a TestInput. You can thus use\ntester.element('#some-input') as TestInput.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestElement | null\n\n                            \n                                \n                                    the wrapped element, or null if no element matches the selector.\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            elements\n                            \n                            \n                        \n                    \n                \n                \n                    \nelements(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-element.ts:88\n                            \n                        \n\n\n                \n                    \n                            Gets all the elements matching the given CSS selector and wraps them into a TestElement. The actual type\nof the returned elements is the TestElement subclass matching the type of the found element. So, if the\nmatched elements are inputs for example, the method will return an array of TestInput. You can thus use\ntester.elements('input') as Array.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Array>\n\n                            \n                                \n                                    the array of matched elements, empty if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            input\n                            \n                            \n                        \n                    \n                \n                \n                    \ninput(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-element.ts:97\n                            \n                        \n\n\n                \n                    \n                            Gets the first input matched by the given selector. Throws an Error if the matched element isn't actually an input.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestInput | null\n\n                            \n                                \n                                    the wrapped input, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            select\n                            \n                            \n                        \n                    \n                \n                \n                    \nselect(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-element.ts:106\n                            \n                        \n\n\n                \n                    \n                            Gets the first select matched by the given selector. Throws an Error if the matched element isn't actually a select.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestSelect | null\n\n                            \n                                \n                                    the wrapped select, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            textarea\n                            \n                            \n                        \n                    \n                \n                \n                    \ntextarea(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-element.ts:116\n                            \n                        \n\n\n                \n                    \n                            Gets the first textarea matched by the given selector\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestTextArea | null\n\n                            \n                                \n                                    the wrapped textarea, or null if no element was matched. Throws an Error if the matched element isn't actually a textarea.\n\n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        nativeElement\n                    \n                \n\n                \n                    \n                        getnativeElement()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-element.ts:26\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        textContent\n                    \n                \n\n                \n                    \n                        gettextContent()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-element.ts:33\n                                \n                            \n                    \n                        \n                                the text content of this element\n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        classes\n                    \n                \n\n                \n                    \n                        getclasses()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-element.ts:56\n                                \n                            \n                    \n                        \n                                Gets the CSS classes of the wrapped element, as an array\n\n\n                                \n                                    Returns :     Array\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { ComponentTester } from './component-tester';\nimport { TestButton } from './test-button';\nimport { TestSelect } from './test-select';\nimport { TestTextArea } from './test-textarea';\nimport { TestInput } from './test-input';\nimport { TestElementQuerier } from './test-element-querier';\nimport { DebugElement } from '@angular/core';\n\n/**\n * A wrapped DOM element, providing additional methods and attributes helping with writing tests\n */\nexport class TestElement {\n\n  private querier: TestElementQuerier;\n\n  constructor(\n    protected tester: ComponentTester,\n    /**\n     * the wrapped debug element\n     */\n    readonly debugElement: DebugElement\n  ) {\n    this.querier = new TestElementQuerier(tester, debugElement);\n  }\n\n  get nativeElement(): E {\n    return this.debugElement.nativeElement;\n  }\n\n  /**\n   * the text content of this element\n   */\n  get textContent() {\n    return this.nativeElement.textContent;\n  }\n\n  /**\n   * dispatches an event of the given type from the wrapped element, then triggers a change detection\n   */\n  dispatchEventOfType(type: string) {\n    this.nativeElement.dispatchEvent(new Event(type));\n    this.tester.detectChanges();\n  }\n\n  /**\n   * dispatches the given event from the wrapped element, then triggers a change detection\n   */\n  dispatchEvent(event: Event) {\n    this.nativeElement.dispatchEvent(event);\n    this.tester.detectChanges();\n  }\n\n  /**\n   * Gets the CSS classes of the wrapped element, as an array\n   */\n  get classes(): Array {\n    return Array.prototype.slice.call(this.nativeElement.classList);\n  }\n\n  /**\n   * Gets the attribute of the wrapped element with the given name\n   * @param name the name of the attribute to get\n   */\n  attr(name: string) {\n    return this.nativeElement.getAttribute(name);\n  }\n\n  /**\n   * Gets the first element matching the given CSS selector and wraps it into a TestElement. The actual type\n   * of the returned value is the TestElement subclass matching the type of the found element. So, if the\n   * matched element is an input for example, the method will return a TestInput. You can thus use\n   * `tester.element('#some-input') as TestInput`.\n   * @param selector a CSS selector\n   * @returns the wrapped element, or null if no element matches the selector.\n   */\n  element(selector: string): TestElement | null {\n    return this.querier.element(selector);\n  }\n\n  /**\n   * Gets all the elements matching the given CSS selector and wraps them into a TestElement. The actual type\n   * of the returned elements is the TestElement subclass matching the type of the found element. So, if the\n   * matched elements are inputs for example, the method will return an array of TestInput. You can thus use\n   * `tester.elements('input') as Array`.\n   * @param selector a CSS selector\n   * @returns the array of matched elements, empty if no element was matched\n   */\n  elements(selector: string): Array> {\n    return this.querier.elements(selector);\n  }\n\n  /**\n   * Gets the first input matched by the given selector. Throws an Error if the matched element isn't actually an input.\n   * @param selector a CSS selector\n   * @returns the wrapped input, or null if no element was matched\n   */\n  input(selector: string): TestInput | null {\n    return this.querier.input(selector);\n  }\n\n  /**\n   * Gets the first select matched by the given selector. Throws an Error if the matched element isn't actually a select.\n   * @param selector a CSS selector\n   * @returns the wrapped select, or null if no element was matched\n   */\n  select(selector: string): TestSelect | null {\n    return this.querier.select(selector);\n  }\n\n  /**\n   * Gets the first textarea matched by the given selector\n   * @param selector a CSS selector\n   * @returns the wrapped textarea, or null if no element was matched. Throws an Error if the matched element isn't actually a textarea.\n   * @throws {Error} if the matched element isn't actually a textarea\n   */\n  textarea(selector: string): TestTextArea | null {\n    return this.querier.textarea(selector);\n  }\n\n  /**\n   * Gets the first button matched by the given selector. Throws an Error if the matched element isn't actually a button.\n   * @param selector a CSS selector\n   * @returns the wrapped button, or null if no element was matched\n   */\n  button(selector: string): TestButton | null {\n    return this.querier.button(selector);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TestHtmlElement.html":{"url":"classes/TestHtmlElement.html","title":"class - TestHtmlElement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TestHtmlElement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/test-html-element.ts\n        \n\n            \n                Description\n            \n            \n                A wrapped DOM HTML element, providing additional methods and attributes helping with writing tests\n\n            \n\n            \n                Extends\n            \n            \n                    TestElement\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                            \n                                attr\n                            \n                            \n                                button\n                            \n                            \n                                dispatchEvent\n                            \n                            \n                                dispatchEventOfType\n                            \n                            \n                                element\n                            \n                            \n                                elements\n                            \n                            \n                                input\n                            \n                            \n                                select\n                            \n                            \n                                textarea\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tester: ComponentTester, debugElement: DebugElement)\n                    \n                \n                        \n                            \n                                Defined in src/lib/test-html-element.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tester\n                                                  \n                                                        \n                                                                    ComponentTester\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        debugElement\n                                                  \n                                                        \n                                                                    DebugElement\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            click\n                            \n                            \n                        \n                    \n                \n                \n                    \nclick()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-html-element.ts:16\n                            \n                        \n\n\n                \n                    \n                            Clicks on the wrapped element, then triggers a change detection\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            attr\n                            \n                            \n                        \n                    \n                \n                \n                    \nattr(name: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestElement:64\n                            \n                        \n\n\n                \n                    \n                            Gets the attribute of the wrapped element with the given name\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                the name of the attribute to get\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            button\n                            \n                            \n                        \n                    \n                \n                \n                    \nbutton(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestElement:125\n                            \n                        \n\n\n                \n                    \n                            Gets the first button matched by the given selector. Throws an Error if the matched element isn't actually a button.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestButton | null\n\n                            \n                                \n                                    the wrapped button, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dispatchEvent\n                            \n                            \n                        \n                    \n                \n                \n                    \ndispatchEvent(event: Event)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestElement:48\n                            \n                        \n\n\n                \n                    \n                            dispatches the given event from the wrapped element, then triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        event\n                                                        \n                                                                    Event\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dispatchEventOfType\n                            \n                            \n                        \n                    \n                \n                \n                    \ndispatchEventOfType(type: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestElement:40\n                            \n                        \n\n\n                \n                    \n                            dispatches an event of the given type from the wrapped element, then triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        type\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            element\n                            \n                            \n                        \n                    \n                \n                \n                    \nelement(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestElement:76\n                            \n                        \n\n\n                \n                    \n                            Gets the first element matching the given CSS selector and wraps it into a TestElement. The actual type\nof the returned value is the TestElement subclass matching the type of the found element. So, if the\nmatched element is an input for example, the method will return a TestInput. You can thus use\ntester.element('#some-input') as TestInput.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestElement | null\n\n                            \n                                \n                                    the wrapped element, or null if no element matches the selector.\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            elements\n                            \n                            \n                        \n                    \n                \n                \n                    \nelements(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestElement:88\n                            \n                        \n\n\n                \n                    \n                            Gets all the elements matching the given CSS selector and wraps them into a TestElement. The actual type\nof the returned elements is the TestElement subclass matching the type of the found element. So, if the\nmatched elements are inputs for example, the method will return an array of TestInput. You can thus use\ntester.elements('input') as Array.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Array>\n\n                            \n                                \n                                    the array of matched elements, empty if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            input\n                            \n                            \n                        \n                    \n                \n                \n                    \ninput(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestElement:97\n                            \n                        \n\n\n                \n                    \n                            Gets the first input matched by the given selector. Throws an Error if the matched element isn't actually an input.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestInput | null\n\n                            \n                                \n                                    the wrapped input, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            select\n                            \n                            \n                        \n                    \n                \n                \n                    \nselect(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestElement:106\n                            \n                        \n\n\n                \n                    \n                            Gets the first select matched by the given selector. Throws an Error if the matched element isn't actually a select.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestSelect | null\n\n                            \n                                \n                                    the wrapped select, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            textarea\n                            \n                            \n                        \n                    \n                \n                \n                    \ntextarea(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestElement:116\n                            \n                        \n\n\n                \n                    \n                            Gets the first textarea matched by the given selector\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestTextArea | null\n\n                            \n                                \n                                    the wrapped textarea, or null if no element was matched. Throws an Error if the matched element isn't actually a textarea.\n\n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { ComponentTester } from './component-tester';\nimport { TestElement } from './test-element';\nimport { DebugElement } from '@angular/core';\n\n/**\n * A wrapped DOM HTML element, providing additional methods and attributes helping with writing tests\n */\nexport class TestHtmlElement extends TestElement {\n  constructor(tester: ComponentTester, debugElement: DebugElement) {\n    super(tester, debugElement);\n  }\n\n  /**\n   * Clicks on the wrapped element, then triggers a change detection\n   */\n  click() {\n    this.nativeElement.click();\n    this.tester.detectChanges();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TestInput.html":{"url":"classes/TestInput.html","title":"class - TestInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TestInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/test-input.ts\n        \n\n            \n                Description\n            \n            \n                A wrapped DOM HTML input element, providing additional methods and attributes helping with writing tests\n\n            \n\n            \n                Extends\n            \n            \n                    TestHtmlElement\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                check\n                            \n                            \n                                fillWith\n                            \n                            \n                                uncheck\n                            \n                            \n                                click\n                            \n                            \n                                attr\n                            \n                            \n                                button\n                            \n                            \n                                dispatchEvent\n                            \n                            \n                                dispatchEventOfType\n                            \n                            \n                                element\n                            \n                            \n                                elements\n                            \n                            \n                                input\n                            \n                            \n                                select\n                            \n                            \n                                textarea\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    value\n                                \n                                \n                                    checked\n                                \n                                \n                                    disabled\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tester: ComponentTester, debugElement: DebugElement)\n                    \n                \n                        \n                            \n                                Defined in src/lib/test-input.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tester\n                                                  \n                                                        \n                                                                    ComponentTester\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        debugElement\n                                                  \n                                                        \n                                                                    DebugElement\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            check\n                            \n                            \n                        \n                    \n                \n                \n                    \ncheck()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-input.ts:46\n                            \n                        \n\n\n                \n                    \n                            Checks the wrapped input, then dispatches an event of type change and triggers a change detection\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fillWith\n                            \n                            \n                        \n                    \n                \n                \n                    \nfillWith(value: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-input.ts:17\n                            \n                        \n\n\n                \n                    \n                            Sets the value of the wrapped input, then dispatches an event of type input and triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                the new value of the input\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            uncheck\n                            \n                            \n                        \n                    \n                \n                \n                    \nuncheck()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-input.ts:54\n                            \n                        \n\n\n                \n                    \n                            Unchecks the wrapped input, then dispatches an event of type change and triggers a change detection\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            click\n                            \n                            \n                        \n                    \n                \n                \n                    \nclick()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:16\n                            \n                        \n\n\n                \n                    \n                            Clicks on the wrapped element, then triggers a change detection\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            attr\n                            \n                            \n                        \n                    \n                \n                \n                    \nattr(name: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:64\n                            \n                        \n\n\n                \n                    \n                            Gets the attribute of the wrapped element with the given name\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                the name of the attribute to get\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            button\n                            \n                            \n                        \n                    \n                \n                \n                    \nbutton(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:125\n                            \n                        \n\n\n                \n                    \n                            Gets the first button matched by the given selector. Throws an Error if the matched element isn't actually a button.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestButton | null\n\n                            \n                                \n                                    the wrapped button, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dispatchEvent\n                            \n                            \n                        \n                    \n                \n                \n                    \ndispatchEvent(event: Event)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:48\n                            \n                        \n\n\n                \n                    \n                            dispatches the given event from the wrapped element, then triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        event\n                                                        \n                                                                    Event\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dispatchEventOfType\n                            \n                            \n                        \n                    \n                \n                \n                    \ndispatchEventOfType(type: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:40\n                            \n                        \n\n\n                \n                    \n                            dispatches an event of the given type from the wrapped element, then triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        type\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            element\n                            \n                            \n                        \n                    \n                \n                \n                    \nelement(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:76\n                            \n                        \n\n\n                \n                    \n                            Gets the first element matching the given CSS selector and wraps it into a TestElement. The actual type\nof the returned value is the TestElement subclass matching the type of the found element. So, if the\nmatched element is an input for example, the method will return a TestInput. You can thus use\ntester.element('#some-input') as TestInput.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestElement | null\n\n                            \n                                \n                                    the wrapped element, or null if no element matches the selector.\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            elements\n                            \n                            \n                        \n                    \n                \n                \n                    \nelements(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:88\n                            \n                        \n\n\n                \n                    \n                            Gets all the elements matching the given CSS selector and wraps them into a TestElement. The actual type\nof the returned elements is the TestElement subclass matching the type of the found element. So, if the\nmatched elements are inputs for example, the method will return an array of TestInput. You can thus use\ntester.elements('input') as Array.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Array>\n\n                            \n                                \n                                    the array of matched elements, empty if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            input\n                            \n                            \n                        \n                    \n                \n                \n                    \ninput(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:97\n                            \n                        \n\n\n                \n                    \n                            Gets the first input matched by the given selector. Throws an Error if the matched element isn't actually an input.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestInput | null\n\n                            \n                                \n                                    the wrapped input, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            select\n                            \n                            \n                        \n                    \n                \n                \n                    \nselect(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:106\n                            \n                        \n\n\n                \n                    \n                            Gets the first select matched by the given selector. Throws an Error if the matched element isn't actually a select.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestSelect | null\n\n                            \n                                \n                                    the wrapped select, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            textarea\n                            \n                            \n                        \n                    \n                \n                \n                    \ntextarea(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:116\n                            \n                        \n\n\n                \n                    \n                            Gets the first textarea matched by the given selector\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestTextArea | null\n\n                            \n                                \n                                    the wrapped textarea, or null if no element was matched. Throws an Error if the matched element isn't actually a textarea.\n\n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        value\n                    \n                \n\n                \n                    \n                        getvalue()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-input.ts:25\n                                \n                            \n                    \n                        \n                                the value of the wrapped input\n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        checked\n                    \n                \n\n                \n                    \n                        getchecked()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-input.ts:32\n                                \n                            \n                    \n                        \n                                the checked property of the wrapped input\n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        disabled\n                    \n                \n\n                \n                    \n                        getdisabled()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-input.ts:39\n                                \n                            \n                    \n                        \n                                the disabled property of the wrapped input\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { ComponentTester } from './component-tester';\nimport { TestHtmlElement } from './test-html-element';\nimport { DebugElement } from '@angular/core';\n\n/**\n * A wrapped DOM HTML input element, providing additional methods and attributes helping with writing tests\n */\nexport class TestInput extends TestHtmlElement {\n  constructor(tester: ComponentTester, debugElement: DebugElement) {\n    super(tester, debugElement);\n  }\n\n  /**\n   * Sets the value of the wrapped input, then dispatches an event of type input and triggers a change detection\n   * @param value the new value of the input\n   */\n  fillWith(value: string) {\n    this.nativeElement.value = value;\n    this.dispatchEventOfType('input');\n  }\n\n  /**\n   * the value of the wrapped input\n   */\n  get value() {\n    return this.nativeElement.value;\n  }\n\n  /**\n   * the checked property of the wrapped input\n   */\n  get checked() {\n    return this.nativeElement.checked;\n  }\n\n  /**\n   * the disabled property of the wrapped input\n   */\n  get disabled() {\n    return this.nativeElement.disabled;\n  }\n\n  /**\n   * Checks the wrapped input, then dispatches an event of type change and triggers a change detection\n   */\n  check() {\n    this.nativeElement.checked = true;\n    this.dispatchEventOfType('change');\n  }\n\n  /**\n   * Unchecks the wrapped input, then dispatches an event of type change and triggers a change detection\n   */\n  uncheck() {\n    this.nativeElement.checked = false;\n    this.dispatchEventOfType('change');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TestSelect.html":{"url":"classes/TestSelect.html","title":"class - TestSelect","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TestSelect\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/test-select.ts\n        \n\n            \n                Description\n            \n            \n                A wrapped DOM HTML select element, providing additional methods and attributes helping with writing tests\n\n            \n\n            \n                Extends\n            \n            \n                    TestHtmlElement\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                selectIndex\n                            \n                            \n                                selectLabel\n                            \n                            \n                                selectValue\n                            \n                            \n                                click\n                            \n                            \n                                attr\n                            \n                            \n                                button\n                            \n                            \n                                dispatchEvent\n                            \n                            \n                                dispatchEventOfType\n                            \n                            \n                                element\n                            \n                            \n                                elements\n                            \n                            \n                                input\n                            \n                            \n                                select\n                            \n                            \n                                textarea\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    selectedIndex\n                                \n                                \n                                    selectedValue\n                                \n                                \n                                    selectedLabel\n                                \n                                \n                                    optionValues\n                                \n                                \n                                    optionLabels\n                                \n                                \n                                    size\n                                \n                                \n                                    disabled\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tester: ComponentTester, debugElement: DebugElement)\n                    \n                \n                        \n                            \n                                Defined in src/lib/test-select.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tester\n                                                  \n                                                        \n                                                                    ComponentTester\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        debugElement\n                                                  \n                                                        \n                                                                    DebugElement\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectIndex\n                            \n                            \n                        \n                    \n                \n                \n                    \nselectIndex(index: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-select.ts:16\n                            \n                        \n\n\n                \n                    \n                            Selects the option at the given index, then dispatches an event of type change and triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        index\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectLabel\n                            \n                            \n                        \n                    \n                \n                \n                    \nselectLabel(label: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-select.ts:38\n                            \n                        \n\n\n                \n                    \n                            Selects the first option with the given label (or text), then dispatches an event of type change and triggers a change detection.\nIf there is no option with the given label, then does nothing\nTODO should it throw instead?\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        label\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectValue\n                            \n                            \n                        \n                    \n                \n                \n                    \nselectValue(value: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-select.ts:26\n                            \n                        \n\n\n                \n                    \n                            Selects the first option with the given value, then dispatches an event of type change and triggers a change detection.\nIf there is no option with the given value, then does nothing\nTODO should it throw instead?\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            click\n                            \n                            \n                        \n                    \n                \n                \n                    \nclick()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:16\n                            \n                        \n\n\n                \n                    \n                            Clicks on the wrapped element, then triggers a change detection\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            attr\n                            \n                            \n                        \n                    \n                \n                \n                    \nattr(name: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:64\n                            \n                        \n\n\n                \n                    \n                            Gets the attribute of the wrapped element with the given name\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                the name of the attribute to get\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            button\n                            \n                            \n                        \n                    \n                \n                \n                    \nbutton(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:125\n                            \n                        \n\n\n                \n                    \n                            Gets the first button matched by the given selector. Throws an Error if the matched element isn't actually a button.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestButton | null\n\n                            \n                                \n                                    the wrapped button, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dispatchEvent\n                            \n                            \n                        \n                    \n                \n                \n                    \ndispatchEvent(event: Event)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:48\n                            \n                        \n\n\n                \n                    \n                            dispatches the given event from the wrapped element, then triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        event\n                                                        \n                                                                    Event\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dispatchEventOfType\n                            \n                            \n                        \n                    \n                \n                \n                    \ndispatchEventOfType(type: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:40\n                            \n                        \n\n\n                \n                    \n                            dispatches an event of the given type from the wrapped element, then triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        type\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            element\n                            \n                            \n                        \n                    \n                \n                \n                    \nelement(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:76\n                            \n                        \n\n\n                \n                    \n                            Gets the first element matching the given CSS selector and wraps it into a TestElement. The actual type\nof the returned value is the TestElement subclass matching the type of the found element. So, if the\nmatched element is an input for example, the method will return a TestInput. You can thus use\ntester.element('#some-input') as TestInput.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestElement | null\n\n                            \n                                \n                                    the wrapped element, or null if no element matches the selector.\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            elements\n                            \n                            \n                        \n                    \n                \n                \n                    \nelements(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:88\n                            \n                        \n\n\n                \n                    \n                            Gets all the elements matching the given CSS selector and wraps them into a TestElement. The actual type\nof the returned elements is the TestElement subclass matching the type of the found element. So, if the\nmatched elements are inputs for example, the method will return an array of TestInput. You can thus use\ntester.elements('input') as Array.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Array>\n\n                            \n                                \n                                    the array of matched elements, empty if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            input\n                            \n                            \n                        \n                    \n                \n                \n                    \ninput(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:97\n                            \n                        \n\n\n                \n                    \n                            Gets the first input matched by the given selector. Throws an Error if the matched element isn't actually an input.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestInput | null\n\n                            \n                                \n                                    the wrapped input, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            select\n                            \n                            \n                        \n                    \n                \n                \n                    \nselect(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:106\n                            \n                        \n\n\n                \n                    \n                            Gets the first select matched by the given selector. Throws an Error if the matched element isn't actually a select.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestSelect | null\n\n                            \n                                \n                                    the wrapped select, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            textarea\n                            \n                            \n                        \n                    \n                \n                \n                    \ntextarea(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:116\n                            \n                        \n\n\n                \n                    \n                            Gets the first textarea matched by the given selector\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestTextArea | null\n\n                            \n                                \n                                    the wrapped textarea, or null if no element was matched. Throws an Error if the matched element isn't actually a textarea.\n\n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        selectedIndex\n                    \n                \n\n                \n                    \n                        getselectedIndex()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-select.ts:48\n                                \n                            \n                    \n                        \n                                the selected index of the wrapped select\n\n\n                                \n                                    Returns :     number\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        selectedValue\n                    \n                \n\n                \n                    \n                        getselectedValue()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-select.ts:55\n                                \n                            \n                    \n                        \n                                the value of the selected option of the wrapped select, or null if there is no selected option\n\n\n                                \n                                    Returns :     string | null\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        selectedLabel\n                    \n                \n\n                \n                    \n                        getselectedLabel()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-select.ts:65\n                                \n                            \n                    \n                        \n                                the label (or text if no label) of the selected option of the wrapped select, or null if there is no selected option\n\n\n                                \n                                    Returns :     string | null\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        optionValues\n                    \n                \n\n                \n                    \n                        getoptionValues()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-select.ts:75\n                                \n                            \n                    \n                        \n                                the values of the options, as an array\n\n\n                                \n                                    Returns :     Array\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        optionLabels\n                    \n                \n\n                \n                    \n                        getoptionLabels()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-select.ts:82\n                                \n                            \n                    \n                        \n                                the labels (or texts if no label) of the options, as an array\n\n\n                                \n                                    Returns :     Array\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        size\n                    \n                \n\n                \n                    \n                        getsize()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-select.ts:89\n                                \n                            \n                    \n                        \n                                the number of options in the select\n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        disabled\n                    \n                \n\n                \n                    \n                        getdisabled()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-select.ts:96\n                                \n                            \n                    \n                        \n                                the disabled property of the wrapped select\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { ComponentTester } from './component-tester';\nimport { TestHtmlElement } from './test-html-element';\nimport { DebugElement } from '@angular/core';\n\n/**\n * A wrapped DOM HTML select element, providing additional methods and attributes helping with writing tests\n */\nexport class TestSelect extends TestHtmlElement {\n  constructor(tester: ComponentTester, debugElement: DebugElement) {\n    super(tester, debugElement);\n  }\n\n  /**\n   * Selects the option at the given index, then dispatches an event of type change and triggers a change detection\n   */\n  selectIndex(index: number) {\n    this.nativeElement.selectedIndex = index;\n    this.dispatchEventOfType('change');\n  }\n\n  /**\n   * Selects the first option with the given value, then dispatches an event of type change and triggers a change detection.\n   * If there is no option with the given value, then does nothing\n   * TODO should it throw instead?\n   */\n  selectValue(value: string) {\n    const index = this.optionValues.indexOf(value);\n    if (index >= 0) {\n      this.selectIndex(index);\n    }\n  }\n\n  /**\n   * Selects the first option with the given label (or text), then dispatches an event of type change and triggers a change detection.\n   * If there is no option with the given label, then does nothing\n   * TODO should it throw instead?\n   */\n  selectLabel(label: string) {\n    const index = this.optionLabels.indexOf(label);\n    if (index >= 0) {\n      this.selectIndex(index);\n    }\n  }\n\n  /**\n   * the selected index of the wrapped select\n   */\n  get selectedIndex(): number {\n    return this.nativeElement.selectedIndex;\n  }\n\n  /**\n   * the value of the selected option of the wrapped select, or null if there is no selected option\n   */\n  get selectedValue(): string | null {\n    if (this.selectedIndex  {\n    return (Array.prototype.slice.call(this.nativeElement.options) as Array).map(option => option.value);\n  }\n\n  /**\n   * the labels (or texts if no label) of the options, as an array\n   */\n  get optionLabels(): Array {\n    return (Array.prototype.slice.call(this.nativeElement.options) as Array).map(option => option.label);\n  }\n\n  /**\n   * the number of options in the select\n   */\n  get size() {\n    return this.nativeElement.options.length;\n  }\n\n  /**\n   * the disabled property of the wrapped select\n   */\n  get disabled() {\n    return this.nativeElement.disabled;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TestTextArea.html":{"url":"classes/TestTextArea.html","title":"class - TestTextArea","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TestTextArea\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/test-textarea.ts\n        \n\n            \n                Description\n            \n            \n                A wrapped DOM HTML textarea element, providing additional methods and attributes helping with writing tests\n\n            \n\n            \n                Extends\n            \n            \n                    TestHtmlElement\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                fillWith\n                            \n                            \n                                click\n                            \n                            \n                                attr\n                            \n                            \n                                button\n                            \n                            \n                                dispatchEvent\n                            \n                            \n                                dispatchEventOfType\n                            \n                            \n                                element\n                            \n                            \n                                elements\n                            \n                            \n                                input\n                            \n                            \n                                select\n                            \n                            \n                                textarea\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    value\n                                \n                                \n                                    disabled\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tester: ComponentTester, debugElement: DebugElement)\n                    \n                \n                        \n                            \n                                Defined in src/lib/test-textarea.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tester\n                                                  \n                                                        \n                                                                    ComponentTester\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        debugElement\n                                                  \n                                                        \n                                                                    DebugElement\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fillWith\n                            \n                            \n                        \n                    \n                \n                \n                    \nfillWith(value: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-textarea.ts:17\n                            \n                        \n\n\n                \n                    \n                            Sets the value of the wrapped textarea, then dispatches an event of type input and triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                the new value of the textarea\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            click\n                            \n                            \n                        \n                    \n                \n                \n                    \nclick()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:16\n                            \n                        \n\n\n                \n                    \n                            Clicks on the wrapped element, then triggers a change detection\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            attr\n                            \n                            \n                        \n                    \n                \n                \n                    \nattr(name: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:64\n                            \n                        \n\n\n                \n                    \n                            Gets the attribute of the wrapped element with the given name\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                the name of the attribute to get\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            button\n                            \n                            \n                        \n                    \n                \n                \n                    \nbutton(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:125\n                            \n                        \n\n\n                \n                    \n                            Gets the first button matched by the given selector. Throws an Error if the matched element isn't actually a button.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestButton | null\n\n                            \n                                \n                                    the wrapped button, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dispatchEvent\n                            \n                            \n                        \n                    \n                \n                \n                    \ndispatchEvent(event: Event)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:48\n                            \n                        \n\n\n                \n                    \n                            dispatches the given event from the wrapped element, then triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        event\n                                                        \n                                                                    Event\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dispatchEventOfType\n                            \n                            \n                        \n                    \n                \n                \n                    \ndispatchEventOfType(type: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:40\n                            \n                        \n\n\n                \n                    \n                            dispatches an event of the given type from the wrapped element, then triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        type\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            element\n                            \n                            \n                        \n                    \n                \n                \n                    \nelement(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:76\n                            \n                        \n\n\n                \n                    \n                            Gets the first element matching the given CSS selector and wraps it into a TestElement. The actual type\nof the returned value is the TestElement subclass matching the type of the found element. So, if the\nmatched element is an input for example, the method will return a TestInput. You can thus use\ntester.element('#some-input') as TestInput.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestElement | null\n\n                            \n                                \n                                    the wrapped element, or null if no element matches the selector.\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            elements\n                            \n                            \n                        \n                    \n                \n                \n                    \nelements(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:88\n                            \n                        \n\n\n                \n                    \n                            Gets all the elements matching the given CSS selector and wraps them into a TestElement. The actual type\nof the returned elements is the TestElement subclass matching the type of the found element. So, if the\nmatched elements are inputs for example, the method will return an array of TestInput. You can thus use\ntester.elements('input') as Array.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Array>\n\n                            \n                                \n                                    the array of matched elements, empty if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            input\n                            \n                            \n                        \n                    \n                \n                \n                    \ninput(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:97\n                            \n                        \n\n\n                \n                    \n                            Gets the first input matched by the given selector. Throws an Error if the matched element isn't actually an input.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestInput | null\n\n                            \n                                \n                                    the wrapped input, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            select\n                            \n                            \n                        \n                    \n                \n                \n                    \nselect(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:106\n                            \n                        \n\n\n                \n                    \n                            Gets the first select matched by the given selector. Throws an Error if the matched element isn't actually a select.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestSelect | null\n\n                            \n                                \n                                    the wrapped select, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            textarea\n                            \n                            \n                        \n                    \n                \n                \n                    \ntextarea(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:116\n                            \n                        \n\n\n                \n                    \n                            Gets the first textarea matched by the given selector\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestTextArea | null\n\n                            \n                                \n                                    the wrapped textarea, or null if no element was matched. Throws an Error if the matched element isn't actually a textarea.\n\n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        value\n                    \n                \n\n                \n                    \n                        getvalue()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-textarea.ts:25\n                                \n                            \n                    \n                        \n                                the value of the wrapped textarea\n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        disabled\n                    \n                \n\n                \n                    \n                        getdisabled()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-textarea.ts:32\n                                \n                            \n                    \n                        \n                                the disabled property of the wrapped textarea\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { ComponentTester } from './component-tester';\nimport { TestHtmlElement } from './test-html-element';\nimport { DebugElement } from '@angular/core';\n\n/**\n * A wrapped DOM HTML textarea element, providing additional methods and attributes helping with writing tests\n */\nexport class TestTextArea extends TestHtmlElement {\n  constructor(tester: ComponentTester, debugElement: DebugElement) {\n    super(tester, debugElement);\n  }\n\n  /**\n   * Sets the value of the wrapped textarea, then dispatches an event of type input and triggers a change detection\n   * @param value the new value of the textarea\n   */\n  fillWith(value: string) {\n    this.nativeElement.value = value;\n    this.dispatchEventOfType('input');\n  }\n\n  /**\n   * the value of the wrapped textarea\n   */\n  get value() {\n    return this.nativeElement.value;\n  }\n\n  /**\n   * the disabled property of the wrapped textarea\n   */\n  get disabled() {\n    return this.nativeElement.disabled;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n2.0.0 (2019-05-31)\nBug Fixes\n\nadd @angular/platform-browser as a peer dep (e354723)\nadd ngx-speculoos as an implicit dependency (df43796)\ncodelyzer rule name (3b7ff6c)\ncombine imports (17ac60f)\ndo not lint public_api.ts (6179153)\njsdoc formatting (3c95bc6)\nreadonly is already public (3a159e3)\nupdate polyfill.ts with latest (27b885a)\n\nchore\n\nupgrade to Angular 8.0.0 (f46816e)\n\nBREAKING CHANGES\n\nngx-speculoos is now built against Angular 8.0.0. If you want to use it with Angular 7.x, stick to the previous version of ngx-speculoos.\n\n\n1.1.0 (2018-11-17)\nFeatures\n\nadd disabled property on TestInput, TestTextarea and TestSelect (b2e77d6), closes #100\n\n\n1.0.0 (2018-11-02)\nThis 1.0.0 version is based and tested on Angular 7.0.0, although it should run fine with Angular 6.\nFuture versions are not guaranteed to support Angular 6, though. We encourage you to ugrade.\nBug Fixes\n\ndocs: typo in readme (2e6bce7), closes #42\n\n\n0.2.3 (2018-06-17)\n\n0.2.2 (2018-06-04)\n\n0.2.1 (2018-06-04)\n\n0.2.0 (2018-05-28)\nBug Fixes\n\ncustom matchers always return false if no element (a282826)\nfix toHaveText on empty text contents (0172de3)\n\nFeatures\n\nadd custom matcher for class (39d1f3a)\nadd custom matcher for value (eee2e97)\ncustom matcher toBeChecked (065ab58)\ncustom matcher toContainText (#13) (e0a0472)\ncustom matcher toHaveSelectedIndex (e1163fb)\ncustom matcher toHaveSelectedLabel (2c49330)\ncustom matcher toHaveSelectedValue (085fd65)\ncustom matcher toHaveText (8036c22)\n\n\n0.1.0 (2018-05-25)\nVery first release :champagne:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Peer dependencies\n    \n    \n        \n            @angular/core : ^8.0.0\n        \n            @angular/platform-browser : ^8.0.0\n        \n            @angular/router : ^8.0.0\n        \n            rxjs : ^6.5.2\n    \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            fakeRoute   (src/.../route.ts)\n                        \n                        \n                            fakeSnapshot   (src/.../route.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/route.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            fakeRoute\n                            \n                            \n                        \n                    \n                \n                \n                    \nfakeRoute(options)\n                    \n                \n\n\n\n\n                \n                    \n                            Creates a fake partial ActivatedRoute for tests.\nIf you pass params, then the created route's paramMap will contain the same values.\nThe same goes for queryParams and queryParamMap.\nIf you pass a parent route and a snapshot, and the passed snapshot doesn't have a parent, then the snapshot's\nparent will be set to the parent route snapshot. This allows the code under test to use\nroute.parent.snapshot or route.snapshot.parent.\nIf you pass a snapshot with a parent, but don't pass a parent or pass a parent without snapshot, then the route's\nparent snapshot will be set to the given snapshot's parent. This allows the code under test to use\nroute.parent.snapshot or route.snapshot.parent.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     ActivatedRoute\n\n                            \n                                \n                                    a partially populated, fake ActivatedRoute, depending on what you passed in\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fakeSnapshot\n                            \n                            \n                        \n                    \n                \n                \n                    \nfakeSnapshot(options)\n                    \n                \n\n\n\n\n                \n                    \n                            Creates a fake partial ActivatedRouteSnapshot for tests.\nIf you pass params, then the created snapshot's paramMap will contain the same values.\nThe same goes for queryParams and queryParamMap.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     ActivatedRouteSnapshot\n\n                            \n                                \n                                    a partially populated, fake ActivatedRoute, depending on what you passed in\n\n                                \n                    \n                \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\nngx-speculoos\nngx-speculoos helps you write simpler, cleaner unit tests for your Angular components, based on the\npage object pattern. It also provides utilities to make writing Angular unit tests easier.\nThe library simply wraps the standard Angular ComponentFixture, and you should thus be \nable to understand and start using ngx-speculoos in just a few minutes if you already know\nhow to write Angular unit tests.\nWhy should you care?\nIf you've ever written tests like the following:\nit('should display French cities when selecting the country France', () => {\n  const countrySelect = fixture.nativeElement.querySelector('#country'); // countrySelect is of type any\n  countrySelect.selectedIndex = 12; // what is at index 12?\n  countrySelect.dispatchEvent(new Event('change')); // why do I need to do that?\n  fixture.detectChanges();\n\n  const city = fixture.nativeElement.querySelector('#city'); // city is of type any\n  expect(city).toBeTruthy();\n  expect(city.options.length).toBe(3);\n  expect(city.options[0].value).toBe('');\n  expect(city.options[0].label).toBe('');\n  expect(city.options[1].value).toBe('PARIS');\n  expect(city.options[1].label).toBe('Paris');\n  expect(city.options[2].value).toBe('LYON');\n  expect(city.options[2].label).toBe('Lyon');\n});\n\nit('should hide cities when selecting the empty country option', () => {\n  const countrySelect = fixture.nativeElement.querySelector('#country'); // I did that previously. What about DRY?\n  countrySelect.selectedIndex = 0;\n  countrySelect.dispatchEvent(new Event('change')); // why do I need to do that?\n  fixture.detectChanges(); // why do I need to do that?\n\n  expect(fixture.nativeElement.querySelector('#city')).toBeFalsy(); // I did that previously. What about DRY?\n});ngx-speculoos allows writing the above tests in a simpler, cleaner way:\n\nby using the page object pattern (which is optional, but recommended), you avoid repetitions. \nby using wrappers around elements, dispatching events and triggering change detection is automatic.\nby using wrappers around elements, you get useful additional methods to make tests easier to write and read.\nby using custom matchers, you get even simpler expectations and more readable error messages\nin any case you need them, you always have access to the fixture, the native elements, the debug elements, etc.\n\nclass MyComponentTester extends ComponentTester {\n  constructor() {\n    super(MyComponent);\n  }\n\n  get country() {\n    return this.select('#country'); // returns a TestSelect object, not any. Similar methods exist for inputs, buttons, etc.\n  }\n\n  get city() {\n    return this.select('#city'); // returns a TestSelect object, not any\n  }\n}\n\n[...]\n\nit('should display French cities when selecting the country France', () => {\n  tester.country.selectLabel('France'); // no dispatchEvent, no detectChanges needed\n\n  expect(tester.city.optionValues).toEqual(['', 'PARIS', 'LYON']);\n  expect(tester.city.optionLabels).toEqual(['', 'Paris', 'Lyon']);\n});\n\nit('should hide cities when selecting empty country option', () => {\n  tester.country.selectIndex(0); // no repetition of the selector, no dispatchEvent, no detectChanges needed\n\n  expect(tester.city).toBeFalsy(); // no repetition of the selector\n});Custom matchers\nIf you use Jasmine, we also have custom matchers for frequent expectations:\n  beforeEach(() => jasmine.addMatchers(speculoosMatchers));\n\n  it('should contain a pre-populated form', () => {\n    expect(tester.informationMessage).toContainText('Please check that everything is correct');\n    expect(tester.country).toHaveSelectedValue('FR');\n    expect(tester.city).toHaveSelectedLabel('Paris');\n    expect(tester.name).toHaveValue('Doe');\n    expect(tester.newsletter).toBeChecked();\n  });The complete matcher list includes:\n\ntoHaveClass(className: string)\ntoHaveValue(value: string)\ntoHaveText(textContent: string)\ntoContainText(textContent: string)\ntoBeChecked()\ntoHaveSelectedIndex(index: number)\ntoHaveSelectedValue(value: string)\ntoHaveSelectedLabel(label: string)\n\nInstallation\nUsing npm: npm install --save-dev ngx-speculoos\nUsing yarn: yarn add --dev ngx-speculoos\nGetting started\n\nimport ComponentTester, and other needed classes from ngx-speculoos\nCreate a MyComponentTester class (in your my-component.spec.ts file, typically) extending \nComponentTester, as shown above.\nExpose getters (or methods, if you prefer) returning the elements used in your tests, using\none of the ComponentTester methods (element, elements, input, select, textarea, button).\nSee the API documentation for details\nWrite your tests, as shown above, benefitting from the additional methods on the TestXxx classes.\nIf needed, you can always get the fixture, componentInstance, debugElement, nativeElement, etc.\nfrom the ComponentTester, and the nativeElement from each TestXxx wrapper.\nIf you like our custom matchers, add them in a beforeEach block as shown above, and enjoy.\n\nIssues, questions\nPlease, provide feedback by filing issues, or by submitting pull requests, to the Github Project.\nComplete example\nYou can look at a minimal complete example in the demo project.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2018 Ninja Squad\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            speculoosMatchers   (src/.../matchers.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/matchers.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            speculoosMatchers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     jasmine.CustomMatcherFactories\n\n                        \n                    \n                    \n                        \n                            Default value : {\n\n  /**\n   * Checks that the receiver is a TestElement wrapping a DOM element and as the given CSS class\n   */\n  toHaveClass: (util: jasmine.MatchersUtil, customEqualityTesters: Array): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: any, expected: string) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check class '${expected}' on element, but element was falsy` };\n      }\n      if (!(el instanceof TestElement)) {\n        return { pass: false, message: `Expected to check class '${expected}' on element, but element was not a TestElement` };\n      }\n      const actual = el.classes;\n      const pass = actual.indexOf(expected) !== -1;\n      const message = `Expected element to ${isNegative ? 'not ' : ''}have class '${expected}', `\n      + `but had ${actual.length ? '\\'' + actual.join(', ') + '\\'' : 'none'}`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(false, el, expected);\n      },\n      negativeCompare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(true, el, expected);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestInput or a TestTextArea and has the given value\n   */\n  toHaveValue: (util: jasmine.MatchersUtil, customEqualityTesters: Array): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: any, expected: string) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check value '${expected}' on element, but element was falsy` };\n      }\n      if (!(el instanceof TestInput) && !(el instanceof TestTextArea)) {\n        return {\n          pass: false,\n          message: `Expected to check value '${expected}' on element, but element was neither a TestInput nor a TestTextArea`\n        };\n      }\n      const actual = el.value;\n      const pass = actual === expected;\n      const message = `Expected element to ${isNegative ? 'not ' : ''}have value '${expected}', but had value '${actual}'`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(false, el, expected);\n      },\n      negativeCompare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(true, el, expected);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestElement wrapping a DOM element and has the exact given textContent\n   */\n  toHaveText: (util: jasmine.MatchersUtil, customEqualityTesters: Array): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: any, expected: string) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check text '${expected}' on element, but element was falsy` };\n      }\n      if (!(el instanceof TestElement)) {\n        return { pass: false, message: `Expected to check text '${expected}' on element, but element was not a TestElement` };\n      }\n      const actual = el.textContent;\n      const pass = actual === expected;\n      const message = `Expected element to ${isNegative ? 'not ' : ''}have text '${expected}', but had '${actual}'`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(false, el, expected);\n      },\n      negativeCompare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(true, el, expected);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestElement wrapping a DOM element and contains the given textContent\n   */\n  toContainText: (util: jasmine.MatchersUtil, customEqualityTesters: Array): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: any, expected: string) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check text '${expected}' on element, but element was falsy` };\n      }\n      if (!(el instanceof TestElement)) {\n        return { pass: false, message: `Expected to check text '${expected}' on element, but element was not a TestElement` };\n      }\n      const actual = el.textContent;\n      if (!actual) {\n        return {\n          pass: isNegative,\n          message: `Expected element to ${isNegative ? 'not ' : ''}contain text '${expected}', but had no text`\n        };\n      }\n      const pass = actual.indexOf(expected) !== -1;\n      const message = `Expected element to ${isNegative ? 'not ' : ''}contain text '${expected}', but had text '${actual}'`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(false, el, expected);\n      },\n      negativeCompare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(true, el, expected);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestElement wrapping a DOM element and contains the given textContent\n   */\n  toBeChecked: (util: jasmine.MatchersUtil, customEqualityTesters: Array): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: any) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check if element was checked, but element was falsy` };\n      }\n      if (!(el instanceof TestInput)) {\n        return { pass: false, message: `Expected to check if element was checked, but element was not a TestInput` };\n      }\n      const pass = el.checked;\n      const message = `Expected element to be ${isNegative ? 'not ' : ''}checked, but was${!isNegative ? ' not' : ''}`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: any): jasmine.CustomMatcherResult => {\n        return assert(false, el);\n      },\n      negativeCompare: (el: any): jasmine.CustomMatcherResult => {\n        return assert(true, el);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestSelect wrapping a DOM element and has the given selected index\n   */\n  toHaveSelectedIndex: (util: jasmine.MatchersUtil, customEqualityTesters: Array): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: any, expected: number) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check selected index ${expected} on element, but element was falsy` };\n      }\n      if (!(el instanceof TestSelect)) {\n        return { pass: false, message: `Expected to check selected index ${expected} on element, but element was not a TestSelect` };\n      }\n      const actual = el.selectedIndex;\n      const pass = actual === expected;\n      const message = `Expected element to ${isNegative ? 'not ' : ''}have selected index ${expected}, but had ${actual}`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: any, expected: number): jasmine.CustomMatcherResult => {\n        return assert(false, el, expected);\n      },\n      negativeCompare: (el: any, expected: number): jasmine.CustomMatcherResult => {\n        return assert(true, el, expected);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestSelect wrapping a DOM element with the selected option's value equal to the given value\n   */\n  toHaveSelectedValue: (util: jasmine.MatchersUtil, customEqualityTesters: Array): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: any, expected: string) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check selected value '${expected}' on element, but element was falsy` };\n      }\n      if (!(el instanceof TestSelect)) {\n        return { pass: false, message: `Expected to check selected value '${expected}' on element, but element was not a TestSelect` };\n      }\n      const actual = el.selectedValue;\n      const pass = actual  === expected;\n      const message = `Expected element to ${isNegative ? 'not ' : ''}have selected value '${expected}', but had '${actual}'`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(false, el, expected);\n      },\n      negativeCompare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(true, el, expected);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestSelect wrapping a DOM element with the selected option's label equal to the given label\n   */\n  toHaveSelectedLabel: (util: jasmine.MatchersUtil, customEqualityTesters: Array): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: any, expected: string) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check selected label '${expected}' on element, but element was falsy` };\n      }\n      if (!(el instanceof TestSelect)) {\n        return { pass: false, message: `Expected to check selected label '${expected}' on element, but element was not a TestSelect` };\n      }\n      const actual = el.selectedLabel;\n      const pass = actual  === expected;\n      const message = `Expected element to ${isNegative ? 'not ' : ''}have selected label '${expected}', but had '${actual}'`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(false, el, expected);\n      },\n      negativeCompare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(true, el, expected);\n      }\n    };\n  }\n}\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
