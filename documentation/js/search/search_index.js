var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/interfaces/Matchers.html",[0,1.169,1,0.889]],["body/interfaces/Matchers.html",[0,0.954,1,1.027,2,1.724,3,1.724,4,1.724,5,0.954,6,3.604,7,1.724,8,0.97,9,1.783,10,1.296,11,1.35,12,1.783,13,1.35,14,1.35,15,1.35,16,1.35,17,1.783,18,3.544,19,1.724,20,2.801,21,2.801,22,1.704,23,1.783,24,1.961,25,0.109,26,2.801,27,1.783,28,2.141,29,1.724,30,1.867,31,2.727,32,2.727,33,1.571,34,1.783,35,2.097,36,2.466,37,2.535,38,1.92,39,1.46,40,1.92,41,1.783,42,1.724,43,1.783,44,1.027,45,1.724,46,1.783,47,1.567,48,1.724,49,1.42,50,2.466,51,1.783,52,1.724,53,2.25,54,2.375,55,2.25,56,1.783,57,1.724,58,1.961,59,1.783,60,1.724,61,1.783,62,1.783,63,1.724,64,1.35,65,1.724,66,1.724,67,0.954,68,0.047,69,0.066,70,0.047]],["title/changelog.html",[71,0.76,72,0.76,73,1.319]],["body/changelog.html",[1,1.032,5,0.96,10,0.73,11,0.96,13,0.96,14,0.96,15,0.96,16,1.357,22,0.96,25,0.103,30,0.96,33,0.73,38,0.96,39,0.73,44,0.73,49,0.73,58,0.96,64,0.96,67,0.96,68,0.047,69,0.066,70,0.047,73,1.268,74,1.736,75,3.089,76,1.268,77,1.736,78,1.268,79,1.268,80,3.258,81,1.736,82,1.736,83,1.736,84,2.452,85,3.089,86,1.736,87,3.089,88,1.736,89,1.736,90,1.736,91,1.736,92,3.089,93,1.736,94,1.736,95,1.736,96,1.736,97,1.736,98,1.268,99,1.803,100,1.736,101,3.258,102,2.452,103,2.452,104,1.736,105,1.736,106,1.736,107,1.736,108,2.843,109,1.736,110,1.736,111,1.736,112,1.736,113,2.843,114,2.54,115,2.54,116,2.843,117,2.843,118,2.704,119,1.268,120,2.843,121,1.196,122,1.736,123,2.843,124,2.843,125,1.736,126,2.452,127,1.736,128,2.452,129,1.736,130,2.452,131,1.736,132,1.268,133,2.471,134,1.736,135,3.089,136,3.089,137,2.843,138,1.736,139,1.736,140,1.736,141,3.089,142,1.736,143,1.736,144,1.736,145,1.736,146,1.736,147,1.268,148,1.268,149,1.736,150,2.452,151,1.736,152,1.736,153,1.736,154,1.736,155,1.736,156,1.736,157,1.736,158,2.452,159,1.268,160,1.736,161,1.268,162,1.736,163,2.843,164,1.736,165,1.268,166,1.268,167,1.268,168,1.736,169,1.736,170,1.736,171,1.736,172,1.736,173,1.736,174,1.736,175,1.736,176,1.736,177,1.736,178,1.736,179,1.736,180,1.736,181,1.736,182,1.736,183,1.736,184,1.736,185,1.736,186,1.268,187,1.736,188,1.736,189,1.736,190,1.736,191,1.736,192,1.736,193,2.452,194,1.736,195,1.736,196,1.736,197,2.54,198,2.452,199,2.452,200,1.736,201,1.736,202,1.736,203,1.736,204,2.452,205,1.268,206,1.736,207,1.736,208,1.736,209,1.736,210,1.736,211,2.452,212,1.736,213,1.736,214,1.736,215,1.736,216,1.736,217,1.736,218,1.736,219,1.736,220,1.736,221,1.736,222,1.736,223,1.736,224,2.452,225,1.736,226,1.736,227,1.736,228,2.638,229,1.268,230,0.96,231,1.268,232,1.736,233,1.736,234,1.268,235,1.268,236,1.736,237,1.736,238,2.594,239,1.736,240,1.736,241,1.736,242,1.736,243,1.736,244,1.736,245,1.736,246,1.736,247,1.736,248,1.736,249,1.736,250,1.736,251,1.736,252,1.736,253,1.736]],["title/dependencies.html",[254,1.805,255,1.841]],["body/dependencies.html",[25,0.107,68,0.082,69,0.095,70,0.082,119,2.705,161,2.206,165,2.206,166,2.206,167,2.206,255,2.56,256,3.019,257,3.019,258,3.019,259,3.019,260,3.019]],["title/miscellaneous/functions.html",[261,0.76,262,1.841]],["body/miscellaneous/functions.html",[8,0.768,24,1.703,25,0.101,35,1.349,37,2.249,38,1.703,40,1.703,68,0.066,69,0.083,70,0.066,121,1.295,147,2.249,261,1.026,262,1.781,263,3.078,264,3.078,265,3.078,266,2.438,267,2.438,268,3.078,269,3.543,270,3.078,271,3.543,272,2.249,273,2.726,274,3.078,275,3.078,276,3.078,277,3.078,278,1.703,279,3.543,280,3.078,281,3.078,282,3.078,283,3.078,284,3.868,285,3.078,286,3.731,287,3.373,288,2.438,289,3.373,290,3.078,291,2.249,292,3.078,293,3.078,294,3.078,295,3.078,296,2.438,297,1.781,298,3.078,299,3.078,300,2.249,301,3.078,302,2.438,303,3.078]],["title/index.html",[8,0.569,71,0.76,72,0.76]],["body/index.html",[1,1.233,5,0.856,8,0.487,9,2.277,10,0.651,24,1.249,25,0.109,27,1.13,28,1.8,33,0.651,39,0.95,40,0.856,41,1.13,44,0.95,46,1.13,47,0.856,49,0.95,51,1.13,56,1.13,59,1.13,62,1.13,67,0.856,68,0.042,69,0.061,70,0.042,71,0.651,72,0.651,76,1.649,78,1.13,79,1.13,98,1.649,99,1.475,114,2.516,115,2.516,118,2.141,121,0.651,132,1.13,133,1.947,148,1.13,159,1.13,186,1.13,205,1.13,228,2.141,229,1.649,230,1.249,234,1.649,238,1.13,272,2.516,278,0.856,291,1.13,300,1.13,304,1.547,305,2.93,306,2.665,307,2.257,308,2.665,309,1.547,310,2.257,311,2.93,312,2.257,313,1.547,314,1.547,315,2.257,316,2.257,317,2.257,318,1.547,319,1.547,320,1.547,321,1.547,322,1.547,323,1.547,324,1.547,325,3.511,326,1.547,327,1.547,328,1.547,329,1.547,330,1.547,331,1.547,332,1.13,333,3.115,334,2.257,335,2.257,336,2.93,337,2.93,338,3.115,339,2.257,340,2.665,341,2.257,342,2.257,343,2.257,344,2.257,345,2.257,346,2.93,347,2.257,348,2.665,349,1.547,350,1.547,351,1.547,352,1.547,353,1.547,354,1.547,355,1.547,356,1.547,357,1.547,358,2.257,359,2.257,360,2.257,361,2.257,362,1.547,363,1.547,364,2.141,365,1.547,366,1.547,367,1.547,368,1.547,369,2.257,370,2.257,371,3.253,372,1.547,373,1.547,374,1.547,375,1.547,376,1.547,377,1.547,378,1.547,379,2.257,380,1.547,381,1.547,382,2.257,383,1.547,384,1.547,385,1.547,386,1.547,387,1.547,388,1.547,389,2.257,390,1.547,391,1.547,392,2.665,393,2.257,394,1.547,395,3.115,396,1.547,397,1.547,398,1.547,399,1.547,400,1.547,401,1.547,402,1.547,403,1.547,404,1.547,405,2.257,406,2.257,407,2.93,408,1.547,409,2.257,410,2.257,411,1.547,412,1.547,413,2.257,414,2.257,415,1.547,416,1.547,417,2.257,418,1.547,419,1.547,420,1.547,421,1.547,422,1.13,423,1.547,424,1.547,425,1.547,426,1.547,427,1.547,428,1.547,429,2.665,430,1.547,431,1.547,432,1.547,433,2.257,434,1.547,435,1.547,436,2.257,437,2.257,438,1.547,439,1.649,440,1.547,441,1.547,442,1.547,443,1.547,444,2.665,445,1.547,446,1.547,447,1.547,448,1.547,449,1.547,450,1.547,451,1.547,452,1.547,453,1.547,454,1.547,455,1.547,456,1.13,457,1.547,458,1.547,459,2.257,460,1.547,461,1.547,462,2.257,463,1.547,464,1.547,465,1.547,466,2.257,467,1.547,468,1.547,469,1.547,470,1.547,471,1.547,472,1.547,473,1.547,474,1.547,475,1.547,476,1.547,477,1.547,478,1.547]],["title/license.html",[71,0.76,72,0.76,479,1.319]],["body/license.html",[25,0.086,68,0.069,69,0.086,70,0.069,121,1.338,197,1.875,297,2.523,332,1.875,364,1.875,456,1.875,479,1.875,480,2.566,481,3.453,482,2.566,483,2.566,484,2.566,485,3.178,486,2.566,487,2.566,488,2.566,489,2.566,490,2.566,491,2.566,492,3.178,493,3.902,494,2.566,495,2.566,496,2.566,497,2.566,498,3.178,499,2.566,500,2.566,501,2.566,502,2.566,503,2.566,504,2.566,505,2.566,506,2.566,507,2.566,508,3.178,509,2.566,510,2.566,511,2.566,512,2.566,513,2.566,514,3.178,515,3.178,516,2.566,517,2.566,518,2.566,519,2.566,520,2.566,521,2.566,522,2.566,523,2.566,524,2.566,525,2.566,526,2.566,527,2.566,528,2.566,529,2.566,530,2.566,531,2.566,532,2.566,533,2.566,534,2.566,535,2.566,536,2.566,537,2.566,538,2.566,539,2.566,540,2.566,541,2.566,542,2.566,543,2.566,544,2.566,545,2.566,546,2.566]],["title/modules.html",[547,2.05]],["body/modules.html",[25,0.097,68,0.085,69,0.097,70,0.085,547,2.305]],["title/overview.html",[548,2.05]],["body/overview.html",[0,1.728,25,0.097,68,0.084,69,0.097,70,0.084,439,2.282,548,2.282,549,3.123,550,2.282]],["title/miscellaneous/variables.html",[261,0.76,551,1.841]],["body/miscellaneous/variables.html",[8,0.739,10,0.359,11,0.472,12,0.623,13,0.472,14,0.472,15,0.472,16,0.472,17,0.623,20,2.051,21,2.051,22,1.298,23,1.327,25,0.112,26,2.051,28,1.899,30,1.662,31,1.96,32,1.96,33,1.625,34,1.035,35,1.553,36,1.327,39,0.359,43,0.623,44,0.89,47,1.005,49,1.226,50,2.303,53,1.035,54,1.714,55,1.035,58,1.706,61,0.623,64,1.005,68,0.023,69,0.038,70,0.023,99,2.052,230,2.14,231,2.453,235,2.129,261,0.359,273,2.825,278,0.784,422,2.453,550,1.035,551,0.623,552,1.416,553,0.853,554,0.853,555,0.853,556,0.853,557,2.807,558,2.807,559,2.807,560,2.807,561,2.807,562,2.807,563,3.63,564,3.907,565,3.591,566,3.995,567,3.733,568,2.807,569,2.913,570,3.464,571,0.853,572,1.416,573,0.853,574,0.853,575,0.853,576,2.807,577,3.357,578,2.807,579,2.807,580,2.807,581,0.853,582,1.416,583,0.853,584,0.853,585,0.853,586,0.853,587,0.853]]],"invertedIndex":[["",{"_index":25,"title":{},"body":{"interfaces/Matchers.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":362,"title":{},"body":{"index.html":{}}}],["0.1.0",{"_index":248,"title":{},"body":{"changelog.html":{}}}],["0.2.0",{"_index":226,"title":{},"body":{"changelog.html":{}}}],["0.2.1",{"_index":225,"title":{},"body":{"changelog.html":{}}}],["0.2.2",{"_index":223,"title":{},"body":{"changelog.html":{}}}],["0.2.3",{"_index":222,"title":{},"body":{"changelog.html":{}}}],["0172de3",{"_index":237,"title":{},"body":{"changelog.html":{}}}],["02",{"_index":126,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":224,"title":{},"body":{"changelog.html":{}}}],["04770c66399ad864e0881886aaf0800",{"_index":143,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":163,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":85,"title":{},"body":{"changelog.html":{}}}],["065ab58",{"_index":241,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":127,"title":{},"body":{"changelog.html":{}}}],["085fd65",{"_index":246,"title":{},"body":{"changelog.html":{}}}],["09e1172",{"_index":140,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":550,"title":{},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":204,"title":{},"body":{"changelog.html":{}}}],["1.1.0",{"_index":196,"title":{},"body":{"changelog.html":{}}}],["1.1.8",{"_index":146,"title":{},"body":{"changelog.html":{}}}],["10.0.0",{"_index":119,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["100",{"_index":203,"title":{},"body":{"changelog.html":{}}}],["11",{"_index":198,"title":{},"body":{"changelog.html":{}}}],["12",{"_index":343,"title":{},"body":{"index.html":{}}}],["13",{"_index":242,"title":{},"body":{"changelog.html":{}}}],["146",{"_index":152,"title":{},"body":{"changelog.html":{}}}],["17",{"_index":199,"title":{},"body":{"changelog.html":{}}}],["17ac60f",{"_index":178,"title":{},"body":{"changelog.html":{}}}],["1c0395b",{"_index":160,"title":{},"body":{"changelog.html":{}}}],["2.0.0",{"_index":161,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["2018",{"_index":197,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["2019",{"_index":162,"title":{},"body":{"changelog.html":{}}}],["2020",{"_index":84,"title":{},"body":{"changelog.html":{}}}],["25",{"_index":249,"title":{},"body":{"changelog.html":{}}}],["26",{"_index":86,"title":{},"body":{"changelog.html":{}}}],["27b885a",{"_index":191,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":227,"title":{},"body":{"changelog.html":{}}}],["2c49330",{"_index":245,"title":{},"body":{"changelog.html":{}}}],["2e6bce7",{"_index":220,"title":{},"body":{"changelog.html":{}}}],["3.0.0",{"_index":125,"title":{},"body":{"changelog.html":{}}}],["3.4.3",{"_index":139,"title":{},"body":{"changelog.html":{}}}],["31",{"_index":164,"title":{},"body":{"changelog.html":{}}}],["39d1f3a",{"_index":239,"title":{},"body":{"changelog.html":{}}}],["3a159e3",{"_index":188,"title":{},"body":{"changelog.html":{}}}],["3b7ff6c",{"_index":175,"title":{},"body":{"changelog.html":{}}}],["3c95bc6",{"_index":184,"title":{},"body":{"changelog.html":{}}}],["4.0.0",{"_index":83,"title":{},"body":{"changelog.html":{}}}],["42",{"_index":221,"title":{},"body":{"changelog.html":{}}}],["592249a",{"_index":157,"title":{},"body":{"changelog.html":{}}}],["6",{"_index":211,"title":{},"body":{"changelog.html":{}}}],["6.5.4",{"_index":260,"title":{},"body":{"dependencies.html":{}}}],["6179153",{"_index":181,"title":{},"body":{"changelog.html":{}}}],["7",{"_index":549,"title":{},"body":{"overview.html":{}}}],["7.0.0",{"_index":207,"title":{},"body":{"changelog.html":{}}}],["7.x",{"_index":195,"title":{},"body":{"changelog.html":{}}}],["8.0.0",{"_index":193,"title":{},"body":{"changelog.html":{}}}],["8.x",{"_index":129,"title":{},"body":{"changelog.html":{}}}],["8036c22",{"_index":247,"title":{},"body":{"changelog.html":{}}}],["80a3aac",{"_index":134,"title":{},"body":{"changelog.html":{}}}],["822963d",{"_index":91,"title":{},"body":{"changelog.html":{}}}],["9.0.0",{"_index":128,"title":{},"body":{"changelog.html":{}}}],["9.x",{"_index":122,"title":{},"body":{"changelog.html":{}}}],["a282826",{"_index":232,"title":{},"body":{"changelog.html":{}}}],["above",{"_index":364,"title":{},"body":{"index.html":{},"license.html":{}}}],["access",{"_index":388,"title":{},"body":{"index.html":{}}}],["action",{"_index":539,"title":{},"body":{"license.html":{}}}],["activatedroute",{"_index":271,"title":{},"body":{"miscellaneous/functions.html":{}}}],["activatedroutesnapshot",{"_index":303,"title":{},"body":{"miscellaneous/functions.html":{}}}],["actual",{"_index":570,"title":{},"body":{"miscellaneous/variables.html":{}}}],["actual.indexof(expected",{"_index":572,"title":{},"body":{"miscellaneous/variables.html":{}}}],["actual.join",{"_index":574,"title":{},"body":{"miscellaneous/variables.html":{}}}],["actual.length",{"_index":573,"title":{},"body":{"miscellaneous/variables.html":{}}}],["add",{"_index":133,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["additional",{"_index":379,"title":{},"body":{"index.html":{}}}],["against",{"_index":117,"title":{},"body":{"changelog.html":{}}}],["allows",{"_index":291,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["already",{"_index":186,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["although",{"_index":208,"title":{},"body":{"changelog.html":{}}}],["always",{"_index":229,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["and/or",{"_index":506,"title":{},"body":{"license.html":{}}}],["angular",{"_index":118,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["angular/core",{"_index":257,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":165,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["angular/router",{"_index":258,"title":{},"body":{"dependencies.html":{}}}],["api",{"_index":455,"title":{},"body":{"index.html":{}}}],["arising",{"_index":543,"title":{},"body":{"license.html":{}}}],["around",{"_index":370,"title":{},"body":{"index.html":{}}}],["array",{"_index":108,"title":{},"body":{"changelog.html":{}}}],["assert",{"_index":562,"title":{},"body":{"miscellaneous/variables.html":{}}}],["assert(false",{"_index":578,"title":{},"body":{"miscellaneous/variables.html":{}}}],["assert(true",{"_index":580,"title":{},"body":{"miscellaneous/variables.html":{}}}],["associated",{"_index":494,"title":{},"body":{"license.html":{}}}],["authors",{"_index":532,"title":{},"body":{"license.html":{}}}],["automatic",{"_index":377,"title":{},"body":{"index.html":{}}}],["avoid",{"_index":367,"title":{},"body":{"index.html":{}}}],["b2e77d6",{"_index":202,"title":{},"body":{"changelog.html":{}}}],["based",{"_index":205,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["basic",{"_index":131,"title":{},"body":{"changelog.html":{}}}],["bba2b6b",{"_index":151,"title":{},"body":{"changelog.html":{}}}],["beforeeach",{"_index":417,"title":{},"body":{"index.html":{}}}],["benefitting",{"_index":458,"title":{},"body":{"index.html":{}}}],["better",{"_index":89,"title":{},"body":{"changelog.html":{}}}],["block",{"_index":148,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["boolean",{"_index":26,"title":{},"body":{"interfaces/Matchers.html":{},"miscellaneous/variables.html":{}}}],["breaking",{"_index":113,"title":{},"body":{"changelog.html":{}}}],["browser",{"_index":166,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["bug",{"_index":135,"title":{},"body":{"changelog.html":{}}}],["built",{"_index":116,"title":{},"body":{"changelog.html":{}}}],["button",{"_index":454,"title":{},"body":{"index.html":{}}}],["buttons",{"_index":402,"title":{},"body":{"index.html":{}}}],["c",{"_index":482,"title":{},"body":{"license.html":{}}}],["care",{"_index":329,"title":{},"body":{"index.html":{}}}],["case",{"_index":387,"title":{},"body":{"index.html":{}}}],["champagne",{"_index":253,"title":{},"body":{"changelog.html":{}}}],["change",{"_index":375,"title":{},"body":{"index.html":{}}}],["changelog",{"_index":73,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":75,"title":{},"body":{"changelog.html":{}}}],["charge",{"_index":489,"title":{},"body":{"license.html":{}}}],["check",{"_index":422,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["checked",{"_index":23,"title":{},"body":{"interfaces/Matchers.html":{},"miscellaneous/variables.html":{}}}],["checks",{"_index":20,"title":{},"body":{"interfaces/Matchers.html":{},"miscellaneous/variables.html":{}}}],["chore",{"_index":158,"title":{},"body":{"changelog.html":{}}}],["cities",{"_index":336,"title":{},"body":{"index.html":{}}}],["city",{"_index":348,"title":{},"body":{"index.html":{}}}],["claim",{"_index":535,"title":{},"body":{"license.html":{}}}],["class",{"_index":44,"title":{},"body":{"interfaces/Matchers.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["classes",{"_index":439,"title":{},"body":{"index.html":{},"overview.html":{}}}],["classname",{"_index":45,"title":{},"body":{"interfaces/Matchers.html":{}}}],["cleaner",{"_index":307,"title":{},"body":{"index.html":{}}}],["cli",{"_index":159,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["closes",{"_index":141,"title":{},"body":{"changelog.html":{}}}],["code",{"_index":147,"title":{},"body":{"changelog.html":{},"miscellaneous/functions.html":{}}}],["codelyzer",{"_index":173,"title":{},"body":{"changelog.html":{}}}],["combine",{"_index":176,"title":{},"body":{"changelog.html":{}}}],["commit",{"_index":81,"title":{},"body":{"changelog.html":{}}}],["compare",{"_index":576,"title":{},"body":{"miscellaneous/variables.html":{}}}],["complete",{"_index":429,"title":{},"body":{"index.html":{}}}],["compodoc",{"_index":145,"title":{},"body":{"changelog.html":{}}}],["compodoc/compodoc#765",{"_index":153,"title":{},"body":{"changelog.html":{}}}],["component.spec.ts",{"_index":441,"title":{},"body":{"index.html":{}}}],["componentfixture",{"_index":321,"title":{},"body":{"index.html":{}}}],["componentinstance",{"_index":460,"title":{},"body":{"index.html":{}}}],["components",{"_index":309,"title":{},"body":{"index.html":{}}}],["componenttester",{"_index":395,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":513,"title":{},"body":{"license.html":{}}}],["connection",{"_index":545,"title":{},"body":{"license.html":{}}}],["const",{"_index":99,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":396,"title":{},"body":{"index.html":{}}}],["contain",{"_index":278,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["contains",{"_index":34,"title":{},"body":{"interfaces/Matchers.html":{},"miscellaneous/variables.html":{}}}],["contents",{"_index":236,"title":{},"body":{"changelog.html":{}}}],["contract",{"_index":540,"title":{},"body":{"license.html":{}}}],["copies",{"_index":508,"title":{},"body":{"license.html":{}}}],["copy",{"_index":492,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":481,"title":{},"body":{"license.html":{}}}],["correct",{"_index":424,"title":{},"body":{"index.html":{}}}],["country",{"_index":338,"title":{},"body":{"index.html":{}}}],["countryselect",{"_index":340,"title":{},"body":{"index.html":{}}}],["countryselect.dispatchevent(new",{"_index":344,"title":{},"body":{"index.html":{}}}],["countryselect.selectedindex",{"_index":342,"title":{},"body":{"index.html":{}}}],["create",{"_index":440,"title":{},"body":{"index.html":{}}}],["created",{"_index":275,"title":{},"body":{"miscellaneous/functions.html":{}}}],["creates",{"_index":268,"title":{},"body":{"miscellaneous/functions.html":{}}}],["css",{"_index":43,"title":{},"body":{"interfaces/Matchers.html":{},"miscellaneous/variables.html":{}}}],["custom",{"_index":228,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["customequalitytesters",{"_index":559,"title":{},"body":{"miscellaneous/variables.html":{}}}],["damages",{"_index":536,"title":{},"body":{"license.html":{}}}],["deal",{"_index":496,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":546,"title":{},"body":{"license.html":{}}}],["debug",{"_index":391,"title":{},"body":{"index.html":{}}}],["debugelement",{"_index":461,"title":{},"body":{"index.html":{}}}],["declare",{"_index":65,"title":{},"body":{"interfaces/Matchers.html":{}}}],["default",{"_index":556,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":18,"title":{},"body":{"interfaces/Matchers.html":{}}}],["demo",{"_index":478,"title":{},"body":{"index.html":{}}}],["dep",{"_index":168,"title":{},"body":{"changelog.html":{}}}],["dependencies",{"_index":255,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["dependency",{"_index":171,"title":{},"body":{"changelog.html":{}}}],["depending",{"_index":301,"title":{},"body":{"miscellaneous/functions.html":{}}}],["details",{"_index":457,"title":{},"body":{"index.html":{}}}],["detectchanges",{"_index":406,"title":{},"body":{"index.html":{}}}],["detection",{"_index":376,"title":{},"body":{"index.html":{}}}],["dev",{"_index":436,"title":{},"body":{"index.html":{}}}],["df43796",{"_index":172,"title":{},"body":{"changelog.html":{}}}],["disabled",{"_index":200,"title":{},"body":{"changelog.html":{}}}],["dispatchevent",{"_index":405,"title":{},"body":{"index.html":{}}}],["dispatching",{"_index":372,"title":{},"body":{"index.html":{}}}],["display",{"_index":334,"title":{},"body":{"index.html":{}}}],["distribute",{"_index":504,"title":{},"body":{"license.html":{}}}],["docs",{"_index":218,"title":{},"body":{"changelog.html":{}}}],["documentation",{"_index":456,"title":{},"body":{"index.html":{},"license.html":{}}}],["documented",{"_index":77,"title":{},"body":{"changelog.html":{}}}],["doesn't",{"_index":288,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dom",{"_index":32,"title":{},"body":{"interfaces/Matchers.html":{},"miscellaneous/variables.html":{}}}],["don't",{"_index":296,"title":{},"body":{"miscellaneous/functions.html":{}}}],["downgrade",{"_index":144,"title":{},"body":{"changelog.html":{}}}],["dry",{"_index":361,"title":{},"body":{"index.html":{}}}],["e0a0472",{"_index":243,"title":{},"body":{"changelog.html":{}}}],["e1163fb",{"_index":244,"title":{},"body":{"changelog.html":{}}}],["e354723",{"_index":169,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":463,"title":{},"body":{"index.html":{}}}],["easier",{"_index":317,"title":{},"body":{"index.html":{}}}],["eee2e97",{"_index":240,"title":{},"body":{"changelog.html":{}}}],["el",{"_index":564,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.checked",{"_index":583,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.classes",{"_index":571,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.selectedindex",{"_index":585,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.selectedlabel",{"_index":587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.selectedvalue",{"_index":586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.textcontent",{"_index":582,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.value",{"_index":581,"title":{},"body":{"miscellaneous/variables.html":{}}}],["element",{"_index":33,"title":{},"body":{"interfaces/Matchers.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["element(s",{"_index":97,"title":{},"body":{"changelog.html":{}}}],["elements",{"_index":371,"title":{},"body":{"index.html":{}}}],["empty",{"_index":234,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["encourage",{"_index":216,"title":{},"body":{"changelog.html":{}}}],["enjoy",{"_index":465,"title":{},"body":{"index.html":{}}}],["equal",{"_index":55,"title":{},"body":{"interfaces/Matchers.html":{},"miscellaneous/variables.html":{}}}],["error",{"_index":385,"title":{},"body":{"index.html":{}}}],["etc",{"_index":392,"title":{},"body":{"index.html":{}}}],["even",{"_index":381,"title":{},"body":{"index.html":{}}}],["event",{"_index":531,"title":{},"body":{"license.html":{}}}],["event('change",{"_index":345,"title":{},"body":{"index.html":{}}}],["events",{"_index":373,"title":{},"body":{"index.html":{}}}],["everything",{"_index":423,"title":{},"body":{"index.html":{}}}],["exact",{"_index":61,"title":{},"body":{"interfaces/Matchers.html":{},"miscellaneous/variables.html":{}}}],["example",{"_index":98,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["exist",{"_index":400,"title":{},"body":{"index.html":{}}}],["expect(city).tobetruthy",{"_index":350,"title":{},"body":{"index.html":{}}}],["expect(city.options.length).tobe(3",{"_index":351,"title":{},"body":{"index.html":{}}}],["expect(city.options[0].label).tobe",{"_index":353,"title":{},"body":{"index.html":{}}}],["expect(city.options[0].value).tobe",{"_index":352,"title":{},"body":{"index.html":{}}}],["expect(city.options[1].label).tobe('paris",{"_index":355,"title":{},"body":{"index.html":{}}}],["expect(city.options[1].value).tobe('paris",{"_index":354,"title":{},"body":{"index.html":{}}}],["expect(city.options[2].label).tobe('lyon",{"_index":357,"title":{},"body":{"index.html":{}}}],["expect(city.options[2].value).tobe('lyon",{"_index":356,"title":{},"body":{"index.html":{}}}],["expect(fixture.nativeelement.queryselector('#city')).tobefalsy",{"_index":363,"title":{},"body":{"index.html":{}}}],["expect(tester.city).tobefalsy",{"_index":415,"title":{},"body":{"index.html":{}}}],["expect(tester.city).tohaveselectedlabel('paris",{"_index":426,"title":{},"body":{"index.html":{}}}],["expect(tester.city.optionlabels).toequal",{"_index":411,"title":{},"body":{"index.html":{}}}],["expect(tester.city.optionvalues).toequal",{"_index":408,"title":{},"body":{"index.html":{}}}],["expect(tester.country).tohaveselectedvalue('fr",{"_index":425,"title":{},"body":{"index.html":{}}}],["expect(tester.informationmessage).tocontaintext('please",{"_index":421,"title":{},"body":{"index.html":{}}}],["expect(tester.name).tohavevalue('doe",{"_index":427,"title":{},"body":{"index.html":{}}}],["expect(tester.newsletter).tobechecked",{"_index":428,"title":{},"body":{"index.html":{}}}],["expectations",{"_index":382,"title":{},"body":{"index.html":{}}}],["expected",{"_index":566,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expose",{"_index":445,"title":{},"body":{"index.html":{}}}],["express",{"_index":522,"title":{},"body":{"license.html":{}}}],["extending",{"_index":443,"title":{},"body":{"index.html":{}}}],["extends",{"_index":394,"title":{},"body":{"index.html":{}}}],["f46816e",{"_index":194,"title":{},"body":{"changelog.html":{}}}],["fake",{"_index":269,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fakeroute",{"_index":263,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fakeroute(options",{"_index":267,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fakesnapshot",{"_index":265,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fakesnapshot(options",{"_index":302,"title":{},"body":{"miscellaneous/functions.html":{}}}],["false",{"_index":231,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["falsy",{"_index":568,"title":{},"body":{"miscellaneous/variables.html":{}}}],["features",{"_index":87,"title":{},"body":{"changelog.html":{}}}],["feedback",{"_index":470,"title":{},"body":{"index.html":{}}}],["few",{"_index":326,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/Matchers.html":{},"changelog.html":{},"index.html":{}}}],["files",{"_index":495,"title":{},"body":{"license.html":{}}}],["filing",{"_index":471,"title":{},"body":{"index.html":{}}}],["fine",{"_index":210,"title":{},"body":{"changelog.html":{}}}],["first",{"_index":251,"title":{},"body":{"changelog.html":{}}}],["fitness",{"_index":527,"title":{},"body":{"license.html":{}}}],["fix",{"_index":233,"title":{},"body":{"changelog.html":{}}}],["fixes",{"_index":136,"title":{},"body":{"changelog.html":{}}}],["fixture",{"_index":389,"title":{},"body":{"index.html":{}}}],["fixture.detectchanges",{"_index":347,"title":{},"body":{"index.html":{}}}],["fixture.nativeelement.queryselector('#city",{"_index":349,"title":{},"body":{"index.html":{}}}],["fixture.nativeelement.queryselector('#country",{"_index":341,"title":{},"body":{"index.html":{}}}],["following",{"_index":332,"title":{},"body":{"index.html":{},"license.html":{}}}],["form",{"_index":420,"title":{},"body":{"index.html":{}}}],["formatting",{"_index":183,"title":{},"body":{"changelog.html":{}}}],["france",{"_index":339,"title":{},"body":{"index.html":{}}}],["free",{"_index":488,"title":{},"body":{"license.html":{}}}],["french",{"_index":335,"title":{},"body":{"index.html":{}}}],["frequent",{"_index":416,"title":{},"body":{"index.html":{}}}],["functions",{"_index":262,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":511,"title":{},"body":{"license.html":{}}}],["future",{"_index":212,"title":{},"body":{"changelog.html":{}}}],["getters",{"_index":446,"title":{},"body":{"index.html":{}}}],["getting",{"_index":71,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["github",{"_index":475,"title":{},"body":{"index.html":{}}}],["github.com/definitelytyped/definitelytyped/commit/b7d7813c5deacde98bcb7a5e63104431b85c09eb#diff",{"_index":142,"title":{},"body":{"changelog.html":{}}}],["given",{"_index":35,"title":{},"body":{"interfaces/Matchers.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["goes",{"_index":281,"title":{},"body":{"miscellaneous/functions.html":{}}}],["granted",{"_index":487,"title":{},"body":{"license.html":{}}}],["guaranteed",{"_index":214,"title":{},"body":{"changelog.html":{}}}],["guidelines",{"_index":82,"title":{},"body":{"changelog.html":{}}}],["helps",{"_index":304,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":486,"title":{},"body":{"license.html":{}}}],["hide",{"_index":358,"title":{},"body":{"index.html":{}}}],["holders",{"_index":533,"title":{},"body":{"license.html":{}}}],["implicit",{"_index":170,"title":{},"body":{"changelog.html":{}}}],["implied",{"_index":523,"title":{},"body":{"license.html":{}}}],["import",{"_index":438,"title":{},"body":{"index.html":{}}}],["imports",{"_index":177,"title":{},"body":{"changelog.html":{}}}],["included",{"_index":516,"title":{},"body":{"license.html":{}}}],["includes",{"_index":431,"title":{},"body":{"index.html":{}}}],["including",{"_index":498,"title":{},"body":{"license.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"interfaces/Matchers.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["infer",{"_index":94,"title":{},"body":{"changelog.html":{}}}],["inferred",{"_index":101,"title":{},"body":{"changelog.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/Matchers.html":{}}}],["input",{"_index":451,"title":{},"body":{"index.html":{}}}],["inputs",{"_index":401,"title":{},"body":{"index.html":{}}}],["install",{"_index":434,"title":{},"body":{"index.html":{}}}],["installation",{"_index":432,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":569,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interface",{"_index":0,"title":{"interfaces/Matchers.html":{}},"body":{"interfaces/Matchers.html":{},"overview.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/Matchers.html":{}}}],["isnegative",{"_index":563,"title":{},"body":{"miscellaneous/variables.html":{}}}],["issue",{"_index":149,"title":{},"body":{"changelog.html":{}}}],["issues",{"_index":466,"title":{},"body":{"index.html":{}}}],["it('should",{"_index":333,"title":{},"body":{"index.html":{}}}],["jasmine",{"_index":67,"title":{},"body":{"interfaces/Matchers.html":{},"changelog.html":{},"index.html":{}}}],["jasmine.addmatchers(speculoosmatchers",{"_index":418,"title":{},"body":{"index.html":{}}}],["jasmine.custommatcher",{"_index":561,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jasmine.custommatcherfactories",{"_index":555,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jasmine.custommatcherresult",{"_index":577,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jasmine.matchersutil",{"_index":558,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jsdoc",{"_index":182,"title":{},"body":{"changelog.html":{}}}],["kind",{"_index":521,"title":{},"body":{"license.html":{}}}],["know",{"_index":328,"title":{},"body":{"index.html":{}}}],["label",{"_index":54,"title":{},"body":{"interfaces/Matchers.html":{},"miscellaneous/variables.html":{}}}],["latest",{"_index":190,"title":{},"body":{"changelog.html":{}}}],["liability",{"_index":537,"title":{},"body":{"license.html":{}}}],["liable",{"_index":534,"title":{},"body":{"license.html":{}}}],["library",{"_index":318,"title":{},"body":{"index.html":{}}}],["license",{"_index":479,"title":{"license.html":{}},"body":{"license.html":{}}}],["limitation",{"_index":499,"title":{},"body":{"license.html":{}}}],["limited",{"_index":524,"title":{},"body":{"license.html":{}}}],["lint",{"_index":179,"title":{},"body":{"changelog.html":{}}}],["list",{"_index":430,"title":{},"body":{"index.html":{}}}],["look",{"_index":476,"title":{},"body":{"index.html":{}}}],["lyon",{"_index":410,"title":{},"body":{"index.html":{}}}],["make",{"_index":315,"title":{},"body":{"index.html":{}}}],["matcher",{"_index":238,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["matchers",{"_index":1,"title":{"interfaces/Matchers.html":{}},"body":{"interfaces/Matchers.html":{},"changelog.html":{},"index.html":{}}}],["matchers.ts",{"_index":7,"title":{},"body":{"interfaces/Matchers.html":{}}}],["matchers.ts:13",{"_index":63,"title":{},"body":{"interfaces/Matchers.html":{}}}],["matchers.ts:18",{"_index":60,"title":{},"body":{"interfaces/Matchers.html":{}}}],["matchers.ts:23",{"_index":29,"title":{},"body":{"interfaces/Matchers.html":{}}}],["matchers.ts:28",{"_index":19,"title":{},"body":{"interfaces/Matchers.html":{}}}],["matchers.ts:33",{"_index":48,"title":{},"body":{"interfaces/Matchers.html":{}}}],["matchers.ts:38",{"_index":57,"title":{},"body":{"interfaces/Matchers.html":{}}}],["matchers.ts:43",{"_index":52,"title":{},"body":{"interfaces/Matchers.html":{}}}],["matchers.ts:8",{"_index":42,"title":{},"body":{"interfaces/Matchers.html":{}}}],["matching",{"_index":69,"title":{},"body":{"interfaces/Matchers.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["merchantability",{"_index":526,"title":{},"body":{"license.html":{}}}],["merge",{"_index":502,"title":{},"body":{"license.html":{}}}],["message",{"_index":567,"title":{},"body":{"miscellaneous/variables.html":{}}}],["messages",{"_index":386,"title":{},"body":{"index.html":{}}}],["methods",{"_index":9,"title":{},"body":{"interfaces/Matchers.html":{},"index.html":{}}}],["minimal",{"_index":477,"title":{},"body":{"index.html":{}}}],["minutes",{"_index":327,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":261,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":480,"title":{},"body":{"license.html":{}}}],["modify",{"_index":501,"title":{},"body":{"license.html":{}}}],["modules",{"_index":547,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":383,"title":{},"body":{"index.html":{}}}],["mycomponenttester",{"_index":393,"title":{},"body":{"index.html":{}}}],["name",{"_index":38,"title":{},"body":{"interfaces/Matchers.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["namespace",{"_index":66,"title":{},"body":{"interfaces/Matchers.html":{}}}],["native",{"_index":390,"title":{},"body":{"index.html":{}}}],["nativeelement",{"_index":462,"title":{},"body":{"index.html":{}}}],["need",{"_index":346,"title":{},"body":{"index.html":{}}}],["needed",{"_index":407,"title":{},"body":{"index.html":{}}}],["negativecompare",{"_index":579,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ng",{"_index":132,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["ngx",{"_index":114,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["ninja",{"_index":483,"title":{},"body":{"license.html":{}}}],["none",{"_index":575,"title":{},"body":{"miscellaneous/variables.html":{}}}],["noninfringement",{"_index":530,"title":{},"body":{"license.html":{}}}],["notable",{"_index":74,"title":{},"body":{"changelog.html":{}}}],["notice",{"_index":514,"title":{},"body":{"license.html":{}}}],["now",{"_index":92,"title":{},"body":{"changelog.html":{}}}],["npm",{"_index":433,"title":{},"body":{"index.html":{}}}],["null",{"_index":103,"title":{},"body":{"changelog.html":{}}}],["number",{"_index":47,"title":{},"body":{"interfaces/Matchers.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":311,"title":{},"body":{"index.html":{}}}],["obtaining",{"_index":491,"title":{},"body":{"license.html":{}}}],["one",{"_index":450,"title":{},"body":{"index.html":{}}}],["option",{"_index":359,"title":{},"body":{"index.html":{}}}],["option's",{"_index":53,"title":{},"body":{"interfaces/Matchers.html":{},"miscellaneous/variables.html":{}}}],["optional",{"_index":40,"title":{},"body":{"interfaces/Matchers.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["options",{"_index":298,"title":{},"body":{"miscellaneous/functions.html":{}}}],["otherwise",{"_index":542,"title":{},"body":{"license.html":{}}}],["out",{"_index":544,"title":{},"body":{"license.html":{}}}],["overview",{"_index":548,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":254,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":310,"title":{},"body":{"index.html":{}}}],["parameters",{"_index":37,"title":{},"body":{"interfaces/Matchers.html":{},"miscellaneous/functions.html":{}}}],["parammap",{"_index":277,"title":{},"body":{"miscellaneous/functions.html":{}}}],["params",{"_index":274,"title":{},"body":{"miscellaneous/functions.html":{}}}],["parent",{"_index":284,"title":{},"body":{"miscellaneous/functions.html":{}}}],["paris",{"_index":409,"title":{},"body":{"index.html":{}}}],["partial",{"_index":270,"title":{},"body":{"miscellaneous/functions.html":{}}}],["partially",{"_index":299,"title":{},"body":{"miscellaneous/functions.html":{}}}],["particular",{"_index":528,"title":{},"body":{"license.html":{}}}],["pass",{"_index":273,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["passed",{"_index":287,"title":{},"body":{"miscellaneous/functions.html":{}}}],["pattern",{"_index":312,"title":{},"body":{"index.html":{}}}],["peer",{"_index":167,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["permission",{"_index":485,"title":{},"body":{"license.html":{}}}],["permit",{"_index":509,"title":{},"body":{"license.html":{}}}],["person",{"_index":490,"title":{},"body":{"license.html":{}}}],["persons",{"_index":510,"title":{},"body":{"license.html":{}}}],["please",{"_index":468,"title":{},"body":{"index.html":{}}}],["polyfill",{"_index":156,"title":{},"body":{"changelog.html":{}}}],["polyfill.ts",{"_index":189,"title":{},"body":{"changelog.html":{}}}],["populated",{"_index":300,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["portions",{"_index":518,"title":{},"body":{"license.html":{}}}],["possible",{"_index":95,"title":{},"body":{"changelog.html":{}}}],["pre",{"_index":419,"title":{},"body":{"index.html":{}}}],["prefer",{"_index":447,"title":{},"body":{"index.html":{}}}],["previous",{"_index":124,"title":{},"body":{"changelog.html":{}}}],["previously",{"_index":360,"title":{},"body":{"index.html":{}}}],["project",{"_index":76,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["properly",{"_index":93,"title":{},"body":{"changelog.html":{}}}],["property",{"_index":201,"title":{},"body":{"changelog.html":{}}}],["provide",{"_index":469,"title":{},"body":{"index.html":{}}}],["provided",{"_index":519,"title":{},"body":{"license.html":{}}}],["provides",{"_index":313,"title":{},"body":{"index.html":{}}}],["public",{"_index":187,"title":{},"body":{"changelog.html":{}}}],["public_api.ts",{"_index":180,"title":{},"body":{"changelog.html":{}}}],["publish",{"_index":503,"title":{},"body":{"license.html":{}}}],["pull",{"_index":473,"title":{},"body":{"index.html":{}}}],["purpose",{"_index":529,"title":{},"body":{"license.html":{}}}],["queried",{"_index":96,"title":{},"body":{"changelog.html":{}}}],["queryparammap",{"_index":283,"title":{},"body":{"miscellaneous/functions.html":{}}}],["queryparams",{"_index":282,"title":{},"body":{"miscellaneous/functions.html":{}}}],["questions",{"_index":467,"title":{},"body":{"index.html":{}}}],["read",{"_index":380,"title":{},"body":{"index.html":{}}}],["readable",{"_index":384,"title":{},"body":{"index.html":{}}}],["readme",{"_index":150,"title":{},"body":{"changelog.html":{}}}],["readonly",{"_index":185,"title":{},"body":{"changelog.html":{}}}],["readonlyarray",{"_index":560,"title":{},"body":{"miscellaneous/variables.html":{}}}],["receiver",{"_index":21,"title":{},"body":{"interfaces/Matchers.html":{},"miscellaneous/variables.html":{}}}],["recommended",{"_index":366,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":155,"title":{},"body":{"changelog.html":{}}}],["release",{"_index":252,"title":{},"body":{"changelog.html":{}}}],["remove",{"_index":154,"title":{},"body":{"changelog.html":{}}}],["repetition",{"_index":413,"title":{},"body":{"index.html":{}}}],["repetitions",{"_index":368,"title":{},"body":{"index.html":{}}}],["requests",{"_index":474,"title":{},"body":{"index.html":{}}}],["restriction",{"_index":497,"title":{},"body":{"license.html":{}}}],["result",{"_index":68,"title":{},"body":{"interfaces/Matchers.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":70,"title":{},"body":{"interfaces/Matchers.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":230,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["returning",{"_index":448,"title":{},"body":{"index.html":{}}}],["returns",{"_index":24,"title":{},"body":{"interfaces/Matchers.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["rights",{"_index":500,"title":{},"body":{"license.html":{}}}],["route",{"_index":285,"title":{},"body":{"miscellaneous/functions.html":{}}}],["route's",{"_index":276,"title":{},"body":{"miscellaneous/functions.html":{}}}],["route.parent.snapshot",{"_index":294,"title":{},"body":{"miscellaneous/functions.html":{}}}],["route.snapshot.parent",{"_index":295,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rule",{"_index":174,"title":{},"body":{"changelog.html":{}}}],["run",{"_index":209,"title":{},"body":{"changelog.html":{}}}],["rxjs",{"_index":259,"title":{},"body":{"dependencies.html":{}}}],["same",{"_index":279,"title":{},"body":{"miscellaneous/functions.html":{}}}],["save",{"_index":435,"title":{},"body":{"index.html":{}}}],["see",{"_index":78,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["select",{"_index":452,"title":{},"body":{"index.html":{}}}],["selected",{"_index":50,"title":{},"body":{"interfaces/Matchers.html":{},"miscellaneous/variables.html":{}}}],["selecting",{"_index":337,"title":{},"body":{"index.html":{}}}],["selector",{"_index":414,"title":{},"body":{"index.html":{}}}],["sell",{"_index":507,"title":{},"body":{"license.html":{}}}],["set",{"_index":290,"title":{},"body":{"miscellaneous/functions.html":{}}}],["shall",{"_index":515,"title":{},"body":{"license.html":{}}}],["shown",{"_index":444,"title":{},"body":{"index.html":{}}}],["signature",{"_index":138,"title":{},"body":{"changelog.html":{}}}],["similar",{"_index":399,"title":{},"body":{"index.html":{}}}],["simpler",{"_index":306,"title":{},"body":{"index.html":{}}}],["simply",{"_index":319,"title":{},"body":{"index.html":{}}}],["snapshot",{"_index":286,"title":{},"body":{"miscellaneous/functions.html":{}}}],["snapshot's",{"_index":289,"title":{},"body":{"miscellaneous/functions.html":{}}}],["software",{"_index":493,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/Matchers.html":{}}}],["speculoos",{"_index":115,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["speculoosmatchers",{"_index":552,"title":{},"body":{"miscellaneous/variables.html":{}}}],["squad",{"_index":484,"title":{},"body":{"license.html":{}}}],["src/.../matchers.ts",{"_index":553,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../route.ts",{"_index":264,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/jasmine",{"_index":6,"title":{},"body":{"interfaces/Matchers.html":{}}}],["src/lib/matchers.ts",{"_index":554,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/lib/route.ts",{"_index":266,"title":{},"body":{"miscellaneous/functions.html":{}}}],["standard",{"_index":79,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["start",{"_index":324,"title":{},"body":{"index.html":{}}}],["started",{"_index":72,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["stick",{"_index":123,"title":{},"body":{"changelog.html":{}}}],["strict",{"_index":88,"title":{},"body":{"changelog.html":{}}}],["string",{"_index":28,"title":{},"body":{"interfaces/Matchers.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":512,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":505,"title":{},"body":{"license.html":{}}}],["submitting",{"_index":472,"title":{},"body":{"index.html":{}}}],["substantial",{"_index":517,"title":{},"body":{"license.html":{}}}],["super(mycomponent",{"_index":397,"title":{},"body":{"index.html":{}}}],["support",{"_index":130,"title":{},"body":{"changelog.html":{}}}],["test",{"_index":293,"title":{},"body":{"miscellaneous/functions.html":{}}}],["testbuttons",{"_index":106,"title":{},"body":{"changelog.html":{}}}],["tested",{"_index":206,"title":{},"body":{"changelog.html":{}}}],["testelement",{"_index":30,"title":{},"body":{"interfaces/Matchers.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["testelements",{"_index":109,"title":{},"body":{"changelog.html":{}}}],["tester.country.selectindex(0",{"_index":412,"title":{},"body":{"index.html":{}}}],["tester.country.selectlabel('france",{"_index":404,"title":{},"body":{"index.html":{}}}],["tester.element('.selector",{"_index":105,"title":{},"body":{"changelog.html":{}}}],["tester.element('div",{"_index":100,"title":{},"body":{"changelog.html":{}}}],["tester.elements('.btn",{"_index":107,"title":{},"body":{"changelog.html":{}}}],["tester.elements('.selector",{"_index":112,"title":{},"body":{"changelog.html":{}}}],["tester.elements('div",{"_index":110,"title":{},"body":{"changelog.html":{}}}],["testhtmlelement",{"_index":102,"title":{},"body":{"changelog.html":{}}}],["testinput",{"_index":22,"title":{},"body":{"interfaces/Matchers.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["testlink",{"_index":104,"title":{},"body":{"changelog.html":{}}}],["testlinks",{"_index":111,"title":{},"body":{"changelog.html":{}}}],["tests",{"_index":272,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["testselect",{"_index":49,"title":{},"body":{"interfaces/Matchers.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["testtextarea",{"_index":64,"title":{},"body":{"interfaces/Matchers.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["testxxx",{"_index":459,"title":{},"body":{"index.html":{}}}],["text",{"_index":235,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["textarea",{"_index":453,"title":{},"body":{"index.html":{}}}],["textcontent",{"_index":36,"title":{},"body":{"interfaces/Matchers.html":{},"miscellaneous/variables.html":{}}}],["this.select('#city",{"_index":403,"title":{},"body":{"index.html":{}}}],["this.select('#country",{"_index":398,"title":{},"body":{"index.html":{}}}],["though",{"_index":215,"title":{},"body":{"changelog.html":{}}}],["thus",{"_index":322,"title":{},"body":{"index.html":{}}}],["tobechecked",{"_index":10,"title":{},"body":{"interfaces/Matchers.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["tocontaintext",{"_index":11,"title":{},"body":{"interfaces/Matchers.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["tocontaintext(textcontent",{"_index":27,"title":{},"body":{"interfaces/Matchers.html":{},"index.html":{}}}],["tohaveclass",{"_index":12,"title":{},"body":{"interfaces/Matchers.html":{},"miscellaneous/variables.html":{}}}],["tohaveclass(classname",{"_index":41,"title":{},"body":{"interfaces/Matchers.html":{},"index.html":{}}}],["tohaveselectedindex",{"_index":13,"title":{},"body":{"interfaces/Matchers.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["tohaveselectedindex(index",{"_index":46,"title":{},"body":{"interfaces/Matchers.html":{},"index.html":{}}}],["tohaveselectedlabel",{"_index":14,"title":{},"body":{"interfaces/Matchers.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["tohaveselectedlabel(label",{"_index":51,"title":{},"body":{"interfaces/Matchers.html":{},"index.html":{}}}],["tohaveselectedvalue",{"_index":15,"title":{},"body":{"interfaces/Matchers.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["tohaveselectedvalue(value",{"_index":56,"title":{},"body":{"interfaces/Matchers.html":{},"index.html":{}}}],["tohavetext",{"_index":16,"title":{},"body":{"interfaces/Matchers.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["tohavetext(textcontent",{"_index":59,"title":{},"body":{"interfaces/Matchers.html":{},"index.html":{}}}],["tohavevalue",{"_index":17,"title":{},"body":{"interfaces/Matchers.html":{},"miscellaneous/variables.html":{}}}],["tohavevalue(value",{"_index":62,"title":{},"body":{"interfaces/Matchers.html":{},"index.html":{}}}],["tort",{"_index":541,"title":{},"body":{"license.html":{}}}],["triggering",{"_index":374,"title":{},"body":{"index.html":{}}}],["tslib",{"_index":256,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":39,"title":{},"body":{"interfaces/Matchers.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["typically",{"_index":442,"title":{},"body":{"index.html":{}}}],["typings",{"_index":90,"title":{},"body":{"changelog.html":{}}}],["typo",{"_index":219,"title":{},"body":{"changelog.html":{}}}],["ugrade",{"_index":217,"title":{},"body":{"changelog.html":{}}}],["under",{"_index":292,"title":{},"body":{"miscellaneous/functions.html":{}}}],["understand",{"_index":323,"title":{},"body":{"index.html":{}}}],["unit",{"_index":308,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":565,"title":{},"body":{"miscellaneous/variables.html":{}}}],["update",{"_index":137,"title":{},"body":{"changelog.html":{}}}],["upgrade",{"_index":192,"title":{},"body":{"changelog.html":{}}}],["use",{"_index":121,"title":{},"body":{"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{}}}],["used",{"_index":449,"title":{},"body":{"index.html":{}}}],["useful",{"_index":378,"title":{},"body":{"index.html":{}}}],["using",{"_index":325,"title":{},"body":{"index.html":{}}}],["util",{"_index":557,"title":{},"body":{"miscellaneous/variables.html":{}}}],["utilities",{"_index":314,"title":{},"body":{"index.html":{}}}],["value",{"_index":58,"title":{},"body":{"interfaces/Matchers.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":280,"title":{},"body":{"miscellaneous/functions.html":{}}}],["variables",{"_index":551,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":80,"title":{},"body":{"changelog.html":{}}}],["versions",{"_index":213,"title":{},"body":{"changelog.html":{}}}],["very",{"_index":250,"title":{},"body":{"changelog.html":{}}}],["want",{"_index":120,"title":{},"body":{"changelog.html":{}}}],["warranties",{"_index":525,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":520,"title":{},"body":{"license.html":{}}}],["was${!isnegative",{"_index":584,"title":{},"body":{"miscellaneous/variables.html":{}}}],["way",{"_index":365,"title":{},"body":{"index.html":{}}}],["whether",{"_index":538,"title":{},"body":{"license.html":{}}}],["without",{"_index":297,"title":{},"body":{"miscellaneous/functions.html":{},"license.html":{}}}],["wrapper",{"_index":464,"title":{},"body":{"index.html":{}}}],["wrappers",{"_index":369,"title":{},"body":{"index.html":{}}}],["wrapping",{"_index":31,"title":{},"body":{"interfaces/Matchers.html":{},"miscellaneous/variables.html":{}}}],["wraps",{"_index":320,"title":{},"body":{"index.html":{}}}],["write",{"_index":305,"title":{},"body":{"index.html":{}}}],["writing",{"_index":316,"title":{},"body":{"index.html":{}}}],["written",{"_index":331,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":437,"title":{},"body":{"index.html":{}}}],["you've",{"_index":330,"title":{},"body":{"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/Matchers.html":{"url":"interfaces/Matchers.html","title":"interface - Matchers","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Matchers\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/jasmine-matchers.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    toBeChecked\n                                \n                                \n                                    toContainText\n                                \n                                \n                                    toHaveClass\n                                \n                                \n                                    toHaveSelectedIndex\n                                \n                                \n                                    toHaveSelectedLabel\n                                \n                                \n                                    toHaveSelectedValue\n                                \n                                \n                                    toHaveText\n                                \n                                \n                                    toHaveValue\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toBeChecked\n                        \n                        \n                    \n                \n            \n            \n                \ntoBeChecked()\n                \n            \n\n\n            \n                \n                    Defined in src/jasmine-matchers.ts:28\n                \n            \n\n\n            \n                \n                    Checks that the receiver is a TestInput and is checked\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toContainText\n                        \n                        \n                    \n                \n            \n            \n                \ntoContainText(textContent: string)\n                \n            \n\n\n            \n                \n                    Defined in src/jasmine-matchers.ts:23\n                \n            \n\n\n            \n                \n                    Checks that the receiver is a TestElement wrapping a DOM element and contains the given textContent\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    textContent\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toHaveClass\n                        \n                        \n                    \n                \n            \n            \n                \ntoHaveClass(className: string)\n                \n            \n\n\n            \n                \n                    Defined in src/jasmine-matchers.ts:8\n                \n            \n\n\n            \n                \n                    Checks that the receiver is a TestElement wrapping a DOM element and has the given CSS class\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    className\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toHaveSelectedIndex\n                        \n                        \n                    \n                \n            \n            \n                \ntoHaveSelectedIndex(index: number)\n                \n            \n\n\n            \n                \n                    Defined in src/jasmine-matchers.ts:33\n                \n            \n\n\n            \n                \n                    Checks that the receiver is a TestSelect wrapping a DOM element and has the given selected index\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toHaveSelectedLabel\n                        \n                        \n                    \n                \n            \n            \n                \ntoHaveSelectedLabel(label: string)\n                \n            \n\n\n            \n                \n                    Defined in src/jasmine-matchers.ts:43\n                \n            \n\n\n            \n                \n                    Checks that the receiver is a TestSelect wrapping a DOM element with the selected option's label equal to the given label\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    label\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toHaveSelectedValue\n                        \n                        \n                    \n                \n            \n            \n                \ntoHaveSelectedValue(value: string)\n                \n            \n\n\n            \n                \n                    Defined in src/jasmine-matchers.ts:38\n                \n            \n\n\n            \n                \n                    Checks that the receiver is a TestSelect wrapping a DOM element with the selected option's value equal to the given value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toHaveText\n                        \n                        \n                    \n                \n            \n            \n                \ntoHaveText(textContent: string)\n                \n            \n\n\n            \n                \n                    Defined in src/jasmine-matchers.ts:18\n                \n            \n\n\n            \n                \n                    Checks that the receiver is a TestElement wrapping a DOM element and has the exact given textContent\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    textContent\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toHaveValue\n                        \n                        \n                    \n                \n            \n            \n                \ntoHaveValue(value: string)\n                \n            \n\n\n            \n                \n                    Defined in src/jasmine-matchers.ts:13\n                \n            \n\n\n            \n                \n                    Checks that the receiver is a TestInput or a TestTextArea and has the given value\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        declare namespace jasmine {\n  interface Matchers {\n\n    /**\n     * Checks that the receiver is a TestElement wrapping a DOM element and has the given CSS class\n     */\n    toHaveClass(className: string): boolean;\n\n    /**\n     * Checks that the receiver is a TestInput or a TestTextArea and has the given value\n     */\n    toHaveValue(value: string): boolean;\n\n    /**\n     * Checks that the receiver is a TestElement wrapping a DOM element and has the exact given textContent\n     */\n    toHaveText(textContent: string): boolean;\n\n    /**\n     * Checks that the receiver is a TestElement wrapping a DOM element and contains the given textContent\n     */\n    toContainText(textContent: string): boolean;\n\n    /**\n     * Checks that the receiver is a TestInput and is checked\n     */\n    toBeChecked(): boolean;\n\n    /**\n     * Checks that the receiver is a TestSelect wrapping a DOM element and has the given selected index\n     */\n    toHaveSelectedIndex(index: number): boolean;\n\n    /**\n     * Checks that the receiver is a TestSelect wrapping a DOM element with the selected option's value equal to the given value\n     */\n    toHaveSelectedValue(value: string): boolean;\n\n    /**\n     * Checks that the receiver is a TestSelect wrapping a DOM element with the selected option's label equal to the given label\n     */\n    toHaveSelectedLabel(label: string): boolean;\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n4.0.0 (2020-06-26)\nFeatures\n\nstrict and better typings (822963d)\n\nWe now properly infer (if possible) the type of the queried element(s).\nFor example:\nconst testElement = tester.element('div'); // inferred as TestHtmlElement | null\nconst testLink = tester.element('.selector'); // inferred as TestHtmlElement | null\nconst testButtons = tester.elements('.btn'); // inferred as Array\nconst testElements = tester.elements('div'); // inferred as Array>\nconst testLinks = tester.elements('.selector'); // inferred as Array>⚠ BREAKING CHANGES\n\nngx-speculoos is now built against Angular 10.0.0. If you want to use it with Angular 9.x, stick to the previous version of ngx-speculoos.\n\n3.0.0 (2020-02-07)\n⚠ BREAKING CHANGES\n\nngx-speculoos is now built against Angular 9.0.0. If you want to use it with Angular 8.x, stick to the previous version of ngx-speculoos.\n\nFeatures\n\nsupport basic ng-add (80a3aac)\n\nBug Fixes\n\nmatchers: update signature for jasmine 3.4.3 (09e1172), closes /github.com/DefinitelyTyped/DefinitelyTyped/commit/b7d7813c5deacde98bcb7a5e63104431b85c09eb#diff-04770c66399ad864e0881886aaf0800\ndowngrade compodoc to 1.1.8 because of code block issue on README (bba2b6b), closes #146 compodoc/compodoc#765\nremove reflect polyfill (592249a)\n\nchore\n\nupdate to Angular and CLI 9.0.0 (1c0395b)\n\n2.0.0 (2019-05-31)\nBug Fixes\n\nadd @angular/platform-browser as a peer dep (e354723)\nadd ngx-speculoos as an implicit dependency (df43796)\ncodelyzer rule name (3b7ff6c)\ncombine imports (17ac60f)\ndo not lint public_api.ts (6179153)\njsdoc formatting (3c95bc6)\nreadonly is already public (3a159e3)\nupdate polyfill.ts with latest (27b885a)\n\nchore\n\nupgrade to Angular 8.0.0 (f46816e)\n\nBREAKING CHANGES\n\nngx-speculoos is now built against Angular 8.0.0. If you want to use it with Angular 7.x, stick to the previous version of ngx-speculoos.\n\n\n1.1.0 (2018-11-17)\nFeatures\n\nadd disabled property on TestInput, TestTextarea and TestSelect (b2e77d6), closes #100\n\n\n1.0.0 (2018-11-02)\nThis 1.0.0 version is based and tested on Angular 7.0.0, although it should run fine with Angular 6.\nFuture versions are not guaranteed to support Angular 6, though. We encourage you to ugrade.\nBug Fixes\n\ndocs: typo in readme (2e6bce7), closes #42\n\n\n0.2.3 (2018-06-17)\n\n0.2.2 (2018-06-04)\n\n0.2.1 (2018-06-04)\n\n0.2.0 (2018-05-28)\nBug Fixes\n\ncustom matchers always return false if no element (a282826)\nfix toHaveText on empty text contents (0172de3)\n\nFeatures\n\nadd custom matcher for class (39d1f3a)\nadd custom matcher for value (eee2e97)\ncustom matcher toBeChecked (065ab58)\ncustom matcher toContainText (#13) (e0a0472)\ncustom matcher toHaveSelectedIndex (e1163fb)\ncustom matcher toHaveSelectedLabel (2c49330)\ncustom matcher toHaveSelectedValue (085fd65)\ncustom matcher toHaveText (8036c22)\n\n\n0.1.0 (2018-05-25)\nVery first release :champagne:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^2.0.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/core : ^10.0.0\n        \n            @angular/platform-browser : ^10.0.0\n        \n            @angular/router : ^10.0.0\n        \n            rxjs : ^6.5.4\n    \n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            fakeRoute   (src/.../route.ts)\n                        \n                        \n                            fakeSnapshot   (src/.../route.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/route.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            fakeRoute\n                        \n                        \n                    \n                \n            \n            \n                \nfakeRoute(options)\n                \n            \n\n\n\n\n            \n                \n                    Creates a fake partial ActivatedRoute for tests.\nIf you pass params, then the created route's paramMap will contain the same values.\nThe same goes for queryParams and queryParamMap.\nIf you pass a parent route and a snapshot, and the passed snapshot doesn't have a parent, then the snapshot's\nparent will be set to the parent route snapshot. This allows the code under test to use\nroute.parent.snapshot or route.snapshot.parent.\nIf you pass a snapshot with a parent, but don't pass a parent or pass a parent without snapshot, then the route's\nparent snapshot will be set to the given snapshot's parent. This allows the code under test to use\nroute.parent.snapshot or route.snapshot.parent.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ActivatedRoute\n\n                    \n                    \n                        a partially populated, fake ActivatedRoute, depending on what you passed in\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fakeSnapshot\n                        \n                        \n                    \n                \n            \n            \n                \nfakeSnapshot(options)\n                \n            \n\n\n\n\n            \n                \n                    Creates a fake partial ActivatedRouteSnapshot for tests.\nIf you pass params, then the created snapshot's paramMap will contain the same values.\nThe same goes for queryParams and queryParamMap.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ActivatedRouteSnapshot\n\n                    \n                    \n                        a partially populated, fake ActivatedRoute, depending on what you passed in\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\nngx-speculoos\nngx-speculoos helps you write simpler, cleaner unit tests for your Angular components, based on the\npage object pattern. It also provides utilities to make writing Angular unit tests easier.\nThe library simply wraps the standard Angular ComponentFixture, and you should thus be \nable to understand and start using ngx-speculoos in just a few minutes if you already know\nhow to write Angular unit tests.\nWhy should you care?\nIf you've ever written tests like the following:\nit('should display French cities when selecting the country France', () => {\n  const countrySelect = fixture.nativeElement.querySelector('#country'); // countrySelect is of type any\n  countrySelect.selectedIndex = 12; // what is at index 12?\n  countrySelect.dispatchEvent(new Event('change')); // why do I need to do that?\n  fixture.detectChanges();\n\n  const city = fixture.nativeElement.querySelector('#city'); // city is of type any\n  expect(city).toBeTruthy();\n  expect(city.options.length).toBe(3);\n  expect(city.options[0].value).toBe('');\n  expect(city.options[0].label).toBe('');\n  expect(city.options[1].value).toBe('PARIS');\n  expect(city.options[1].label).toBe('Paris');\n  expect(city.options[2].value).toBe('LYON');\n  expect(city.options[2].label).toBe('Lyon');\n});\n\nit('should hide cities when selecting the empty country option', () => {\n  const countrySelect = fixture.nativeElement.querySelector('#country'); // I did that previously. What about DRY?\n  countrySelect.selectedIndex = 0;\n  countrySelect.dispatchEvent(new Event('change')); // why do I need to do that?\n  fixture.detectChanges(); // why do I need to do that?\n\n  expect(fixture.nativeElement.querySelector('#city')).toBeFalsy(); // I did that previously. What about DRY?\n});ngx-speculoos allows writing the above tests in a simpler, cleaner way:\n\nby using the page object pattern (which is optional, but recommended), you avoid repetitions. \nby using wrappers around elements, dispatching events and triggering change detection is automatic.\nby using wrappers around elements, you get useful additional methods to make tests easier to write and read.\nby using custom matchers, you get even simpler expectations and more readable error messages\nin any case you need them, you always have access to the fixture, the native elements, the debug elements, etc.\n\nclass MyComponentTester extends ComponentTester {\n  constructor() {\n    super(MyComponent);\n  }\n\n  get country() {\n    return this.select('#country'); // returns a TestSelect object, not any. Similar methods exist for inputs, buttons, etc.\n  }\n\n  get city() {\n    return this.select('#city'); // returns a TestSelect object, not any\n  }\n}\n\n[...]\n\nit('should display French cities when selecting the country France', () => {\n  tester.country.selectLabel('France'); // no dispatchEvent, no detectChanges needed\n\n  expect(tester.city.optionValues).toEqual(['', 'PARIS', 'LYON']);\n  expect(tester.city.optionLabels).toEqual(['', 'Paris', 'Lyon']);\n});\n\nit('should hide cities when selecting empty country option', () => {\n  tester.country.selectIndex(0); // no repetition of the selector, no dispatchEvent, no detectChanges needed\n\n  expect(tester.city).toBeFalsy(); // no repetition of the selector\n});Custom matchers\nIf you use Jasmine, we also have custom matchers for frequent expectations:\n  beforeEach(() => jasmine.addMatchers(speculoosMatchers));\n\n  it('should contain a pre-populated form', () => {\n    expect(tester.informationMessage).toContainText('Please check that everything is correct');\n    expect(tester.country).toHaveSelectedValue('FR');\n    expect(tester.city).toHaveSelectedLabel('Paris');\n    expect(tester.name).toHaveValue('Doe');\n    expect(tester.newsletter).toBeChecked();\n  });The complete matcher list includes:\n\ntoHaveClass(className: string)\ntoHaveValue(value: string)\ntoHaveText(textContent: string)\ntoContainText(textContent: string)\ntoBeChecked()\ntoHaveSelectedIndex(index: number)\ntoHaveSelectedValue(value: string)\ntoHaveSelectedLabel(label: string)\n\nInstallation\nUsing the CLI: ng add ngx-speculoos\nUsing npm: npm install --save-dev ngx-speculoos\nUsing yarn: yarn add --dev ngx-speculoos\nGetting started\n\nimport ComponentTester, and other needed classes from ngx-speculoos\nCreate a MyComponentTester class (in your my-component.spec.ts file, typically) extending \nComponentTester, as shown above.\nExpose getters (or methods, if you prefer) returning the elements used in your tests, using\none of the ComponentTester methods (element, elements, input, select, textarea, button).\nSee the API documentation for details\nWrite your tests, as shown above, benefitting from the additional methods on the TestXxx classes.\nIf needed, you can always get the fixture, componentInstance, debugElement, nativeElement, etc.\nfrom the ComponentTester, and the nativeElement from each TestXxx wrapper.\nIf you like our custom matchers, add them in a beforeEach block as shown above, and enjoy.\n\nIssues, questions\nPlease, provide feedback by filing issues, or by submitting pull requests, to the Github Project.\nComplete example\nYou can look at a minimal complete example in the demo project.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2018 Ninja Squad\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            speculoosMatchers   (src/.../matchers.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/matchers.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            speculoosMatchers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     jasmine.CustomMatcherFactories\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  /**\n   * Checks that the receiver is a TestElement wrapping a DOM element and as the given CSS class\n   */\n  toHaveClass: (util: jasmine.MatchersUtil, customEqualityTesters: ReadonlyArray): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: unknown, expected: string) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check class '${expected}' on element, but element was falsy` };\n      }\n      if (!(el instanceof TestElement)) {\n        return { pass: false, message: `Expected to check class '${expected}' on element, but element was not a TestElement` };\n      }\n      const actual = el.classes;\n      const pass = actual.indexOf(expected) !== -1;\n      const message = `Expected element to ${isNegative ? 'not ' : ''}have class '${expected}', `\n      + `but had ${actual.length ? '\\'' + actual.join(', ') + '\\'' : 'none'}`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: unknown, expected: string): jasmine.CustomMatcherResult => {\n        return assert(false, el, expected);\n      },\n      negativeCompare: (el: unknown, expected: string): jasmine.CustomMatcherResult => {\n        return assert(true, el, expected);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestInput or a TestTextArea and has the given value\n   */\n  toHaveValue: (util: jasmine.MatchersUtil, customEqualityTesters: ReadonlyArray): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: unknown, expected: string) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check value '${expected}' on element, but element was falsy` };\n      }\n      if (!(el instanceof TestInput) && !(el instanceof TestTextArea)) {\n        return {\n          pass: false,\n          message: `Expected to check value '${expected}' on element, but element was neither a TestInput nor a TestTextArea`\n        };\n      }\n      const actual = el.value;\n      const pass = actual === expected;\n      const message = `Expected element to ${isNegative ? 'not ' : ''}have value '${expected}', but had value '${actual}'`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: unknown, expected: string): jasmine.CustomMatcherResult => {\n        return assert(false, el, expected);\n      },\n      negativeCompare: (el: unknown, expected: string): jasmine.CustomMatcherResult => {\n        return assert(true, el, expected);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestElement wrapping a DOM element and has the exact given textContent\n   */\n  toHaveText: (util: jasmine.MatchersUtil, customEqualityTesters: ReadonlyArray): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: unknown, expected: string) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check text '${expected}' on element, but element was falsy` };\n      }\n      if (!(el instanceof TestElement)) {\n        return { pass: false, message: `Expected to check text '${expected}' on element, but element was not a TestElement` };\n      }\n      const actual = el.textContent;\n      const pass = actual === expected;\n      const message = `Expected element to ${isNegative ? 'not ' : ''}have text '${expected}', but had '${actual}'`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: unknown, expected: string): jasmine.CustomMatcherResult => {\n        return assert(false, el, expected);\n      },\n      negativeCompare: (el: unknown, expected: string): jasmine.CustomMatcherResult => {\n        return assert(true, el, expected);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestElement wrapping a DOM element and contains the given textContent\n   */\n  toContainText: (\n    util: jasmine.MatchersUtil,\n    customEqualityTesters: ReadonlyArray\n  ): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: unknown, expected: string) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check text '${expected}' on element, but element was falsy` };\n      }\n      if (!(el instanceof TestElement)) {\n        return { pass: false, message: `Expected to check text '${expected}' on element, but element was not a TestElement` };\n      }\n      const actual = el.textContent;\n      if (!actual) {\n        return {\n          pass: isNegative,\n          message: `Expected element to ${isNegative ? 'not ' : ''}contain text '${expected}', but had no text`\n        };\n      }\n      const pass = actual.indexOf(expected) !== -1;\n      const message = `Expected element to ${isNegative ? 'not ' : ''}contain text '${expected}', but had text '${actual}'`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: unknown, expected: string): jasmine.CustomMatcherResult => {\n        return assert(false, el, expected);\n      },\n      negativeCompare: (el: unknown, expected: string): jasmine.CustomMatcherResult => {\n        return assert(true, el, expected);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestElement wrapping a DOM element and contains the given textContent\n   */\n  toBeChecked: (util: jasmine.MatchersUtil, customEqualityTesters: ReadonlyArray): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: unknown) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check if element was checked, but element was falsy` };\n      }\n      if (!(el instanceof TestInput)) {\n        return { pass: false, message: `Expected to check if element was checked, but element was not a TestInput` };\n      }\n      const pass = el.checked;\n      const message = `Expected element to be ${isNegative ? 'not ' : ''}checked, but was${!isNegative ? ' not' : ''}`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: unknown): jasmine.CustomMatcherResult => {\n        return assert(false, el);\n      },\n      negativeCompare: (el: unknown): jasmine.CustomMatcherResult => {\n        return assert(true, el);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestSelect wrapping a DOM element and has the given selected index\n   */\n  toHaveSelectedIndex: (\n    util: jasmine.MatchersUtil,\n    customEqualityTesters: ReadonlyArray\n  ): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: unknown, expected: number) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check selected index ${expected} on element, but element was falsy` };\n      }\n      if (!(el instanceof TestSelect)) {\n        return { pass: false, message: `Expected to check selected index ${expected} on element, but element was not a TestSelect` };\n      }\n      const actual = el.selectedIndex;\n      const pass = actual === expected;\n      const message = `Expected element to ${isNegative ? 'not ' : ''}have selected index ${expected}, but had ${actual}`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: unknown, expected: number): jasmine.CustomMatcherResult => {\n        return assert(false, el, expected);\n      },\n      negativeCompare: (el: unknown, expected: number): jasmine.CustomMatcherResult => {\n        return assert(true, el, expected);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestSelect wrapping a DOM element with the selected option's value equal to the given value\n   */\n  toHaveSelectedValue: (\n    util: jasmine.MatchersUtil,\n    customEqualityTesters: ReadonlyArray\n  ): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: unknown, expected: string) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check selected value '${expected}' on element, but element was falsy` };\n      }\n      if (!(el instanceof TestSelect)) {\n        return { pass: false, message: `Expected to check selected value '${expected}' on element, but element was not a TestSelect` };\n      }\n      const actual = el.selectedValue;\n      const pass = actual === expected;\n      const message = `Expected element to ${isNegative ? 'not ' : ''}have selected value '${expected}', but had '${actual}'`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: unknown, expected: string): jasmine.CustomMatcherResult => {\n        return assert(false, el, expected);\n      },\n      negativeCompare: (el: unknown, expected: string): jasmine.CustomMatcherResult => {\n        return assert(true, el, expected);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestSelect wrapping a DOM element with the selected option's label equal to the given label\n   */\n  toHaveSelectedLabel: (\n    util: jasmine.MatchersUtil,\n    customEqualityTesters: ReadonlyArray\n  ): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: unknown, expected: string) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check selected label '${expected}' on element, but element was falsy` };\n      }\n      if (!(el instanceof TestSelect)) {\n        return { pass: false, message: `Expected to check selected label '${expected}' on element, but element was not a TestSelect` };\n      }\n      const actual = el.selectedLabel;\n      const pass = actual === expected;\n      const message = `Expected element to ${isNegative ? 'not ' : ''}have selected label '${expected}', but had '${actual}'`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: unknown, expected: string): jasmine.CustomMatcherResult => {\n        return assert(false, el, expected);\n      },\n      negativeCompare: (el: unknown, expected: string): jasmine.CustomMatcherResult => {\n        return assert(true, el, expected);\n      }\n    };\n  }\n}\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
