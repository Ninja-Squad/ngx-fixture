var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.2.0","fields":["title","body"],"fieldVectors":[["title/classes/ComponentTester.html",[0,0.136,1,0.559]],["body/classes/ComponentTester.html",[0,0.127,1,0.856,2,0.494,3,0.494,4,0.274,5,4.495,6,1.542,7,1.285,8,2.379,9,2.379,10,2.379,11,1.866,12,1.068,13,1.866,14,3.409,15,2.379,16,1.866,17,0.927,18,1.243,19,1.073,20,1.528,21,0.819,22,0.887,23,1.244,24,1.419,25,1.343,26,0.215,27,1.419,28,3.701,29,1.101,30,2.905,31,2.578,32,1.866,33,1.439,34,1.101,35,1.347,36,0.412,37,2.379,38,1.072,39,0.069,40,1.425,41,1.542,42,1.212,43,1.237,44,3.53,45,3.266,46,1.528,47,2.379,48,1.124,49,1.101,50,0.907,51,3.266,52,1.542,53,1.542,54,0.943,55,0.905,56,1.472,57,1.542,58,1.347,59,0.066,60,1.569,61,1.568,62,1.319,63,1.568,64,1.409,65,1.451,66,0.868,67,0.776,68,1.771,69,2.379,70,1.542,71,2.905,72,1.542,73,2.379,74,2.278,75,1.542,76,0.636,77,0.524,78,0.636,79,1.542,80,1.542,81,0.494,82,0.905,83,1.542,84,0.524,85,1.243,86,1.101,87,1.046,88,0.905,89,0.905,90,1.542,91,1.285,92,0.905,93,0.636,94,0.905,95,1.542,96,0.905,97,1.542,98,0.64,99,0.905,100,1.542,101,0.776,102,0.587,103,1.528,104,1.209,105,1.542,106,1.866,107,0.762,108,2.379,109,2.379,110,1.866,111,1.542,112,1.542,113,2.379,114,0.943,115,1.542,116,1.542,117,0.762,118,1.073,119,1.542,120,0.412,121,1.209,122,1.209,123,1.811,124,0.494,125,0.826,126,1.542,127,0.826,128,1.542,129,1.542,130,1.209,131,1.542,132,1.542,133,1.542,134,1.542,135,1.542,136,1.542,137,1.542,138,1.542,139,1.542,140,1.542,141,1.542,142,1.542,143,1.542,144,0.032]],["title/classes/TestButton.html",[0,0.136,67,0.679]],["body/classes/TestButton.html",[0,0.217,1,1.003,2,1.06,3,1.06,4,0.59,7,1.06,12,0.963,19,1.217,22,0.811,26,0.462,29,1.217,36,0.885,38,0.73,39,0.068,40,1.4,43,0.885,48,0.885,49,0.885,50,0.73,54,0.963,59,0.054,66,0.721,67,1.082,76,0.885,77,0.73,78,0.885,81,1.06,102,1.261,114,1.299,118,1.169,120,0.885,124,1.06,144,0.054,145,1.664,146,3.313,147,1.082,148,1.296,149,1.541,150,1.296,151,1.296,152,1.541,153,1.734,154,2.055,155,1.541,156,3.313,157,1.541,158,1.495,159,1.775,160,4.556,161,3.313,162,3.313,163,4.05,164,1.495,165,1.495,166,3.313]],["title/classes/TestElement.html",[0,0.136,23,0.679]],["body/classes/TestElement.html",[0,0.205,1,0.743,2,0.525,3,0.525,4,0.292,7,1.31,12,1.058,17,0.743,18,0.949,19,1.094,21,0.816,22,0.893,23,1.178,24,1.283,25,1.283,26,0.229,27,1.148,29,1.12,33,1.456,34,1.12,35,1.369,36,0.438,38,1.044,39,0.069,40,1.443,42,1.241,43,0.438,48,1.143,49,1.225,50,0.942,54,0.875,55,0.949,56,1.528,58,1.369,59,0.067,60,1.577,61,1.596,62,1.342,63,1.596,64,1.428,65,1.487,66,0.871,67,0.806,68,1.787,76,0.901,77,0.743,78,0.901,81,0.798,82,0.949,84,0.549,85,1.283,86,1.12,87,1.079,88,0.949,89,0.949,91,1.411,92,0.949,93,0.666,94,0.949,96,0.949,98,0.665,99,0.949,101,0.806,102,0.624,103,1.601,104,1.285,107,0.798,114,1.192,117,0.798,118,1.061,120,0.438,121,1.955,122,1.955,123,1.792,124,0.525,127,0.878,144,0.033,145,1.731,147,0.666,148,0.798,149,1.454,150,0.798,151,0.798,155,0.624,157,1.148,167,1.285,168,1.361,169,1.125,170,0.949,171,1.125,172,1.639,173,1.639,174,1.125,175,1.639,176,1.639,177,1.125,178,1.31,179,1.639,180,1.283,181,1.125,182,1.639,183,1.639,184,1.639,185,1.639,186,1.639,187,1.639,188,1.639,189,1.955,190,1.639,191,1.639,192,1.336,193,1.955,194,1.639,195,1.639,196,1.639,197,1.639,198,1.639,199,1.639,200,1.639,201,1.639,202,1.639,203,1.639,204,1.639,205,1.955,206,1.639,207,1.639,208,1.639,209,1.639,210,1.639,211,1.639,212,1.639,213,1.639,214,1.639]],["title/classes/TestHtmlElement.html",[0,0.136,153,0.967]],["body/classes/TestHtmlElement.html",[0,0.165,1,0.854,2,0.703,3,0.703,4,0.391,7,1.423,12,1.051,17,0.68,18,1.175,19,1.132,21,0.775,22,0.889,23,1.293,24,1.175,25,1.175,26,0.306,27,1.175,29,1.092,33,1.423,34,1.092,35,1.308,36,0.587,38,1.061,39,0.068,40,1.496,42,1.207,43,0.587,48,1.224,49,1.259,50,1.008,54,0.787,55,0.835,56,1.535,58,1.308,59,0.066,60,1.555,61,1.475,62,1.241,63,1.475,64,1.357,65,1.423,66,0.844,67,0.587,68,1.743,76,1.036,77,0.854,78,1.036,81,1.144,82,0.835,84,0.483,85,1.175,86,1.036,87,0.988,88,0.835,89,0.835,91,1.241,92,0.835,93,0.587,94,0.835,96,0.835,98,0.483,99,0.835,101,0.587,107,0.988,114,1.259,117,0.703,118,0.955,120,0.587,124,0.703,144,0.041,145,1.36,147,0.825,148,0.988,149,1.475,150,0.988,151,0.988,152,1.175,153,1.175,154,1.912,155,1.175,157,1.175,158,2.066,164,1.843,165,0.99,167,1.721,168,1.393,169,1.393,170,1.175,171,1.393,174,0.99,177,0.99,178,1.308,180,1.175,181,0.99,205,1.721,215,2.195,216,2.195,217,2.195,218,2.195,219,2.195,220,2.195,221,2.195,222,2.195,223,2.195,224,2.195,225,2.195,226,2.195,227,2.195]],["title/classes/TestInput.html",[0,0.136,86,0.679]],["body/classes/TestInput.html",[0,0.15,1,0.801,2,0.612,3,0.612,4,0.34,7,1.399,12,1.07,17,0.616,18,1.385,19,1.081,21,0.743,22,0.878,23,1.035,24,1.064,25,1.064,26,0.267,27,1.064,29,1.035,33,1.555,34,1.035,35,1.239,36,0.511,38,1.07,39,0.068,40,1.513,42,1.168,43,0.511,48,1.203,49,1.239,50,0.991,54,0.728,55,0.727,56,1.528,58,1.239,59,0.065,60,1.528,61,1.385,62,1.165,63,1.385,64,1.295,65,1.371,66,0.85,67,0.511,68,1.69,76,1.168,77,1.012,78,1.168,81,1.295,82,0.727,84,1.003,85,1.064,86,1.081,87,0.895,88,0.727,89,0.727,91,1.165,92,0.727,93,0.511,94,0.727,96,0.727,98,0.421,99,0.727,101,0.511,102,0.727,107,0.895,114,1.229,117,0.612,118,0.883,120,0.511,123,0.862,124,0.612,127,1.498,144,0.037,145,1.59,147,0.747,148,0.895,149,1.385,150,0.895,151,0.895,152,1.064,153,1.764,154,1.641,155,1.064,157,1.064,158,2.031,159,1.024,164,1.492,165,0.862,168,1.261,169,1.261,170,1.064,171,1.261,174,0.862,177,0.862,178,1.441,180,1.63,181,0.862,228,1.911,229,2.852,230,2.193,231,4.045,232,1.911,233,1.227,234,1.911,235,2.193,236,1.911,237,1.795,238,1.911,239,1.227,240,1.227,241,1.227,242,1.227,243,1.227,244,1.227,245,1.227,246,1.227,247,1.227,248,1.499,249,1.911,250,1.911,251,1.911,252,2.193,253,1.499,254,3.306,255,1.911,256,2.193,257,1.227]],["title/classes/TestSelect.html",[0,0.136,98,0.559]],["body/classes/TestSelect.html",[0,0.137,1,0.754,2,0.54,3,0.54,4,0.3,7,1.322,12,1.033,17,0.562,18,0.97,19,1.033,21,0.714,22,0.868,23,0.982,24,0.97,25,0.97,26,0.611,27,0.97,29,0.982,33,1.322,34,1.295,35,1.177,36,0.451,38,1.062,39,0.069,40,1.516,42,1.254,43,0.451,48,1.199,49,1.231,50,1.081,54,0.677,55,0.643,56,1.539,58,1.353,59,0.064,60,1.502,61,1.572,62,1.096,63,1.303,64,1.237,65,1.322,66,0.858,67,0.451,68,1.753,76,1.13,77,1.007,78,1.13,81,1.237,82,0.643,84,0.931,85,0.97,86,0.915,87,0.816,88,0.643,89,0.643,91,1.379,92,0.643,93,0.451,94,0.643,96,0.643,98,0.677,99,0.643,101,0.451,102,0.643,107,0.816,114,1.199,117,0.54,118,0.821,120,0.451,124,0.54,125,1.367,144,0.034,145,1.666,147,0.681,148,0.816,149,1.303,150,0.816,151,0.816,152,0.97,153,1.725,154,1.545,155,0.97,157,0.97,158,1.975,159,0.905,164,1.386,165,0.762,168,1.15,169,1.15,170,0.97,171,1.15,174,0.762,177,0.762,178,1.401,180,1.572,181,0.762,192,1.97,233,1.084,239,1.084,240,1.084,241,1.084,242,1.084,243,1.084,244,1.084,245,1.084,246,1.084,247,1.084,256,1.324,258,1.689,259,2.55,260,2.55,261,2.55,262,1.689,263,2.55,264,3.147,265,1.689,266,2.55,267,1.689,268,3.433,269,3.424,270,3.424,271,3.424,272,2.55,273,1.689,274,2.55,275,1.689,276,1.689,277,2.55,278,1.689,279,1.689,280,1.689,281,1.689,282,1.689,283,1.689,284,1.689,285,1.689,286,2.55,287,1.689,288,1.689,289,2.55,290,1.689,291,1.689,292,2.55,293,1.689,294,2,295,2.55,296,1.689,297,1.689,298,2.55,299,2.55,300,1.689,301,1.689,302,1.689]],["title/classes/TestTextArea.html",[0,0.136,101,0.679]],["body/classes/TestTextArea.html",[0,0.159,1,0.832,2,0.663,3,0.663,4,0.368,7,1.427,12,1.058,17,0.653,18,1.128,19,1.111,21,0.762,22,0.883,23,1.068,24,1.128,25,1.128,26,0.289,27,1.128,29,1.068,33,1.448,34,1.068,35,1.493,36,0.553,38,1.066,39,0.068,40,1.504,42,1.191,43,0.553,48,1.223,49,1.256,50,1.008,54,0.762,55,0.788,56,1.544,58,1.279,59,0.066,60,1.544,61,1.437,62,1.209,63,1.437,64,1.331,65,1.402,66,0.847,67,0.553,68,1.721,76,1.068,77,0.88,78,1.068,81,1.209,82,0.788,84,1.018,85,1.128,86,1.009,87,0.948,88,0.788,89,0.788,91,1.209,92,0.788,93,0.553,94,0.788,96,0.788,98,0.456,99,0.788,101,0.925,102,0.788,107,0.948,114,1.246,117,0.663,118,0.925,120,0.553,123,0.934,124,0.663,127,1.588,144,0.04,145,1.437,147,0.792,148,0.948,149,1.437,150,0.948,151,0.948,152,1.128,153,1.788,154,1.704,155,1.128,157,1.128,158,2.065,159,1.11,164,1.561,165,0.934,168,1.337,169,1.337,170,1.128,171,1.337,174,0.934,177,0.934,178,1.37,180,1.437,181,0.934,230,2.324,233,1.33,235,2.324,237,1.903,239,1.33,240,1.33,241,1.33,242,1.33,243,1.33,244,1.33,245,1.33,246,1.33,247,1.33,248,1.624,252,2.324,253,1.624,303,2.071,304,2.071,305,2.071,306,2.071]],["title/changelog.html",[21,0.382,307,1.151,308,2.147]],["body/changelog.html",[0,0.187,4,0.622,22,0.622,39,0.056,58,1.119,59,0.056,66,0.622,77,0.922,84,0.77,93,0.935,144,0.056,192,1.874,193,2.743,257,2.245,309,3.497,310,3.497,311,2.743,312,2.245,313,2.743,314,2.743,315,3.497,316,3.497,317,3.497,318,3.497,319,3.639,320,4.184,321,4.184,322,3.497,323,3.497,324,4.184,325,3.497,326,3.497,327,4.184,328,3.873,329,3.873,330,2.743,331,3.497,332,3.281,333,3.497,334,3.497,335,3.281,336,3.497,337,3.497,338,2.743,339,3.497,340,2.743,341,3.497,342,3.497,343,2.743,344,3.497,345,2.743,346,3.497,347,2.743,348,3.497,349,3.497,350,3.497,351,3.497,352,3.497,353,3.497,354,3.497]],["title/dependencies.html",[355,2.147,356,2.385]],["body/dependencies.html",[39,0.065,59,0.06,120,1.041,144,0.06,356,3.057,357,3.898,358,4.683,359,3.898,360,3.898]],["title/miscellaneous/functions.html",[361,1.151,362,2.385]],["body/miscellaneous/functions.html",[17,0.906,20,2.642,26,0.474,31,2.951,39,0.062,42,0.909,46,3.108,48,1.099,49,1.099,50,1.012,54,1.012,59,0.055,84,0.906,123,1.856,144,0.055,237,2.642,361,1.822,362,2.667,363,4.114,364,4.114,365,4.114,366,3.4,367,3.4,368,4.114,369,4.114,370,4.114,371,3.4,372,4.114,373,4.114,374,2.642,375,4.597,376,4.114,377,4.114,378,4.114,379,4.917,380,4.114,381,4.784,382,3.4,383,4.424,384,4.114,385,4.114,386,4.114,387,4.114,388,3.4,389,2.667,390,3.4,391,3.4]],["title/index.html",[21,0.382,26,0.3,307,1.151]],["body/index.html",[0,0.218,1,0.936,4,0.593,11,1.923,12,0.54,13,3.188,14,1.923,16,1.923,17,1.041,19,1.136,20,1.574,21,0.436,22,0.798,26,0.342,28,2.614,29,0.891,31,1.574,32,2.614,33,1.067,34,1.136,35,0.785,36,0.655,38,0.734,39,0.068,43,0.655,50,0.834,54,1.006,59,0.045,60,1.067,62,0.785,66,0.757,76,0.655,77,0.54,78,0.655,87,0.785,93,0.891,98,0.734,103,2.141,106,1.923,110,1.923,114,0.655,117,0.785,118,0.655,125,2.03,144,0.045,147,0.891,148,1.067,150,0.785,151,1.404,152,1.269,170,1.269,178,0.785,180,0.933,229,1.574,294,1.923,307,1.787,311,1.923,312,1.574,313,1.923,314,1.923,328,2.971,329,2.971,330,2.614,335,2.614,374,1.574,392,4.487,393,4.487,394,3.788,395,3.334,396,3.788,397,2.452,398,3.334,399,4.065,400,3.334,401,1.923,402,3.334,403,2.452,404,2.452,405,2.452,406,2.452,407,2.452,408,2.452,409,2.452,410,2.452,411,2.452,412,2.452,413,1.923,414,4.252,415,3.334,416,3.334,417,4.487,418,4.252,419,3.334,420,3.788,421,3.334,422,3.334,423,3.334,424,3.334,425,3.334,426,4.566,427,3.334,428,2.452,429,2.452,430,2.452,431,2.452,432,2.452,433,2.452,434,2.452,435,2.452,436,2.452,437,3.334,438,3.334,439,3.334,440,2.452,441,3.188,442,2.452,443,2.452,444,2.452,445,3.788,446,3.788,447,3.334,448,2.452,449,2.452,450,2.452,451,2.452,452,2.614,453,2.452,454,2.452,455,1.923,456,2.452,457,3.788,458,3.334,459,2.452,460,2.452,461,2.452,462,2.452,463,2.452,464,2.452,465,2.452,466,3.334,467,3.334,468,2.452,469,2.452,470,2.452,471,2.452,472,2.452,473,3.334,474,2.452,475,2.452,476,2.452,477,2.452,478,2.452,479,2.452,480,2.452,481,2.452,482,2.452,483,2.452,484,2.452,485,3.334,486,3.334,487,2.452,488,3.334,489,3.334,490,2.452,491,2.452,492,3.788,493,2.452,494,2.452,495,2.452,496,2.452,497,2.452,498,2.452,499,3.334,500,2.452,501,2.452,502,2.452,503,3.334,504,2.452,505,2.452,506,2.452,507,2.452,508,2.452,509,2.452,510,2.452]],["title/license.html",[21,0.382,307,1.151,511,1.684]],["body/license.html",[4,0.614,17,0.914,39,0.056,59,0.056,144,0.056,147,0.921,178,1.104,312,2.214,319,2.704,389,3.49,413,2.704,441,2.704,511,2.704,512,3.448,513,4.451,514,3.448,515,3.448,516,3.448,517,4.149,518,3.448,519,3.448,520,3.448,521,3.448,522,4.149,523,3.448,524,4.618,525,4.928,526,3.448,527,4.149,528,3.448,529,4.451,530,4.149,531,3.448,532,3.448,533,3.448,534,3.448,535,3.448,536,3.448,537,3.448,538,3.448,539,3.448,540,3.448,541,3.448,542,3.448,543,4.149,544,4.149,545,3.448,546,3.448,547,4.149,548,3.448,549,3.448,550,3.448,551,3.448,552,3.448,553,3.448,554,3.448,555,3.448,556,3.448,557,3.448,558,3.448,559,3.448,560,3.448,561,3.448,562,3.448,563,3.448,564,3.448,565,3.448,566,3.448,567,3.448,568,3.448,569,3.448]],["title/modules.html",[570,2.678]],["body/modules.html",[39,0.06,59,0.06,144,0.06,570,3.106]],["title/overview.html",[571,2.678]],["body/overview.html",[0,0.211,39,0.06,59,0.06,144,0.06,571,3.096,572,3.948]],["title/miscellaneous/variables.html",[361,1.151,573,2.385]],["body/miscellaneous/variables.html",[0,0.17,12,0.841,22,0.88,23,1.109,26,0.481,34,1.148,38,0.323,39,0.069,42,1.055,46,3.178,56,1.46,59,0.031,64,1.47,65,0.469,66,0.881,74,3.096,84,0.931,86,0.921,91,1.264,98,0.894,101,0.752,107,1.222,125,2.579,130,3.182,144,0.031,189,2.207,192,2.174,229,3.055,257,2.884,264,2.207,268,2.704,332,1.15,338,1.15,340,1.15,343,1.15,345,1.15,347,1.15,361,0.786,374,2.041,401,3.096,452,3.968,455,3.791,573,1.15,574,2.814,575,1.466,576,1.466,577,2.288,578,1.466,579,3.948,580,1.466,581,3.948,582,3.948,583,3.948,584,3.948,585,4.742,586,4.985,587,3.948,588,1.466,589,2.288,590,2.288,591,1.466,592,1.466,593,1.466,594,3.948,595,4.491,596,3.948,597,3.948,598,3.948,599,1.466,600,1.466,601,1.466,602,2.288,603,1.466,604,1.466,605,1.466,606,2.288,607,2.288,608,1.466,609,1.466]]],"invertedIndex":[["",{"_index":39,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":294,"title":{},"body":{"classes/TestSelect.html":{},"index.html":{}}}],["0.1.0",{"_index":350,"title":{},"body":{"changelog.html":{}}}],["0.2.0",{"_index":323,"title":{},"body":{"changelog.html":{}}}],["0.2.1",{"_index":322,"title":{},"body":{"changelog.html":{}}}],["0.2.2",{"_index":318,"title":{},"body":{"changelog.html":{}}}],["0172de3",{"_index":333,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":321,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":324,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":320,"title":{},"body":{"changelog.html":{}}}],["065ab58",{"_index":339,"title":{},"body":{"changelog.html":{}}}],["085fd65",{"_index":348,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["12",{"_index":423,"title":{},"body":{"index.html":{}}}],["13",{"_index":341,"title":{},"body":{"changelog.html":{}}}],["2018",{"_index":319,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["25",{"_index":351,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":325,"title":{},"body":{"changelog.html":{}}}],["2c49330",{"_index":346,"title":{},"body":{"changelog.html":{}}}],["39d1f3a",{"_index":336,"title":{},"body":{"changelog.html":{}}}],["6.0.0",{"_index":358,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":572,"title":{},"body":{"overview.html":{}}}],["8036c22",{"_index":349,"title":{},"body":{"changelog.html":{}}}],["a282826",{"_index":331,"title":{},"body":{"changelog.html":{}}}],["abov",{"_index":441,"title":{},"body":{"index.html":{},"license.html":{}}}],["access",{"_index":16,"title":{},"body":{"classes/ComponentTester.html":{},"index.html":{}}}],["accessor",{"_index":102,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["action",{"_index":563,"title":{},"body":{"license.html":{}}}],["activatedrout",{"_index":371,"title":{},"body":{"miscellaneous/functions.html":{}}}],["activatedroutesnapshot",{"_index":391,"title":{},"body":{"miscellaneous/functions.html":{}}}],["actual",{"_index":64,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/variables.html":{}}}],["actual.indexof(expect",{"_index":589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["actual.join",{"_index":592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["actual.length",{"_index":591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["add",{"_index":335,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["addit",{"_index":148,"title":{},"body":{"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["allow",{"_index":20,"title":{},"body":{"classes/ComponentTester.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["alreadi",{"_index":408,"title":{},"body":{"index.html":{}}}],["alway",{"_index":330,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["and/or",{"_index":537,"title":{},"body":{"license.html":{}}}],["angular",{"_index":13,"title":{},"body":{"classes/ComponentTester.html":{},"index.html":{}}}],["angular/cor",{"_index":120,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"dependencies.html":{}}}],["angular/core/test",{"_index":119,"title":{},"body":{"classes/ComponentTester.html":{}}}],["angular/rout",{"_index":359,"title":{},"body":{"dependencies.html":{}}}],["api",{"_index":11,"title":{},"body":{"classes/ComponentTester.html":{},"index.html":{}}}],["arg",{"_index":51,"title":{},"body":{"classes/ComponentTester.html":{}}}],["aris",{"_index":567,"title":{},"body":{"license.html":{}}}],["around",{"_index":447,"title":{},"body":{"index.html":{}}}],["array",{"_index":91,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/variables.html":{}}}],["array).map(opt",{"_index":299,"title":{},"body":{"classes/TestSelect.html":{}}}],["array.prototype.slice.call(this.nativeelement.classlist",{"_index":207,"title":{},"body":{"classes/TestElement.html":{}}}],["array.prototype.slice.call(this.nativeelement.opt",{"_index":298,"title":{},"body":{"classes/TestSelect.html":{}}}],["assert",{"_index":584,"title":{},"body":{"miscellaneous/variables.html":{}}}],["assert(fals",{"_index":596,"title":{},"body":{"miscellaneous/variables.html":{}}}],["assert(tru",{"_index":598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["associ",{"_index":526,"title":{},"body":{"license.html":{}}}],["attr",{"_index":169,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["attr(nam",{"_index":174,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["attribut",{"_index":149,"title":{},"body":{"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["author",{"_index":556,"title":{},"body":{"license.html":{}}}],["automat",{"_index":448,"title":{},"body":{"index.html":{}}}],["avoid",{"_index":444,"title":{},"body":{"index.html":{}}}],["base",{"_index":397,"title":{},"body":{"index.html":{}}}],["beforeeach",{"_index":473,"title":{},"body":{"index.html":{}}}],["benefit",{"_index":498,"title":{},"body":{"index.html":{}}}],["block",{"_index":501,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":74,"title":{},"body":{"classes/ComponentTester.html":{},"miscellaneous/variables.html":{}}}],["bug",{"_index":326,"title":{},"body":{"changelog.html":{}}}],["button",{"_index":29,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["button(selector",{"_index":55,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["button.t",{"_index":146,"title":{},"body":{"classes/TestButton.html":{}}}],["button.ts:16",{"_index":162,"title":{},"body":{"classes/TestButton.html":{}}}],["button.ts:8",{"_index":156,"title":{},"body":{"classes/TestButton.html":{}}}],["c",{"_index":514,"title":{},"body":{"license.html":{}}}],["care",{"_index":410,"title":{},"body":{"index.html":{}}}],["case",{"_index":456,"title":{},"body":{"index.html":{}}}],["champagn",{"_index":354,"title":{},"body":{"changelog.html":{}}}],["chang",{"_index":77,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"index.html":{}}}],["changelog",{"_index":308,"title":{"changelog.html":{}},"body":{}}],["charg",{"_index":521,"title":{},"body":{"license.html":{}}}],["check",{"_index":229,"title":{},"body":{"classes/TestInput.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["checknochang",{"_index":79,"title":{},"body":{"classes/ComponentTester.html":{}}}],["citi",{"_index":417,"title":{},"body":{"index.html":{}}}],["claim",{"_index":559,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["cleaner",{"_index":395,"title":{},"body":{"index.html":{}}}],["click",{"_index":154,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["code",{"_index":384,"title":{},"body":{"miscellaneous/functions.html":{}}}],["commit",{"_index":316,"title":{},"body":{"changelog.html":{}}}],["compar",{"_index":594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["compon",{"_index":43,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["component.spec.t",{"_index":490,"title":{},"body":{"index.html":{}}}],["componentfixtur",{"_index":14,"title":{},"body":{"classes/ComponentTester.html":{},"index.html":{}}}],["componentinst",{"_index":110,"title":{},"body":{"classes/ComponentTester.html":{},"index.html":{}}}],["componenttest",{"_index":1,"title":{"classes/ComponentTester.html":{}},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["componenttester(fixtur",{"_index":128,"title":{},"body":{"classes/ComponentTester.html":{}}}],["componenttyp",{"_index":72,"title":{},"body":{"classes/ComponentTester.html":{}}}],["condit",{"_index":542,"title":{},"body":{"license.html":{}}}],["connect",{"_index":569,"title":{},"body":{"license.html":{}}}],["const",{"_index":125,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestSelect.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":36,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["constructor(arg",{"_index":37,"title":{},"body":{"classes/ComponentTester.html":{}}}],["constructor(protect",{"_index":197,"title":{},"body":{"classes/TestElement.html":{}}}],["constructor(test",{"_index":155,"title":{},"body":{"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["contain",{"_index":374,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["content",{"_index":193,"title":{},"body":{"classes/TestElement.html":{},"changelog.html":{}}}],["contract",{"_index":564,"title":{},"body":{"license.html":{}}}],["copi",{"_index":524,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":513,"title":{},"body":{"license.html":{}}}],["correct",{"_index":480,"title":{},"body":{"index.html":{}}}],["countri",{"_index":418,"title":{},"body":{"index.html":{}}}],["countryselect",{"_index":420,"title":{},"body":{"index.html":{}}}],["countryselect.dispatchevent(new",{"_index":424,"title":{},"body":{"index.html":{}}}],["countryselect.selectedindex",{"_index":422,"title":{},"body":{"index.html":{}}}],["creat",{"_index":31,"title":{},"body":{"classes/ComponentTester.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["create(componenttyp",{"_index":69,"title":{},"body":{"classes/ComponentTester.html":{}}}],["css",{"_index":65,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/variables.html":{}}}],["custom",{"_index":328,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["customequalitytest",{"_index":582,"title":{},"body":{"miscellaneous/variables.html":{}}}],["damag",{"_index":560,"title":{},"body":{"license.html":{}}}],["deal",{"_index":527,"title":{},"body":{"license.html":{}}}],["debug",{"_index":117,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["debugel",{"_index":114,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["default",{"_index":578,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defin",{"_index":40,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["deleg",{"_index":45,"title":{},"body":{"classes/ComponentTester.html":{}}}],["depend",{"_index":356,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["descript",{"_index":7,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["detail",{"_index":497,"title":{},"body":{"index.html":{}}}],["detect",{"_index":78,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["detectchang",{"_index":32,"title":{},"body":{"classes/ComponentTester.html":{},"index.html":{}}}],["detectchanges(checknochang",{"_index":73,"title":{},"body":{"classes/ComponentTester.html":{}}}],["dev",{"_index":488,"title":{},"body":{"index.html":{}}}],["directli",{"_index":47,"title":{},"body":{"classes/ComponentTester.html":{}}}],["disabl",{"_index":160,"title":{},"body":{"classes/TestButton.html":{}}}],["dispatch",{"_index":180,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["dispatchev",{"_index":170,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["dispatchevent(ev",{"_index":177,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["dispatcheventoftyp",{"_index":171,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["dispatcheventoftype(typ",{"_index":181,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["display",{"_index":415,"title":{},"body":{"index.html":{}}}],["distribut",{"_index":535,"title":{},"body":{"license.html":{}}}],["document",{"_index":312,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["doesn't",{"_index":382,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dom",{"_index":107,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/variables.html":{}}}],["don't",{"_index":388,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dri",{"_index":439,"title":{},"body":{"index.html":{}}}],["e",{"_index":200,"title":{},"body":{"classes/TestElement.html":{}}}],["e0a0472",{"_index":342,"title":{},"body":{"changelog.html":{}}}],["e1163fb",{"_index":344,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":500,"title":{},"body":{"index.html":{}}}],["easier",{"_index":449,"title":{},"body":{"index.html":{}}}],["eee2e97",{"_index":337,"title":{},"body":{"changelog.html":{}}}],["el",{"_index":586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.check",{"_index":603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.class",{"_index":588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.selectedindex",{"_index":605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.selectedlabel",{"_index":609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.selectedvalu",{"_index":608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.textcont",{"_index":602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.valu",{"_index":600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["element",{"_index":22,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["element(selector",{"_index":82,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["element.t",{"_index":167,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{}}}],["element.ts:104",{"_index":186,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:114",{"_index":187,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:123",{"_index":176,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:14",{"_index":172,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:16",{"_index":217,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["element.ts:20",{"_index":173,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:24",{"_index":188,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:31",{"_index":191,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:38",{"_index":182,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:46",{"_index":179,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:54",{"_index":195,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:62",{"_index":175,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:74",{"_index":183,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:8",{"_index":215,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["element.ts:86",{"_index":184,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:95",{"_index":185,"title":{},"body":{"classes/TestElement.html":{}}}],["elements(selector",{"_index":89,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["empti",{"_index":93,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"index.html":{}}}],["enjoy",{"_index":502,"title":{},"body":{"index.html":{}}}],["entri",{"_index":9,"title":{},"body":{"classes/ComponentTester.html":{}}}],["equal",{"_index":607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error",{"_index":62,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["etc",{"_index":457,"title":{},"body":{"index.html":{}}}],["even",{"_index":451,"title":{},"body":{"index.html":{}}}],["event",{"_index":178,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{},"license.html":{}}}],["event('chang",{"_index":425,"title":{},"body":{"index.html":{}}}],["event(typ",{"_index":204,"title":{},"body":{"classes/TestElement.html":{}}}],["everyth",{"_index":479,"title":{},"body":{"index.html":{}}}],["exact",{"_index":601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exampl",{"_index":25,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["exist",{"_index":462,"title":{},"body":{"index.html":{}}}],["expect",{"_index":452,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["expect(city).tobetruthi",{"_index":429,"title":{},"body":{"index.html":{}}}],["expect(city.options.length).tobe(3",{"_index":430,"title":{},"body":{"index.html":{}}}],["expect(city.options[0].label).tob",{"_index":432,"title":{},"body":{"index.html":{}}}],["expect(city.options[0].value).tob",{"_index":431,"title":{},"body":{"index.html":{}}}],["expect(city.options[1].label).tobe('pari",{"_index":434,"title":{},"body":{"index.html":{}}}],["expect(city.options[1].value).tobe('pari",{"_index":433,"title":{},"body":{"index.html":{}}}],["expect(city.options[2].label).tobe('lyon",{"_index":436,"title":{},"body":{"index.html":{}}}],["expect(city.options[2].value).tobe('lyon",{"_index":435,"title":{},"body":{"index.html":{}}}],["expect(fixture.nativeelement.queryselector('#city')).tobefalsi",{"_index":440,"title":{},"body":{"index.html":{}}}],["expect(tester.city).tobefalsi",{"_index":470,"title":{},"body":{"index.html":{}}}],["expect(tester.city).tohaveselectedlabel('pari",{"_index":482,"title":{},"body":{"index.html":{}}}],["expect(tester.city.optionlabels).toequ",{"_index":468,"title":{},"body":{"index.html":{}}}],["expect(tester.city.optionvalues).toequ",{"_index":465,"title":{},"body":{"index.html":{}}}],["expect(tester.country).tohaveselectedvalue('fr",{"_index":481,"title":{},"body":{"index.html":{}}}],["expect(tester.informationmessage).tocontaintext('pleas",{"_index":478,"title":{},"body":{"index.html":{}}}],["expect(tester.name).tohavevalue('do",{"_index":483,"title":{},"body":{"index.html":{}}}],["expect(tester.newsletter).tobecheck",{"_index":484,"title":{},"body":{"index.html":{}}}],["export",{"_index":124,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["expos",{"_index":493,"title":{},"body":{"index.html":{}}}],["express",{"_index":549,"title":{},"body":{"license.html":{}}}],["extend",{"_index":152,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["fake",{"_index":369,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fakerout",{"_index":363,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fakeroute(opt",{"_index":367,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fakesnapshot",{"_index":365,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fakesnapshot(opt",{"_index":390,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fals",{"_index":257,"title":{},"body":{"classes/TestInput.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["falsi",{"_index":587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["featur",{"_index":334,"title":{},"body":{"changelog.html":{}}}],["feedback",{"_index":506,"title":{},"body":{"index.html":{}}}],["few",{"_index":406,"title":{},"body":{"index.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["fillwith",{"_index":230,"title":{},"body":{"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["fillwith(valu",{"_index":235,"title":{},"body":{"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["first",{"_index":58,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{}}}],["fit",{"_index":552,"title":{},"body":{"license.html":{}}}],["fix",{"_index":327,"title":{},"body":{"changelog.html":{}}}],["fixtur",{"_index":28,"title":{},"body":{"classes/ComponentTester.html":{},"index.html":{}}}],["fixture.detectchang",{"_index":427,"title":{},"body":{"index.html":{}}}],["fixture.nativeelement.queryselector('#c",{"_index":428,"title":{},"body":{"index.html":{}}}],["fixture.nativeelement.queryselector('#countri",{"_index":421,"title":{},"body":{"index.html":{}}}],["flag",{"_index":163,"title":{},"body":{"classes/TestButton.html":{}}}],["follow",{"_index":413,"title":{},"body":{"index.html":{},"license.html":{}}}],["form",{"_index":477,"title":{},"body":{"index.html":{}}}],["found",{"_index":85,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["franc",{"_index":419,"title":{},"body":{"index.html":{}}}],["free",{"_index":520,"title":{},"body":{"license.html":{}}}],["french",{"_index":416,"title":{},"body":{"index.html":{}}}],["frequent",{"_index":472,"title":{},"body":{"index.html":{}}}],["function",{"_index":362,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnish",{"_index":540,"title":{},"body":{"license.html":{}}}],["get",{"_index":21,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["getcheck",{"_index":250,"title":{},"body":{"classes/TestInput.html":{}}}],["getclass",{"_index":194,"title":{},"body":{"classes/TestElement.html":{}}}],["getcomponentinst",{"_index":111,"title":{},"body":{"classes/ComponentTester.html":{}}}],["getdebugel",{"_index":115,"title":{},"body":{"classes/ComponentTester.html":{}}}],["getdis",{"_index":161,"title":{},"body":{"classes/TestButton.html":{}}}],["getnativeel",{"_index":104,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{}}}],["getoptionlabel",{"_index":287,"title":{},"body":{"classes/TestSelect.html":{}}}],["getoptionvalu",{"_index":284,"title":{},"body":{"classes/TestSelect.html":{}}}],["getselectedindex",{"_index":275,"title":{},"body":{"classes/TestSelect.html":{}}}],["getselectedlabel",{"_index":281,"title":{},"body":{"classes/TestSelect.html":{}}}],["getselectedvalu",{"_index":278,"title":{},"body":{"classes/TestSelect.html":{}}}],["getsiz",{"_index":290,"title":{},"body":{"classes/TestSelect.html":{}}}],["getter",{"_index":494,"title":{},"body":{"index.html":{}}}],["gettextcont",{"_index":190,"title":{},"body":{"classes/TestElement.html":{}}}],["getvalu",{"_index":248,"title":{},"body":{"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["github",{"_index":510,"title":{},"body":{"index.html":{}}}],["give",{"_index":15,"title":{},"body":{"classes/ComponentTester.html":{}}}],["given",{"_index":42,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["goe",{"_index":376,"title":{},"body":{"miscellaneous/functions.html":{}}}],["grant",{"_index":519,"title":{},"body":{"license.html":{}}}],["guidelin",{"_index":317,"title":{},"body":{"changelog.html":{}}}],["help",{"_index":150,"title":{},"body":{"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["herebi",{"_index":518,"title":{},"body":{"license.html":{}}}],["hide",{"_index":437,"title":{},"body":{"index.html":{}}}],["holder",{"_index":557,"title":{},"body":{"license.html":{}}}],["host",{"_index":108,"title":{},"body":{"classes/ComponentTester.html":{}}}],["html",{"_index":164,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["htmlelement",{"_index":109,"title":{},"body":{"classes/ComponentTester.html":{}}}],["impli",{"_index":550,"title":{},"body":{"license.html":{}}}],["import",{"_index":118,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["includ",{"_index":529,"title":{},"body":{"license.html":{}}}],["index",{"_index":26,"title":{"index.html":{}},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["inherit",{"_index":158,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["input",{"_index":33,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["input(selector",{"_index":94,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["input.t",{"_index":228,"title":{},"body":{"classes/TestInput.html":{}}}],["input.ts:17",{"_index":236,"title":{},"body":{"classes/TestInput.html":{}}}],["input.ts:25",{"_index":249,"title":{},"body":{"classes/TestInput.html":{}}}],["input.ts:32",{"_index":251,"title":{},"body":{"classes/TestInput.html":{}}}],["input.ts:39",{"_index":234,"title":{},"body":{"classes/TestInput.html":{}}}],["input.ts:47",{"_index":238,"title":{},"body":{"classes/TestInput.html":{}}}],["input.ts:8",{"_index":232,"title":{},"body":{"classes/TestInput.html":{}}}],["instal",{"_index":485,"title":{},"body":{"index.html":{}}}],["instanc",{"_index":113,"title":{},"body":{"classes/ComponentTester.html":{}}}],["instanceof",{"_index":130,"title":{},"body":{"classes/ComponentTester.html":{},"miscellaneous/variables.html":{}}}],["instead",{"_index":271,"title":{},"body":{"classes/TestSelect.html":{}}}],["isn't",{"_index":63,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["isneg",{"_index":585,"title":{},"body":{"miscellaneous/variables.html":{}}}],["issu",{"_index":503,"title":{},"body":{"index.html":{}}}],["it('should",{"_index":414,"title":{},"body":{"index.html":{}}}],["jasmin",{"_index":471,"title":{},"body":{"index.html":{}}}],["jasmine.addmatchers(speculoosmatch",{"_index":474,"title":{},"body":{"index.html":{}}}],["jasmine.custommatch",{"_index":583,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jasmine.custommatcherfactori",{"_index":577,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jasmine.custommatcherresult",{"_index":595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jasmine.matchersutil",{"_index":581,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kind",{"_index":548,"title":{},"body":{"license.html":{}}}],["know",{"_index":409,"title":{},"body":{"index.html":{}}}],["label",{"_index":268,"title":{},"body":{"classes/TestSelect.html":{},"miscellaneous/variables.html":{}}}],["liabil",{"_index":561,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":558,"title":{},"body":{"license.html":{}}}],["librari",{"_index":403,"title":{},"body":{"index.html":{}}}],["licens",{"_index":511,"title":{"license.html":{}},"body":{"license.html":{}}}],["limit",{"_index":530,"title":{},"body":{"license.html":{}}}],["log",{"_index":309,"title":{},"body":{"changelog.html":{}}}],["lyon",{"_index":467,"title":{},"body":{"index.html":{}}}],["main",{"_index":8,"title":{},"body":{"classes/ComponentTester.html":{}}}],["make",{"_index":402,"title":{},"body":{"index.html":{}}}],["match",{"_index":59,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["matcher",{"_index":329,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["merchant",{"_index":551,"title":{},"body":{"license.html":{}}}],["merg",{"_index":533,"title":{},"body":{"license.html":{}}}],["messag",{"_index":455,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["method",{"_index":19,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["minut",{"_index":407,"title":{},"body":{"index.html":{}}}],["miscellan",{"_index":361,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":512,"title":{},"body":{"license.html":{}}}],["modifi",{"_index":532,"title":{},"body":{"license.html":{}}}],["modul",{"_index":570,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":453,"title":{},"body":{"index.html":{}}}],["mycomponenttest",{"_index":458,"title":{},"body":{"index.html":{}}}],["name",{"_index":49,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{}}}],["nativ",{"_index":106,"title":{},"body":{"classes/ComponentTester.html":{},"index.html":{}}}],["nativeel",{"_index":103,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"index.html":{}}}],["need",{"_index":426,"title":{},"body":{"index.html":{}}}],["negativecompar",{"_index":597,"title":{},"body":{"miscellaneous/variables.html":{}}}],["new",{"_index":127,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["ngx",{"_index":392,"title":{},"body":{"index.html":{}}}],["ninja",{"_index":515,"title":{},"body":{"license.html":{}}}],["none",{"_index":593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["noninfring",{"_index":555,"title":{},"body":{"license.html":{}}}],["notabl",{"_index":310,"title":{},"body":{"changelog.html":{}}}],["noth",{"_index":269,"title":{},"body":{"classes/TestSelect.html":{}}}],["notic",{"_index":543,"title":{},"body":{"license.html":{}}}],["npm",{"_index":486,"title":{},"body":{"index.html":{}}}],["null",{"_index":68,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["number",{"_index":264,"title":{},"body":{"classes/TestSelect.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":399,"title":{},"body":{"index.html":{}}}],["obtain",{"_index":523,"title":{},"body":{"license.html":{}}}],["on",{"_index":496,"title":{},"body":{"index.html":{}}}],["option",{"_index":50,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["option'",{"_index":606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["option.label",{"_index":301,"title":{},"body":{"classes/TestSelect.html":{}}}],["option.valu",{"_index":300,"title":{},"body":{"classes/TestSelect.html":{}}}],["optionlabel",{"_index":286,"title":{},"body":{"classes/TestSelect.html":{}}}],["optionvalu",{"_index":283,"title":{},"body":{"classes/TestSelect.html":{}}}],["otherwis",{"_index":566,"title":{},"body":{"license.html":{}}}],["out",{"_index":568,"title":{},"body":{"license.html":{}}}],["overview",{"_index":571,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":355,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":398,"title":{},"body":{"index.html":{}}}],["param",{"_index":123,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{}}}],["paramet",{"_index":48,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{}}}],["parammap",{"_index":373,"title":{},"body":{"miscellaneous/functions.html":{}}}],["parent",{"_index":379,"title":{},"body":{"miscellaneous/functions.html":{}}}],["pari",{"_index":466,"title":{},"body":{"index.html":{}}}],["partial",{"_index":370,"title":{},"body":{"miscellaneous/functions.html":{}}}],["particular",{"_index":553,"title":{},"body":{"license.html":{}}}],["pass",{"_index":46,"title":{},"body":{"classes/ComponentTester.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["pattern",{"_index":400,"title":{},"body":{"index.html":{}}}],["peer",{"_index":357,"title":{},"body":{"dependencies.html":{}}}],["permiss",{"_index":517,"title":{},"body":{"license.html":{}}}],["permit",{"_index":539,"title":{},"body":{"license.html":{}}}],["person",{"_index":522,"title":{},"body":{"license.html":{}}}],["pleas",{"_index":505,"title":{},"body":{"index.html":{}}}],["point",{"_index":10,"title":{},"body":{"classes/ComponentTester.html":{}}}],["popul",{"_index":476,"title":{},"body":{"index.html":{}}}],["portion",{"_index":546,"title":{},"body":{"license.html":{}}}],["pre",{"_index":475,"title":{},"body":{"index.html":{}}}],["prefer",{"_index":495,"title":{},"body":{"index.html":{}}}],["previous",{"_index":438,"title":{},"body":{"index.html":{}}}],["privat",{"_index":196,"title":{},"body":{"classes/TestElement.html":{}}}],["project",{"_index":311,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["properti",{"_index":18,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["provid",{"_index":147,"title":{},"body":{"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{},"license.html":{}}}],["public",{"_index":168,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["publish",{"_index":534,"title":{},"body":{"license.html":{}}}],["pull",{"_index":508,"title":{},"body":{"index.html":{}}}],["purpos",{"_index":554,"title":{},"body":{"license.html":{}}}],["querier",{"_index":122,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{}}}],["queryparam",{"_index":377,"title":{},"body":{"miscellaneous/functions.html":{}}}],["queryparammap",{"_index":378,"title":{},"body":{"miscellaneous/functions.html":{}}}],["question",{"_index":504,"title":{},"body":{"index.html":{}}}],["read",{"_index":450,"title":{},"body":{"index.html":{}}}],["readabl",{"_index":454,"title":{},"body":{"index.html":{}}}],["readonli",{"_index":27,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["receiv",{"_index":579,"title":{},"body":{"miscellaneous/variables.html":{}}}],["recommend",{"_index":443,"title":{},"body":{"index.html":{}}}],["releas",{"_index":353,"title":{},"body":{"changelog.html":{}}}],["repetit",{"_index":445,"title":{},"body":{"index.html":{}}}],["request",{"_index":509,"title":{},"body":{"index.html":{}}}],["restrict",{"_index":528,"title":{},"body":{"license.html":{}}}],["result",{"_index":144,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":66,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["right",{"_index":531,"title":{},"body":{"license.html":{}}}],["rout",{"_index":380,"title":{},"body":{"miscellaneous/functions.html":{}}}],["route'",{"_index":372,"title":{},"body":{"miscellaneous/functions.html":{}}}],["route.parent.snapshot",{"_index":386,"title":{},"body":{"miscellaneous/functions.html":{}}}],["route.snapshot.par",{"_index":387,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rxj",{"_index":360,"title":{},"body":{"dependencies.html":{}}}],["same",{"_index":375,"title":{},"body":{"miscellaneous/functions.html":{}}}],["save",{"_index":487,"title":{},"body":{"index.html":{}}}],["see",{"_index":313,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["select",{"_index":34,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["select(selector",{"_index":96,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["select.t",{"_index":258,"title":{},"body":{"classes/TestSelect.html":{}}}],["select.ts:16",{"_index":265,"title":{},"body":{"classes/TestSelect.html":{}}}],["select.ts:26",{"_index":273,"title":{},"body":{"classes/TestSelect.html":{}}}],["select.ts:38",{"_index":267,"title":{},"body":{"classes/TestSelect.html":{}}}],["select.ts:48",{"_index":276,"title":{},"body":{"classes/TestSelect.html":{}}}],["select.ts:55",{"_index":279,"title":{},"body":{"classes/TestSelect.html":{}}}],["select.ts:65",{"_index":282,"title":{},"body":{"classes/TestSelect.html":{}}}],["select.ts:75",{"_index":285,"title":{},"body":{"classes/TestSelect.html":{}}}],["select.ts:8",{"_index":262,"title":{},"body":{"classes/TestSelect.html":{}}}],["select.ts:82",{"_index":288,"title":{},"body":{"classes/TestSelect.html":{}}}],["select.ts:89",{"_index":291,"title":{},"body":{"classes/TestSelect.html":{}}}],["selectedindex",{"_index":274,"title":{},"body":{"classes/TestSelect.html":{}}}],["selectedlabel",{"_index":280,"title":{},"body":{"classes/TestSelect.html":{}}}],["selectedvalu",{"_index":277,"title":{},"body":{"classes/TestSelect.html":{}}}],["selectindex",{"_index":259,"title":{},"body":{"classes/TestSelect.html":{}}}],["selectindex(index",{"_index":263,"title":{},"body":{"classes/TestSelect.html":{}}}],["selectlabel",{"_index":260,"title":{},"body":{"classes/TestSelect.html":{}}}],["selectlabel(label",{"_index":266,"title":{},"body":{"classes/TestSelect.html":{}}}],["selector",{"_index":60,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["selectvalu",{"_index":261,"title":{},"body":{"classes/TestSelect.html":{}}}],["selectvalue(valu",{"_index":272,"title":{},"body":{"classes/TestSelect.html":{}}}],["sell",{"_index":538,"title":{},"body":{"license.html":{}}}],["set",{"_index":237,"title":{},"body":{"classes/TestInput.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{}}}],["shall",{"_index":544,"title":{},"body":{"license.html":{}}}],["shown",{"_index":492,"title":{},"body":{"index.html":{}}}],["similar",{"_index":461,"title":{},"body":{"index.html":{}}}],["simpler",{"_index":394,"title":{},"body":{"index.html":{}}}],["simpli",{"_index":404,"title":{},"body":{"index.html":{}}}],["size",{"_index":289,"title":{},"body":{"classes/TestSelect.html":{}}}],["snapshot",{"_index":381,"title":{},"body":{"miscellaneous/functions.html":{}}}],["snapshot'",{"_index":383,"title":{},"body":{"miscellaneous/functions.html":{}}}],["softwar",{"_index":525,"title":{},"body":{"license.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["speculoo",{"_index":393,"title":{},"body":{"index.html":{}}}],["speculoosmatch",{"_index":574,"title":{},"body":{"miscellaneous/variables.html":{}}}],["squad",{"_index":516,"title":{},"body":{"license.html":{}}}],["src/.../matchers.t",{"_index":575,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../route.t",{"_index":364,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/lib/compon",{"_index":5,"title":{},"body":{"classes/ComponentTester.html":{}}}],["src/lib/matchers.t",{"_index":576,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/lib/route.t",{"_index":366,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/lib/test",{"_index":145,"title":{},"body":{"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["standard",{"_index":314,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["start",{"_index":307,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["static",{"_index":30,"title":{},"body":{"classes/ComponentTester.html":{}}}],["string",{"_index":56,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/variables.html":{}}}],["subclass",{"_index":24,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["subject",{"_index":541,"title":{},"body":{"license.html":{}}}],["sublicens",{"_index":536,"title":{},"body":{"license.html":{}}}],["submit",{"_index":507,"title":{},"body":{"index.html":{}}}],["substanti",{"_index":545,"title":{},"body":{"license.html":{}}}],["super(mycompon",{"_index":459,"title":{},"body":{"index.html":{}}}],["super(test",{"_index":165,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["t",{"_index":71,"title":{},"body":{"classes/ComponentTester.html":{}}}],["test",{"_index":54,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["testb",{"_index":44,"title":{},"body":{"classes/ComponentTester.html":{}}}],["testbed.createcomponent(arg",{"_index":131,"title":{},"body":{"classes/ComponentTester.html":{}}}],["testbed.createcomponent(componenttyp",{"_index":126,"title":{},"body":{"classes/ComponentTester.html":{}}}],["testbutton",{"_index":67,"title":{"classes/TestButton.html":{}},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testel",{"_index":23,"title":{"classes/TestElement.html":{}},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/variables.html":{}}}],["testelement:104",{"_index":225,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["testelement:114",{"_index":226,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["testelement:123",{"_index":219,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["testelement:20",{"_index":216,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["testelement:38",{"_index":221,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["testelement:46",{"_index":220,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["testelement:62",{"_index":218,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["testelement:74",{"_index":222,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["testelement:86",{"_index":223,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["testelement:95",{"_index":224,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["testelementqueri",{"_index":121,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{}}}],["testelementquerier(test",{"_index":199,"title":{},"body":{"classes/TestElement.html":{}}}],["testelementquerier.wrap(this.debugel",{"_index":133,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester",{"_index":157,"title":{},"body":{"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["tester.country.selectindex(0",{"_index":469,"title":{},"body":{"index.html":{}}}],["tester.country.selectlabel('fr",{"_index":464,"title":{},"body":{"index.html":{}}}],["tester.element('#som",{"_index":88,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["tester.elements('input",{"_index":92,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["tester.t",{"_index":6,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:104",{"_index":97,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:114",{"_index":100,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:123",{"_index":57,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:130",{"_index":75,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:20",{"_index":53,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:25",{"_index":52,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:30",{"_index":70,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:33",{"_index":41,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:48",{"_index":105,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:55",{"_index":112,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:62",{"_index":116,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:74",{"_index":83,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:86",{"_index":90,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:95",{"_index":95,"title":{},"body":{"classes/ComponentTester.html":{}}}],["testhtmlel",{"_index":153,"title":{"classes/TestHtmlElement.html":{}},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testhtmlelement:104",{"_index":246,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testhtmlelement:114",{"_index":247,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testhtmlelement:123",{"_index":240,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testhtmlelement:16",{"_index":159,"title":{},"body":{"classes/TestButton.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testhtmlelement:20",{"_index":233,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testhtmlelement:38",{"_index":242,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testhtmlelement:46",{"_index":241,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testhtmlelement:62",{"_index":239,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testhtmlelement:74",{"_index":243,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testhtmlelement:86",{"_index":244,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testhtmlelement:95",{"_index":245,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testinput",{"_index":86,"title":{"classes/TestInput.html":{}},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/variables.html":{}}}],["testselect",{"_index":98,"title":{"classes/TestSelect.html":{}},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["testtextarea",{"_index":101,"title":{"classes/TestTextArea.html":{}},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/variables.html":{}}}],["testxxx",{"_index":499,"title":{},"body":{"index.html":{}}}],["text",{"_index":192,"title":{},"body":{"classes/TestElement.html":{},"classes/TestSelect.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["textarea",{"_index":35,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["textarea(selector",{"_index":99,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["textarea.t",{"_index":303,"title":{},"body":{"classes/TestTextArea.html":{}}}],["textarea.ts:17",{"_index":305,"title":{},"body":{"classes/TestTextArea.html":{}}}],["textarea.ts:25",{"_index":306,"title":{},"body":{"classes/TestTextArea.html":{}}}],["textarea.ts:8",{"_index":304,"title":{},"body":{"classes/TestTextArea.html":{}}}],["textcont",{"_index":189,"title":{},"body":{"classes/TestElement.html":{},"miscellaneous/variables.html":{}}}],["this.debugelement.nativeel",{"_index":201,"title":{},"body":{"classes/TestElement.html":{}}}],["this.dispatcheventoftype('chang",{"_index":256,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{}}}],["this.dispatcheventoftype('input",{"_index":253,"title":{},"body":{"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["this.fixtur",{"_index":129,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.fixture.componentinst",{"_index":135,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.fixture.debugel",{"_index":136,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.fixture.detectchanges(checknochang",{"_index":143,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.fixture.nativeel",{"_index":134,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.nativeelement.check",{"_index":254,"title":{},"body":{"classes/TestInput.html":{}}}],["this.nativeelement.click",{"_index":227,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["this.nativeelement.dis",{"_index":166,"title":{},"body":{"classes/TestButton.html":{}}}],["this.nativeelement.dispatchevent(ev",{"_index":206,"title":{},"body":{"classes/TestElement.html":{}}}],["this.nativeelement.dispatchevent(new",{"_index":203,"title":{},"body":{"classes/TestElement.html":{}}}],["this.nativeelement.getattribute(nam",{"_index":208,"title":{},"body":{"classes/TestElement.html":{}}}],["this.nativeelement.options.length",{"_index":302,"title":{},"body":{"classes/TestSelect.html":{}}}],["this.nativeelement.selectedindex",{"_index":292,"title":{},"body":{"classes/TestSelect.html":{}}}],["this.nativeelement.textcont",{"_index":202,"title":{},"body":{"classes/TestElement.html":{}}}],["this.nativeelement.valu",{"_index":252,"title":{},"body":{"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["this.optionlabels.indexof(label",{"_index":296,"title":{},"body":{"classes/TestSelect.html":{}}}],["this.optionvalues.indexof(valu",{"_index":293,"title":{},"body":{"classes/TestSelect.html":{}}}],["this.queri",{"_index":198,"title":{},"body":{"classes/TestElement.html":{}}}],["this.querier.button(selector",{"_index":214,"title":{},"body":{"classes/TestElement.html":{}}}],["this.querier.element(selector",{"_index":209,"title":{},"body":{"classes/TestElement.html":{}}}],["this.querier.elements(selector",{"_index":210,"title":{},"body":{"classes/TestElement.html":{}}}],["this.querier.input(selector",{"_index":211,"title":{},"body":{"classes/TestElement.html":{}}}],["this.querier.select(selector",{"_index":212,"title":{},"body":{"classes/TestElement.html":{}}}],["this.querier.textarea(selector",{"_index":213,"title":{},"body":{"classes/TestElement.html":{}}}],["this.select('#c",{"_index":463,"title":{},"body":{"index.html":{}}}],["this.select('#countri",{"_index":460,"title":{},"body":{"index.html":{}}}],["this.selectedindex",{"_index":297,"title":{},"body":{"classes/TestSelect.html":{}}}],["this.selectindex(index",{"_index":295,"title":{},"body":{"classes/TestSelect.html":{}}}],["this.testel",{"_index":132,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.testelement.button(selector",{"_index":142,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.testelement.element(selector",{"_index":137,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.testelement.elements(selector",{"_index":138,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.testelement.input(selector",{"_index":139,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.testelement.select(selector",{"_index":140,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.testelement.textarea(selector",{"_index":141,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.tester.detectchang",{"_index":205,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{}}}],["throw",{"_index":61,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["thu",{"_index":87,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["tobecheck",{"_index":338,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["tocontaintext",{"_index":340,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["todo",{"_index":270,"title":{},"body":{"classes/TestSelect.html":{}}}],["tohaveclass",{"_index":580,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tohaveselectedindex",{"_index":343,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["tohaveselectedlabel",{"_index":345,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["tohaveselectedvalu",{"_index":347,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["tohavetext",{"_index":332,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["tohavevalu",{"_index":599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tort",{"_index":565,"title":{},"body":{"license.html":{}}}],["trigger",{"_index":76,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["true",{"_index":255,"title":{},"body":{"classes/TestInput.html":{}}}],["type",{"_index":38,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["typic",{"_index":491,"title":{},"body":{"index.html":{}}}],["uncheck",{"_index":231,"title":{},"body":{"classes/TestInput.html":{}}}],["undefin",{"_index":368,"title":{},"body":{"miscellaneous/functions.html":{}}}],["under",{"_index":385,"title":{},"body":{"miscellaneous/functions.html":{}}}],["understand",{"_index":405,"title":{},"body":{"index.html":{}}}],["unit",{"_index":396,"title":{},"body":{"index.html":{}}}],["us",{"_index":17,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{}}}],["util",{"_index":401,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["valu",{"_index":84,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["variabl",{"_index":573,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["veri",{"_index":352,"title":{},"body":{"changelog.html":{}}}],["version",{"_index":315,"title":{},"body":{"changelog.html":{}}}],["void",{"_index":81,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["warranti",{"_index":547,"title":{},"body":{"license.html":{}}}],["was${!isneg",{"_index":604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["way",{"_index":442,"title":{},"body":{"index.html":{}}}],["whether",{"_index":562,"title":{},"body":{"license.html":{}}}],["without",{"_index":389,"title":{},"body":{"miscellaneous/functions.html":{},"license.html":{}}}],["wrap",{"_index":12,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["wrapper",{"_index":446,"title":{},"body":{"index.html":{}}}],["write",{"_index":151,"title":{},"body":{"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["written",{"_index":412,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":489,"title":{},"body":{"index.html":{}}}],["ye",{"_index":80,"title":{},"body":{"classes/ComponentTester.html":{}}}],["you'v",{"_index":411,"title":{},"body":{"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/ComponentTester.html":{"url":"classes/ComponentTester.html","title":"class - ComponentTester","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ComponentTester\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/component-tester.ts\n        \n\n            \n                Description\n            \n            \n                The main entry point of the API. It wraps an Angular ComponentFixture, and gives access to its\nmost used properties and methods. It also allows getting elements wrapped in TestElement (and its subclasses)\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                fixture\n                            \n                            \n                                    Readonly\n                                testElement\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                button\n                            \n                            \n                                    Static\n                                create\n                            \n                            \n                                detectChanges\n                            \n                            \n                                element\n                            \n                            \n                                elements\n                            \n                            \n                                input\n                            \n                            \n                                select\n                            \n                            \n                                textarea\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(arg: Type | ComponentFixture)\n                    \n                \n                        \n                            \n                                Defined in src/lib/component-tester.ts:33\n                            \n                        \n\n                \n                    \n                            Creates a ComponentFixture for the given component type using the TestBed, and creates a ComponentTester\nwrapping (and delegating) to this fixture. If a fixture is passed, then delegates to this fixture directly.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        arg\n                                                  \n                                                        \n                                                                    Type | ComponentFixture\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                                the type of the component to wrap, or a component fixture to wrap\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            fixture\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        fixture:     ComponentFixture\n\n                    \n                \n                    \n                        \n                            Type :     ComponentFixture\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/component-tester.ts:25\n                            \n                        \n\n                \n                    \n                        The component fixture of the component\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            testElement\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        testElement:     TestElement\n\n                    \n                \n                    \n                        \n                            Type :     TestElement\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/component-tester.ts:20\n                            \n                        \n\n                \n                    \n                        The test element of the component\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            button\n                            \n                            \n                        \n                    \n                \n                \n                    \nbutton(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/component-tester.ts:123\n                            \n                        \n\n\n                \n                    \n                            Gets the first button matched by the given selector. Throws an Error if the matched element isn't actually a button.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestButton | null\n\n                            \n                                \n                                    the wrapped button, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            create\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        create(componentType: Type)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/component-tester.ts:30\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n                            Creates a component fixture of the given type with the TestBed and wraps it into a ComponentTester\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        componentType\n                                                        \n                                                                    Type\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     ComponentTester\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            detectChanges\n                            \n                            \n                        \n                    \n                \n                \n                    \ndetectChanges(checkNoChanges?: boolean)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/component-tester.ts:130\n                            \n                        \n\n\n                \n                    \n                            Triggers a change detection using the wrapped fixture\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        checkNoChanges\n                                                        \n                                                                    boolean\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            element\n                            \n                            \n                        \n                    \n                \n                \n                    \nelement(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/component-tester.ts:74\n                            \n                        \n\n\n                \n                    \n                            Gets the first element matching the given CSS selector and wraps it into a TestElement. The actual type\nof the returned value is the TestElement subclass matching the type of the found element. So, if the\nmatched element is an input for example, the method will return a TestInput. You can thus use\ntester.element('#some-input') as TestInput.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestElement | null\n\n                            \n                                \n                                    the wrapped element, or null if no element matches the selector.\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            elements\n                            \n                            \n                        \n                    \n                \n                \n                    \nelements(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/component-tester.ts:86\n                            \n                        \n\n\n                \n                    \n                            Gets all the elements matching the given CSS selector and wraps them into a TestElement. The actual type\nof the returned elements is the TestElement subclass matching the type of the found element. So, if the\nmatched elements are inputs for example, the method will return an array of TestInput. You can thus use\ntester.elements('input') as Array.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Array>\n\n                            \n                                \n                                    the array of matched elements, empty if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            input\n                            \n                            \n                        \n                    \n                \n                \n                    \ninput(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/component-tester.ts:95\n                            \n                        \n\n\n                \n                    \n                            Gets the first input matched by the given selector. Throws an Error if the matched element isn't actually an input.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestInput | null\n\n                            \n                                \n                                    the wrapped input, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            select\n                            \n                            \n                        \n                    \n                \n                \n                    \nselect(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/component-tester.ts:104\n                            \n                        \n\n\n                \n                    \n                            Gets the first select matched by the given selector. Throws an Error if the matched element isn't actually a select.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestSelect | null\n\n                            \n                                \n                                    the wrapped select, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            textarea\n                            \n                            \n                        \n                    \n                \n                \n                    \ntextarea(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/component-tester.ts:114\n                            \n                        \n\n\n                \n                    \n                            Gets the first textarea matched by the given selector\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestTextArea | null\n\n                            \n                                \n                                    the wrapped textarea, or null if no element was matched. Throws an Error if the matched element isn't actually a textarea.\n\n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        nativeElement\n                    \n                \n\n                \n                    \n                        getnativeElement()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/component-tester.ts:48\n                                \n                            \n                    \n                        \n                                The native DOM host element of the component\n\n\n                                \n                                    Returns :     HTMLElement\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        componentInstance\n                    \n                \n\n                \n                    \n                        getcomponentInstance()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/component-tester.ts:55\n                                \n                            \n                    \n                        \n                                Gets the instance of the tested component from the wrapped fixture\n\n\n                                \n                                    Returns :     T\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        debugElement\n                    \n                \n\n                \n                    \n                        getdebugElement()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/component-tester.ts:62\n                                \n                            \n                    \n                        \n                                Gets the debug element from the wrapped fixture\n\n\n                                \n                                    Returns :     DebugElement\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { DebugElement, Type } from '@angular/core';\nimport { TestTextArea } from './test-textarea';\nimport { TestElement } from './test-element';\nimport { TestInput } from './test-input';\nimport { TestSelect } from './test-select';\nimport { TestButton } from './test-button';\nimport { TestElementQuerier } from './test-element-querier';\n\n/**\n * The main entry point of the API. It wraps an Angular ComponentFixture, and gives access to its\n * most used properties and methods. It also allows getting elements wrapped in TestElement (and its subclasses)\n * @param  the type of the component to test\n */\nexport class ComponentTester {\n\n  /**\n   * The test element of the component\n   */\n  readonly testElement: TestElement;\n\n  /**\n   * The component fixture of the component\n   */\n  readonly fixture: ComponentFixture;\n\n  /**\n   * Creates a component fixture of the given type with the TestBed and wraps it into a ComponentTester\n   */\n  static create(componentType: Type) {\n    const fixture = TestBed.createComponent(componentType);\n    return new ComponentTester(fixture);\n  }\n\n  /**\n   * Creates a ComponentFixture for the given component type using the TestBed, and creates a ComponentTester\n   * wrapping (and delegating) to this fixture. If a fixture is passed, then delegates to this fixture directly.\n   * @param arg the type of the component to wrap, or a component fixture to wrap\n   */\n  constructor(arg: Type | ComponentFixture) {\n    this.fixture = (arg instanceof ComponentFixture) ? arg : TestBed.createComponent(arg);\n    this.testElement = TestElementQuerier.wrap(this.debugElement, this);\n  }\n\n  /**\n   * The native DOM host element of the component\n   */\n  get nativeElement(): HTMLElement {\n    return this.fixture.nativeElement;\n  }\n\n  /**\n   * Gets the instance of the tested component from the wrapped fixture\n   */\n  get componentInstance(): T {\n    return this.fixture.componentInstance;\n  }\n\n  /**\n   * Gets the debug element from the wrapped fixture\n   */\n  get debugElement(): DebugElement {\n    return this.fixture.debugElement;\n  }\n\n  /**\n   * Gets the first element matching the given CSS selector and wraps it into a TestElement. The actual type\n   * of the returned value is the TestElement subclass matching the type of the found element. So, if the\n   * matched element is an input for example, the method will return a TestInput. You can thus use\n   * `tester.element('#some-input') as TestInput`.\n   * @param selector a CSS selector\n   * @returns the wrapped element, or null if no element matches the selector.\n   */\n  element(selector: string): TestElement | null {\n    return this.testElement.element(selector);\n  }\n\n  /**\n   * Gets all the elements matching the given CSS selector and wraps them into a TestElement. The actual type\n   * of the returned elements is the TestElement subclass matching the type of the found element. So, if the\n   * matched elements are inputs for example, the method will return an array of TestInput. You can thus use\n   * `tester.elements('input') as Array`.\n   * @param selector a CSS selector\n   * @returns the array of matched elements, empty if no element was matched\n   */\n  elements(selector: string): Array> {\n    return this.testElement.elements(selector);\n  }\n\n  /**\n   * Gets the first input matched by the given selector. Throws an Error if the matched element isn't actually an input.\n   * @param selector a CSS selector\n   * @returns the wrapped input, or null if no element was matched\n   */\n  input(selector: string): TestInput | null  {\n    return this.testElement.input(selector);\n  }\n\n  /**\n   * Gets the first select matched by the given selector. Throws an Error if the matched element isn't actually a select.\n   * @param selector a CSS selector\n   * @returns the wrapped select, or null if no element was matched\n   */\n  select(selector: string): TestSelect | null  {\n    return this.testElement.select(selector);\n  }\n\n  /**\n   * Gets the first textarea matched by the given selector\n   * @param selector a CSS selector\n   * @returns the wrapped textarea, or null if no element was matched. Throws an Error if the matched element isn't actually a textarea.\n   * @throws {Error} if the matched element isn't actually a textarea\n   */\n  textarea(selector: string): TestTextArea | null {\n    return this.testElement.textarea(selector);\n  }\n\n  /**\n   * Gets the first button matched by the given selector. Throws an Error if the matched element isn't actually a button.\n   * @param selector a CSS selector\n   * @returns the wrapped button, or null if no element was matched\n   */\n  button(selector: string): TestButton | null {\n    return this.testElement.button(selector);\n  }\n\n  /**\n   * Triggers a change detection using the wrapped fixture\n   */\n  detectChanges(checkNoChanges?: boolean) {\n    this.fixture.detectChanges(checkNoChanges);\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TestButton.html":{"url":"classes/TestButton.html","title":"class - TestButton","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  TestButton\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/test-button.ts\n        \n\n            \n                Description\n            \n            \n                A wrapped button element, providing additional methods and attributes helping with writing tests\n\n            \n\n            \n                Extends\n            \n            \n                    TestHtmlElement\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tester: ComponentTester, debugElement: DebugElement)\n                    \n                \n                        \n                            \n                                Defined in src/lib/test-button.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tester\n                                                  \n                                                        \n                                                                    ComponentTester\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        debugElement\n                                                  \n                                                        \n                                                                    DebugElement\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            click\n                            \n                            \n                        \n                    \n                \n                \n                    \nclick()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:16\n                            \n                        \n\n\n                \n                    \n                            Clicks on the wrapped element, then triggers a change detection\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        disabled\n                    \n                \n\n                \n                    \n                        getdisabled()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-button.ts:16\n                                \n                            \n                    \n                        \n                                the disabled flag of the button\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { ComponentTester } from './component-tester';\nimport { TestHtmlElement } from './test-html-element';\nimport { DebugElement } from '@angular/core';\n\n/**\n * A wrapped button element, providing additional methods and attributes helping with writing tests\n */\nexport class TestButton extends TestHtmlElement {\n  constructor(tester: ComponentTester, debugElement: DebugElement) {\n    super(tester, debugElement);\n  }\n\n  /**\n   * the disabled flag of the button\n   */\n  get disabled() {\n    return this.nativeElement.disabled;\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TestElement.html":{"url":"classes/TestElement.html","title":"class - TestElement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  TestElement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/test-element.ts\n        \n\n            \n                Description\n            \n            \n                A wrapped DOM element, providing additional methods and attributes helping with writing tests\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                debugElement\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                attr\n                            \n                            \n                                button\n                            \n                            \n                                dispatchEvent\n                            \n                            \n                                dispatchEventOfType\n                            \n                            \n                                element\n                            \n                            \n                                elements\n                            \n                            \n                                input\n                            \n                            \n                                select\n                            \n                            \n                                textarea\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tester: ComponentTester, debugElement: DebugElement)\n                    \n                \n                        \n                            \n                                Defined in src/lib/test-element.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tester\n                                                  \n                                                        \n                                                                    ComponentTester\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        debugElement\n                                                  \n                                                        \n                                                                    DebugElement\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            debugElement\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        debugElement:     DebugElement\n\n                    \n                \n                    \n                        \n                            Type :     DebugElement\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/test-element.ts:20\n                            \n                        \n\n                \n                    \n                        the wrapped debug element\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            attr\n                            \n                            \n                        \n                    \n                \n                \n                    \nattr(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-element.ts:62\n                            \n                        \n\n\n                \n                    \n                            Gets the attribute of the wrapped element with the given name\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                the name of the attribute to get\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            button\n                            \n                            \n                        \n                    \n                \n                \n                    \nbutton(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-element.ts:123\n                            \n                        \n\n\n                \n                    \n                            Gets the first button matched by the given selector. Throws an Error if the matched element isn't actually a button.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestButton | null\n\n                            \n                                \n                                    the wrapped button, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dispatchEvent\n                            \n                            \n                        \n                    \n                \n                \n                    \ndispatchEvent(event: Event)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-element.ts:46\n                            \n                        \n\n\n                \n                    \n                            dispatches the given event from the wrapped element, then triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        event\n                                                        \n                                                                    Event\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dispatchEventOfType\n                            \n                            \n                        \n                    \n                \n                \n                    \ndispatchEventOfType(type: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-element.ts:38\n                            \n                        \n\n\n                \n                    \n                            dispatches an event of the given type from the wrapped element, then triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        type\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            element\n                            \n                            \n                        \n                    \n                \n                \n                    \nelement(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-element.ts:74\n                            \n                        \n\n\n                \n                    \n                            Gets the first element matching the given CSS selector and wraps it into a TestElement. The actual type\nof the returned value is the TestElement subclass matching the type of the found element. So, if the\nmatched element is an input for example, the method will return a TestInput. You can thus use\ntester.element('#some-input') as TestInput.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestElement | null\n\n                            \n                                \n                                    the wrapped element, or null if no element matches the selector.\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            elements\n                            \n                            \n                        \n                    \n                \n                \n                    \nelements(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-element.ts:86\n                            \n                        \n\n\n                \n                    \n                            Gets all the elements matching the given CSS selector and wraps them into a TestElement. The actual type\nof the returned elements is the TestElement subclass matching the type of the found element. So, if the\nmatched elements are inputs for example, the method will return an array of TestInput. You can thus use\ntester.elements('input') as Array.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Array>\n\n                            \n                                \n                                    the array of matched elements, empty if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            input\n                            \n                            \n                        \n                    \n                \n                \n                    \ninput(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-element.ts:95\n                            \n                        \n\n\n                \n                    \n                            Gets the first input matched by the given selector. Throws an Error if the matched element isn't actually an input.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestInput | null\n\n                            \n                                \n                                    the wrapped input, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            select\n                            \n                            \n                        \n                    \n                \n                \n                    \nselect(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-element.ts:104\n                            \n                        \n\n\n                \n                    \n                            Gets the first select matched by the given selector. Throws an Error if the matched element isn't actually a select.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestSelect | null\n\n                            \n                                \n                                    the wrapped select, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            textarea\n                            \n                            \n                        \n                    \n                \n                \n                    \ntextarea(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-element.ts:114\n                            \n                        \n\n\n                \n                    \n                            Gets the first textarea matched by the given selector\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestTextArea | null\n\n                            \n                                \n                                    the wrapped textarea, or null if no element was matched. Throws an Error if the matched element isn't actually a textarea.\n\n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        nativeElement\n                    \n                \n\n                \n                    \n                        getnativeElement()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-element.ts:24\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        textContent\n                    \n                \n\n                \n                    \n                        gettextContent()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-element.ts:31\n                                \n                            \n                    \n                        \n                                the text content of this element\n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        classes\n                    \n                \n\n                \n                    \n                        getclasses()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-element.ts:54\n                                \n                            \n                    \n                        \n                                Gets the CSS classes of the wrapped element, as an array\n\n\n                                \n                                    Returns :     Array\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { ComponentTester } from './component-tester';\nimport { TestButton } from './test-button';\nimport { TestSelect } from './test-select';\nimport { TestTextArea } from './test-textarea';\nimport { TestInput } from './test-input';\nimport { TestElementQuerier } from './test-element-querier';\nimport { DebugElement } from '@angular/core';\n\n/**\n * A wrapped DOM element, providing additional methods and attributes helping with writing tests\n */\nexport class TestElement {\n\n  private querier: TestElementQuerier;\n\n  constructor(protected tester: ComponentTester,\n              /**\n               * the wrapped debug element\n               */\n              public readonly debugElement: DebugElement) {\n    this.querier = new TestElementQuerier(tester, debugElement);\n  }\n\n  get nativeElement(): E {\n    return this.debugElement.nativeElement;\n  }\n\n  /**\n   * the text content of this element\n   */\n  get textContent() {\n    return this.nativeElement.textContent;\n  }\n\n  /**\n   * dispatches an event of the given type from the wrapped element, then triggers a change detection\n   */\n  dispatchEventOfType(type: string) {\n    this.nativeElement.dispatchEvent(new Event(type));\n    this.tester.detectChanges();\n  }\n\n  /**\n   * dispatches the given event from the wrapped element, then triggers a change detection\n   */\n  dispatchEvent(event: Event) {\n    this.nativeElement.dispatchEvent(event);\n    this.tester.detectChanges();\n  }\n\n  /**\n   * Gets the CSS classes of the wrapped element, as an array\n   */\n  get classes(): Array {\n    return Array.prototype.slice.call(this.nativeElement.classList);\n  }\n\n  /**\n   * Gets the attribute of the wrapped element with the given name\n   * @param name the name of the attribute to get\n   */\n  attr(name: string) {\n    return this.nativeElement.getAttribute(name);\n  }\n\n  /**\n   * Gets the first element matching the given CSS selector and wraps it into a TestElement. The actual type\n   * of the returned value is the TestElement subclass matching the type of the found element. So, if the\n   * matched element is an input for example, the method will return a TestInput. You can thus use\n   * `tester.element('#some-input') as TestInput`.\n   * @param selector a CSS selector\n   * @returns the wrapped element, or null if no element matches the selector.\n   */\n  element(selector: string): TestElement | null {\n    return this.querier.element(selector);\n  }\n\n  /**\n   * Gets all the elements matching the given CSS selector and wraps them into a TestElement. The actual type\n   * of the returned elements is the TestElement subclass matching the type of the found element. So, if the\n   * matched elements are inputs for example, the method will return an array of TestInput. You can thus use\n   * `tester.elements('input') as Array`.\n   * @param selector a CSS selector\n   * @returns the array of matched elements, empty if no element was matched\n   */\n  elements(selector: string): Array> {\n    return this.querier.elements(selector);\n  }\n\n  /**\n   * Gets the first input matched by the given selector. Throws an Error if the matched element isn't actually an input.\n   * @param selector a CSS selector\n   * @returns the wrapped input, or null if no element was matched\n   */\n  input(selector: string): TestInput | null {\n    return this.querier.input(selector);\n  }\n\n  /**\n   * Gets the first select matched by the given selector. Throws an Error if the matched element isn't actually a select.\n   * @param selector a CSS selector\n   * @returns the wrapped select, or null if no element was matched\n   */\n  select(selector: string): TestSelect | null {\n    return this.querier.select(selector);\n  }\n\n  /**\n   * Gets the first textarea matched by the given selector\n   * @param selector a CSS selector\n   * @returns the wrapped textarea, or null if no element was matched. Throws an Error if the matched element isn't actually a textarea.\n   * @throws {Error} if the matched element isn't actually a textarea\n   */\n  textarea(selector: string): TestTextArea | null {\n    return this.querier.textarea(selector);\n  }\n\n  /**\n   * Gets the first button matched by the given selector. Throws an Error if the matched element isn't actually a button.\n   * @param selector a CSS selector\n   * @returns the wrapped button, or null if no element was matched\n   */\n  button(selector: string): TestButton | null {\n    return this.querier.button(selector);\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TestHtmlElement.html":{"url":"classes/TestHtmlElement.html","title":"class - TestHtmlElement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  TestHtmlElement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/test-html-element.ts\n        \n\n            \n                Description\n            \n            \n                A wrapped DOM HTML element, providing additional methods and attributes helping with writing tests\n\n            \n\n            \n                Extends\n            \n            \n                    TestElement\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                debugElement\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                            \n                                attr\n                            \n                            \n                                button\n                            \n                            \n                                dispatchEvent\n                            \n                            \n                                dispatchEventOfType\n                            \n                            \n                                element\n                            \n                            \n                                elements\n                            \n                            \n                                input\n                            \n                            \n                                select\n                            \n                            \n                                textarea\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tester: ComponentTester, debugElement: DebugElement)\n                    \n                \n                        \n                            \n                                Defined in src/lib/test-html-element.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tester\n                                                  \n                                                        \n                                                                    ComponentTester\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        debugElement\n                                                  \n                                                        \n                                                                    DebugElement\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            debugElement\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        debugElement:     DebugElement\n\n                    \n                \n                    \n                        \n                            Type :     DebugElement\n\n                        \n                    \n                            \n                                \n                                    Inherited from     TestElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestElement:20\n                            \n                        \n\n                \n                    \n                        the wrapped debug element\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            click\n                            \n                            \n                        \n                    \n                \n                \n                    \nclick()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-html-element.ts:16\n                            \n                        \n\n\n                \n                    \n                            Clicks on the wrapped element, then triggers a change detection\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            attr\n                            \n                            \n                        \n                    \n                \n                \n                    \nattr(name: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestElement:62\n                            \n                        \n\n\n                \n                    \n                            Gets the attribute of the wrapped element with the given name\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                the name of the attribute to get\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            button\n                            \n                            \n                        \n                    \n                \n                \n                    \nbutton(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestElement:123\n                            \n                        \n\n\n                \n                    \n                            Gets the first button matched by the given selector. Throws an Error if the matched element isn't actually a button.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestButton | null\n\n                            \n                                \n                                    the wrapped button, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dispatchEvent\n                            \n                            \n                        \n                    \n                \n                \n                    \ndispatchEvent(event: Event)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestElement:46\n                            \n                        \n\n\n                \n                    \n                            dispatches the given event from the wrapped element, then triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        event\n                                                        \n                                                                    Event\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dispatchEventOfType\n                            \n                            \n                        \n                    \n                \n                \n                    \ndispatchEventOfType(type: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestElement:38\n                            \n                        \n\n\n                \n                    \n                            dispatches an event of the given type from the wrapped element, then triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        type\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            element\n                            \n                            \n                        \n                    \n                \n                \n                    \nelement(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestElement:74\n                            \n                        \n\n\n                \n                    \n                            Gets the first element matching the given CSS selector and wraps it into a TestElement. The actual type\nof the returned value is the TestElement subclass matching the type of the found element. So, if the\nmatched element is an input for example, the method will return a TestInput. You can thus use\ntester.element('#some-input') as TestInput.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestElement | null\n\n                            \n                                \n                                    the wrapped element, or null if no element matches the selector.\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            elements\n                            \n                            \n                        \n                    \n                \n                \n                    \nelements(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestElement:86\n                            \n                        \n\n\n                \n                    \n                            Gets all the elements matching the given CSS selector and wraps them into a TestElement. The actual type\nof the returned elements is the TestElement subclass matching the type of the found element. So, if the\nmatched elements are inputs for example, the method will return an array of TestInput. You can thus use\ntester.elements('input') as Array.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Array>\n\n                            \n                                \n                                    the array of matched elements, empty if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            input\n                            \n                            \n                        \n                    \n                \n                \n                    \ninput(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestElement:95\n                            \n                        \n\n\n                \n                    \n                            Gets the first input matched by the given selector. Throws an Error if the matched element isn't actually an input.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestInput | null\n\n                            \n                                \n                                    the wrapped input, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            select\n                            \n                            \n                        \n                    \n                \n                \n                    \nselect(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestElement:104\n                            \n                        \n\n\n                \n                    \n                            Gets the first select matched by the given selector. Throws an Error if the matched element isn't actually a select.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestSelect | null\n\n                            \n                                \n                                    the wrapped select, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            textarea\n                            \n                            \n                        \n                    \n                \n                \n                    \ntextarea(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestElement:114\n                            \n                        \n\n\n                \n                    \n                            Gets the first textarea matched by the given selector\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestTextArea | null\n\n                            \n                                \n                                    the wrapped textarea, or null if no element was matched. Throws an Error if the matched element isn't actually a textarea.\n\n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { ComponentTester } from './component-tester';\nimport { TestElement } from './test-element';\nimport { DebugElement } from '@angular/core';\n\n/**\n * A wrapped DOM HTML element, providing additional methods and attributes helping with writing tests\n */\nexport class TestHtmlElement extends TestElement {\n  constructor(tester: ComponentTester, debugElement: DebugElement) {\n    super(tester, debugElement);\n  }\n\n  /**\n   * Clicks on the wrapped element, then triggers a change detection\n   */\n  click() {\n    this.nativeElement.click();\n    this.tester.detectChanges();\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TestInput.html":{"url":"classes/TestInput.html","title":"class - TestInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  TestInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/test-input.ts\n        \n\n            \n                Description\n            \n            \n                A wrapped DOM HTML input element, providing additional methods and attributes helping with writing tests\n\n            \n\n            \n                Extends\n            \n            \n                    TestHtmlElement\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                debugElement\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                check\n                            \n                            \n                                fillWith\n                            \n                            \n                                uncheck\n                            \n                            \n                                click\n                            \n                            \n                                attr\n                            \n                            \n                                button\n                            \n                            \n                                dispatchEvent\n                            \n                            \n                                dispatchEventOfType\n                            \n                            \n                                element\n                            \n                            \n                                elements\n                            \n                            \n                                input\n                            \n                            \n                                select\n                            \n                            \n                                textarea\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tester: ComponentTester, debugElement: DebugElement)\n                    \n                \n                        \n                            \n                                Defined in src/lib/test-input.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tester\n                                                  \n                                                        \n                                                                    ComponentTester\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        debugElement\n                                                  \n                                                        \n                                                                    DebugElement\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            debugElement\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        debugElement:     DebugElement\n\n                    \n                \n                    \n                        \n                            Type :     DebugElement\n\n                        \n                    \n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:20\n                            \n                        \n\n                \n                    \n                        the wrapped debug element\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            check\n                            \n                            \n                        \n                    \n                \n                \n                    \ncheck()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-input.ts:39\n                            \n                        \n\n\n                \n                    \n                            Checks the wrapped input, then dispatches an event of type change and triggers a change detection\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fillWith\n                            \n                            \n                        \n                    \n                \n                \n                    \nfillWith(value: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-input.ts:17\n                            \n                        \n\n\n                \n                    \n                            Sets the value of the wrapped input, then dispatches an event of type input and triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                the new value of the input\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            uncheck\n                            \n                            \n                        \n                    \n                \n                \n                    \nuncheck()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-input.ts:47\n                            \n                        \n\n\n                \n                    \n                            Unchecks the wrapped input, then dispatches an event of type change and triggers a change detection\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            click\n                            \n                            \n                        \n                    \n                \n                \n                    \nclick()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:16\n                            \n                        \n\n\n                \n                    \n                            Clicks on the wrapped element, then triggers a change detection\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            attr\n                            \n                            \n                        \n                    \n                \n                \n                    \nattr(name: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:62\n                            \n                        \n\n\n                \n                    \n                            Gets the attribute of the wrapped element with the given name\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                the name of the attribute to get\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            button\n                            \n                            \n                        \n                    \n                \n                \n                    \nbutton(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:123\n                            \n                        \n\n\n                \n                    \n                            Gets the first button matched by the given selector. Throws an Error if the matched element isn't actually a button.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestButton | null\n\n                            \n                                \n                                    the wrapped button, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dispatchEvent\n                            \n                            \n                        \n                    \n                \n                \n                    \ndispatchEvent(event: Event)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:46\n                            \n                        \n\n\n                \n                    \n                            dispatches the given event from the wrapped element, then triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        event\n                                                        \n                                                                    Event\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dispatchEventOfType\n                            \n                            \n                        \n                    \n                \n                \n                    \ndispatchEventOfType(type: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:38\n                            \n                        \n\n\n                \n                    \n                            dispatches an event of the given type from the wrapped element, then triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        type\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            element\n                            \n                            \n                        \n                    \n                \n                \n                    \nelement(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:74\n                            \n                        \n\n\n                \n                    \n                            Gets the first element matching the given CSS selector and wraps it into a TestElement. The actual type\nof the returned value is the TestElement subclass matching the type of the found element. So, if the\nmatched element is an input for example, the method will return a TestInput. You can thus use\ntester.element('#some-input') as TestInput.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestElement | null\n\n                            \n                                \n                                    the wrapped element, or null if no element matches the selector.\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            elements\n                            \n                            \n                        \n                    \n                \n                \n                    \nelements(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:86\n                            \n                        \n\n\n                \n                    \n                            Gets all the elements matching the given CSS selector and wraps them into a TestElement. The actual type\nof the returned elements is the TestElement subclass matching the type of the found element. So, if the\nmatched elements are inputs for example, the method will return an array of TestInput. You can thus use\ntester.elements('input') as Array.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Array>\n\n                            \n                                \n                                    the array of matched elements, empty if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            input\n                            \n                            \n                        \n                    \n                \n                \n                    \ninput(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:95\n                            \n                        \n\n\n                \n                    \n                            Gets the first input matched by the given selector. Throws an Error if the matched element isn't actually an input.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestInput | null\n\n                            \n                                \n                                    the wrapped input, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            select\n                            \n                            \n                        \n                    \n                \n                \n                    \nselect(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:104\n                            \n                        \n\n\n                \n                    \n                            Gets the first select matched by the given selector. Throws an Error if the matched element isn't actually a select.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestSelect | null\n\n                            \n                                \n                                    the wrapped select, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            textarea\n                            \n                            \n                        \n                    \n                \n                \n                    \ntextarea(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:114\n                            \n                        \n\n\n                \n                    \n                            Gets the first textarea matched by the given selector\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestTextArea | null\n\n                            \n                                \n                                    the wrapped textarea, or null if no element was matched. Throws an Error if the matched element isn't actually a textarea.\n\n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        value\n                    \n                \n\n                \n                    \n                        getvalue()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-input.ts:25\n                                \n                            \n                    \n                        \n                                the value of the wrapped input\n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        checked\n                    \n                \n\n                \n                    \n                        getchecked()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-input.ts:32\n                                \n                            \n                    \n                        \n                                the checked property of the wrapped input\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { ComponentTester } from './component-tester';\nimport { TestHtmlElement } from './test-html-element';\nimport { DebugElement } from '@angular/core';\n\n/**\n * A wrapped DOM HTML input element, providing additional methods and attributes helping with writing tests\n */\nexport class TestInput extends TestHtmlElement {\n  constructor(tester: ComponentTester, debugElement: DebugElement) {\n    super(tester, debugElement);\n  }\n\n  /**\n   * Sets the value of the wrapped input, then dispatches an event of type input and triggers a change detection\n   * @param value the new value of the input\n   */\n  fillWith(value: string) {\n    this.nativeElement.value = value;\n    this.dispatchEventOfType('input');\n  }\n\n  /**\n   * the value of the wrapped input\n   */\n  get value() {\n    return this.nativeElement.value;\n  }\n\n  /**\n   * the checked property of the wrapped input\n   */\n  get checked() {\n    return this.nativeElement.checked;\n  }\n\n  /**\n   * Checks the wrapped input, then dispatches an event of type change and triggers a change detection\n   */\n  check() {\n    this.nativeElement.checked = true;\n    this.dispatchEventOfType('change');\n  }\n\n  /**\n   * Unchecks the wrapped input, then dispatches an event of type change and triggers a change detection\n   */\n  uncheck() {\n    this.nativeElement.checked = false;\n    this.dispatchEventOfType('change');\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TestSelect.html":{"url":"classes/TestSelect.html","title":"class - TestSelect","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  TestSelect\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/test-select.ts\n        \n\n            \n                Description\n            \n            \n                A wrapped DOM HTML select element, providing additional methods and attributes helping with writing tests\n\n            \n\n            \n                Extends\n            \n            \n                    TestHtmlElement\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                debugElement\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                selectIndex\n                            \n                            \n                                selectLabel\n                            \n                            \n                                selectValue\n                            \n                            \n                                click\n                            \n                            \n                                attr\n                            \n                            \n                                button\n                            \n                            \n                                dispatchEvent\n                            \n                            \n                                dispatchEventOfType\n                            \n                            \n                                element\n                            \n                            \n                                elements\n                            \n                            \n                                input\n                            \n                            \n                                select\n                            \n                            \n                                textarea\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tester: ComponentTester, debugElement: DebugElement)\n                    \n                \n                        \n                            \n                                Defined in src/lib/test-select.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tester\n                                                  \n                                                        \n                                                                    ComponentTester\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        debugElement\n                                                  \n                                                        \n                                                                    DebugElement\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            debugElement\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        debugElement:     DebugElement\n\n                    \n                \n                    \n                        \n                            Type :     DebugElement\n\n                        \n                    \n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:20\n                            \n                        \n\n                \n                    \n                        the wrapped debug element\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectIndex\n                            \n                            \n                        \n                    \n                \n                \n                    \nselectIndex(index: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-select.ts:16\n                            \n                        \n\n\n                \n                    \n                            Selects the option at the given index, then dispatches an event of type change and triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        index\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectLabel\n                            \n                            \n                        \n                    \n                \n                \n                    \nselectLabel(label: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-select.ts:38\n                            \n                        \n\n\n                \n                    \n                            Selects the first option with the given label (or text), then dispatches an event of type change and triggers a change detection.\nIf there is no option with the given label, then does nothing\nTODO should it throw instead?\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        label\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectValue\n                            \n                            \n                        \n                    \n                \n                \n                    \nselectValue(value: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-select.ts:26\n                            \n                        \n\n\n                \n                    \n                            Selects the first option with the given value, then dispatches an event of type change and triggers a change detection.\nIf there is no option with the given value, then does nothing\nTODO should it throw instead?\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            click\n                            \n                            \n                        \n                    \n                \n                \n                    \nclick()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:16\n                            \n                        \n\n\n                \n                    \n                            Clicks on the wrapped element, then triggers a change detection\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            attr\n                            \n                            \n                        \n                    \n                \n                \n                    \nattr(name: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:62\n                            \n                        \n\n\n                \n                    \n                            Gets the attribute of the wrapped element with the given name\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                the name of the attribute to get\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            button\n                            \n                            \n                        \n                    \n                \n                \n                    \nbutton(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:123\n                            \n                        \n\n\n                \n                    \n                            Gets the first button matched by the given selector. Throws an Error if the matched element isn't actually a button.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestButton | null\n\n                            \n                                \n                                    the wrapped button, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dispatchEvent\n                            \n                            \n                        \n                    \n                \n                \n                    \ndispatchEvent(event: Event)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:46\n                            \n                        \n\n\n                \n                    \n                            dispatches the given event from the wrapped element, then triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        event\n                                                        \n                                                                    Event\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dispatchEventOfType\n                            \n                            \n                        \n                    \n                \n                \n                    \ndispatchEventOfType(type: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:38\n                            \n                        \n\n\n                \n                    \n                            dispatches an event of the given type from the wrapped element, then triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        type\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            element\n                            \n                            \n                        \n                    \n                \n                \n                    \nelement(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:74\n                            \n                        \n\n\n                \n                    \n                            Gets the first element matching the given CSS selector and wraps it into a TestElement. The actual type\nof the returned value is the TestElement subclass matching the type of the found element. So, if the\nmatched element is an input for example, the method will return a TestInput. You can thus use\ntester.element('#some-input') as TestInput.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestElement | null\n\n                            \n                                \n                                    the wrapped element, or null if no element matches the selector.\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            elements\n                            \n                            \n                        \n                    \n                \n                \n                    \nelements(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:86\n                            \n                        \n\n\n                \n                    \n                            Gets all the elements matching the given CSS selector and wraps them into a TestElement. The actual type\nof the returned elements is the TestElement subclass matching the type of the found element. So, if the\nmatched elements are inputs for example, the method will return an array of TestInput. You can thus use\ntester.elements('input') as Array.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Array>\n\n                            \n                                \n                                    the array of matched elements, empty if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            input\n                            \n                            \n                        \n                    \n                \n                \n                    \ninput(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:95\n                            \n                        \n\n\n                \n                    \n                            Gets the first input matched by the given selector. Throws an Error if the matched element isn't actually an input.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestInput | null\n\n                            \n                                \n                                    the wrapped input, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            select\n                            \n                            \n                        \n                    \n                \n                \n                    \nselect(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:104\n                            \n                        \n\n\n                \n                    \n                            Gets the first select matched by the given selector. Throws an Error if the matched element isn't actually a select.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestSelect | null\n\n                            \n                                \n                                    the wrapped select, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            textarea\n                            \n                            \n                        \n                    \n                \n                \n                    \ntextarea(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:114\n                            \n                        \n\n\n                \n                    \n                            Gets the first textarea matched by the given selector\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestTextArea | null\n\n                            \n                                \n                                    the wrapped textarea, or null if no element was matched. Throws an Error if the matched element isn't actually a textarea.\n\n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        selectedIndex\n                    \n                \n\n                \n                    \n                        getselectedIndex()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-select.ts:48\n                                \n                            \n                    \n                        \n                                the selected index of the wrapped select\n\n\n                                \n                                    Returns :     number\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        selectedValue\n                    \n                \n\n                \n                    \n                        getselectedValue()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-select.ts:55\n                                \n                            \n                    \n                        \n                                the value of the selected option of the wrapped select, or null if there is no selected option\n\n\n                                \n                                    Returns :     string | null\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        selectedLabel\n                    \n                \n\n                \n                    \n                        getselectedLabel()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-select.ts:65\n                                \n                            \n                    \n                        \n                                the label (or text if no label) of the selected option of the wrapped select, or null if there is no selected option\n\n\n                                \n                                    Returns :     string | null\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        optionValues\n                    \n                \n\n                \n                    \n                        getoptionValues()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-select.ts:75\n                                \n                            \n                    \n                        \n                                the values of the options, as an array\n\n\n                                \n                                    Returns :     Array\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        optionLabels\n                    \n                \n\n                \n                    \n                        getoptionLabels()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-select.ts:82\n                                \n                            \n                    \n                        \n                                the labels (or texts if no label) of the options, as an array\n\n\n                                \n                                    Returns :     Array\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        size\n                    \n                \n\n                \n                    \n                        getsize()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-select.ts:89\n                                \n                            \n                    \n                        \n                                the number of options in the select\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { ComponentTester } from './component-tester';\nimport { TestHtmlElement } from './test-html-element';\nimport { DebugElement } from '@angular/core';\n\n/**\n * A wrapped DOM HTML select element, providing additional methods and attributes helping with writing tests\n */\nexport class TestSelect extends TestHtmlElement {\n  constructor(tester: ComponentTester, debugElement: DebugElement) {\n    super(tester, debugElement);\n  }\n\n  /**\n   * Selects the option at the given index, then dispatches an event of type change and triggers a change detection\n   */\n  selectIndex(index: number) {\n    this.nativeElement.selectedIndex = index;\n    this.dispatchEventOfType('change');\n  }\n\n  /**\n   * Selects the first option with the given value, then dispatches an event of type change and triggers a change detection.\n   * If there is no option with the given value, then does nothing\n   * TODO should it throw instead?\n   */\n  selectValue(value: string) {\n    const index = this.optionValues.indexOf(value);\n    if (index >= 0) {\n      this.selectIndex(index);\n    }\n  }\n\n  /**\n   * Selects the first option with the given label (or text), then dispatches an event of type change and triggers a change detection.\n   * If there is no option with the given label, then does nothing\n   * TODO should it throw instead?\n   */\n  selectLabel(label: string) {\n    const index = this.optionLabels.indexOf(label);\n    if (index >= 0) {\n      this.selectIndex(index);\n    }\n  }\n\n  /**\n   * the selected index of the wrapped select\n   */\n  get selectedIndex(): number {\n    return this.nativeElement.selectedIndex;\n  }\n\n  /**\n   * the value of the selected option of the wrapped select, or null if there is no selected option\n   */\n  get selectedValue(): string | null {\n    if (this.selectedIndex  {\n    return (Array.prototype.slice.call(this.nativeElement.options) as Array).map(option => option.value);\n  }\n\n  /**\n   * the labels (or texts if no label) of the options, as an array\n   */\n  get optionLabels(): Array {\n    return (Array.prototype.slice.call(this.nativeElement.options) as Array).map(option => option.label);\n  }\n\n  /**\n   * the number of options in the select\n   */\n  get size() {\n    return this.nativeElement.options.length;\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TestTextArea.html":{"url":"classes/TestTextArea.html","title":"class - TestTextArea","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  TestTextArea\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/test-textarea.ts\n        \n\n            \n                Description\n            \n            \n                A wrapped DOM HTML textarea element, providing additional methods and attributes helping with writing tests\n\n            \n\n            \n                Extends\n            \n            \n                    TestHtmlElement\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                debugElement\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                fillWith\n                            \n                            \n                                click\n                            \n                            \n                                attr\n                            \n                            \n                                button\n                            \n                            \n                                dispatchEvent\n                            \n                            \n                                dispatchEventOfType\n                            \n                            \n                                element\n                            \n                            \n                                elements\n                            \n                            \n                                input\n                            \n                            \n                                select\n                            \n                            \n                                textarea\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tester: ComponentTester, debugElement: DebugElement)\n                    \n                \n                        \n                            \n                                Defined in src/lib/test-textarea.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tester\n                                                  \n                                                        \n                                                                    ComponentTester\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        debugElement\n                                                  \n                                                        \n                                                                    DebugElement\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            debugElement\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        debugElement:     DebugElement\n\n                    \n                \n                    \n                        \n                            Type :     DebugElement\n\n                        \n                    \n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:20\n                            \n                        \n\n                \n                    \n                        the wrapped debug element\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fillWith\n                            \n                            \n                        \n                    \n                \n                \n                    \nfillWith(value: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-textarea.ts:17\n                            \n                        \n\n\n                \n                    \n                            Sets the value of the wrapped textarea, then dispatches an event of type input and triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                the new value of the textarea\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            click\n                            \n                            \n                        \n                    \n                \n                \n                    \nclick()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:16\n                            \n                        \n\n\n                \n                    \n                            Clicks on the wrapped element, then triggers a change detection\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            attr\n                            \n                            \n                        \n                    \n                \n                \n                    \nattr(name: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:62\n                            \n                        \n\n\n                \n                    \n                            Gets the attribute of the wrapped element with the given name\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                the name of the attribute to get\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            button\n                            \n                            \n                        \n                    \n                \n                \n                    \nbutton(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:123\n                            \n                        \n\n\n                \n                    \n                            Gets the first button matched by the given selector. Throws an Error if the matched element isn't actually a button.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestButton | null\n\n                            \n                                \n                                    the wrapped button, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dispatchEvent\n                            \n                            \n                        \n                    \n                \n                \n                    \ndispatchEvent(event: Event)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:46\n                            \n                        \n\n\n                \n                    \n                            dispatches the given event from the wrapped element, then triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        event\n                                                        \n                                                                    Event\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dispatchEventOfType\n                            \n                            \n                        \n                    \n                \n                \n                    \ndispatchEventOfType(type: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:38\n                            \n                        \n\n\n                \n                    \n                            dispatches an event of the given type from the wrapped element, then triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        type\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            element\n                            \n                            \n                        \n                    \n                \n                \n                    \nelement(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:74\n                            \n                        \n\n\n                \n                    \n                            Gets the first element matching the given CSS selector and wraps it into a TestElement. The actual type\nof the returned value is the TestElement subclass matching the type of the found element. So, if the\nmatched element is an input for example, the method will return a TestInput. You can thus use\ntester.element('#some-input') as TestInput.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestElement | null\n\n                            \n                                \n                                    the wrapped element, or null if no element matches the selector.\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            elements\n                            \n                            \n                        \n                    \n                \n                \n                    \nelements(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:86\n                            \n                        \n\n\n                \n                    \n                            Gets all the elements matching the given CSS selector and wraps them into a TestElement. The actual type\nof the returned elements is the TestElement subclass matching the type of the found element. So, if the\nmatched elements are inputs for example, the method will return an array of TestInput. You can thus use\ntester.elements('input') as Array.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Array>\n\n                            \n                                \n                                    the array of matched elements, empty if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            input\n                            \n                            \n                        \n                    \n                \n                \n                    \ninput(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:95\n                            \n                        \n\n\n                \n                    \n                            Gets the first input matched by the given selector. Throws an Error if the matched element isn't actually an input.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestInput | null\n\n                            \n                                \n                                    the wrapped input, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            select\n                            \n                            \n                        \n                    \n                \n                \n                    \nselect(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:104\n                            \n                        \n\n\n                \n                    \n                            Gets the first select matched by the given selector. Throws an Error if the matched element isn't actually a select.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestSelect | null\n\n                            \n                                \n                                    the wrapped select, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            textarea\n                            \n                            \n                        \n                    \n                \n                \n                    \ntextarea(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:114\n                            \n                        \n\n\n                \n                    \n                            Gets the first textarea matched by the given selector\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestTextArea | null\n\n                            \n                                \n                                    the wrapped textarea, or null if no element was matched. Throws an Error if the matched element isn't actually a textarea.\n\n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        value\n                    \n                \n\n                \n                    \n                        getvalue()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-textarea.ts:25\n                                \n                            \n                    \n                        \n                                the value of the wrapped textarea\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { ComponentTester } from './component-tester';\nimport { TestHtmlElement } from './test-html-element';\nimport { DebugElement } from '@angular/core';\n\n/**\n * A wrapped DOM HTML textarea element, providing additional methods and attributes helping with writing tests\n */\nexport class TestTextArea extends TestHtmlElement {\n  constructor(tester: ComponentTester, debugElement: DebugElement) {\n    super(tester, debugElement);\n  }\n\n  /**\n   * Sets the value of the wrapped textarea, then dispatches an event of type input and triggers a change detection\n   * @param value the new value of the textarea\n   */\n  fillWith(value: string) {\n    this.nativeElement.value = value;\n    this.dispatchEventOfType('input');\n  }\n\n  /**\n   * the value of the wrapped textarea\n   */\n  get value() {\n    return this.nativeElement.value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChange Log\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n\n0.2.2 (2018-06-04)\n\n0.2.1 (2018-06-04)\n\n0.2.0 (2018-05-28)\nBug Fixes\n\ncustom matchers always return false if no element (a282826)\nfix toHaveText on empty text contents (0172de3)\n\nFeatures\n\nadd custom matcher for class (39d1f3a)\nadd custom matcher for value (eee2e97)\ncustom matcher toBeChecked (065ab58)\ncustom matcher toContainText (#13) (e0a0472)\ncustom matcher toHaveSelectedIndex (e1163fb)\ncustom matcher toHaveSelectedLabel (2c49330)\ncustom matcher toHaveSelectedValue (085fd65)\ncustom matcher toHaveText (8036c22)\n\n\n0.1.0 (2018-05-25)\nVery first release :champagne:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Peer Dependencies\n    \n    \n        \n            @angular/core : ^6.0.0\n        \n            @angular/router : ^6.0.0\n        \n            rxjs : ^6.0.0\n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            fakeRoute   (src/.../route.ts)\n                        \n                        \n                            fakeSnapshot   (src/.../route.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/route.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            fakeRoute\n                            \n                            \n                        \n                    \n                \n                \n                    \nfakeRoute(options: undefined)\n                    \n                \n\n\n\n\n                \n                    \n                            Creates a fake partial ActivatedRoute for tests.\nIf you pass params, then the created route's paramMap will contain the same values.\nThe same goes for queryParams and queryParamMap.\nIf you pass a parent route and a snapshot, and the passed snapshot doesn't have a parent, then the snapshot's\nparent will be set to the parent route snapshot. This allows the code under test to use\nroute.parent.snapshot or route.snapshot.parent.\nIf you pass a snapshot with a parent, but don't pass a parent or pass a parent without snapshot, then the route's\nparent snapshot will be set to the given snapshot's parent. This allows the code under test to use\nroute.parent.snapshot or route.snapshot.parent.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fakeSnapshot\n                            \n                            \n                        \n                    \n                \n                \n                    \nfakeSnapshot(options: undefined)\n                    \n                \n\n\n\n\n                \n                    \n                            Creates a fake partial ActivatedRouteSnapshot for tests.\nIf you pass params, then the created snapshot's paramMap will contain the same values.\nThe same goes for queryParams and queryParamMap.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\nngx-speculoos\nngx-speculoos helps you write simpler, cleaner unit tests for your Angular components, based on the\npage object pattern. It also provides utilities to make writing Angular unit tests.\nThe library simply wraps the standard Angular ComponentFixture, and you should thus be \nable to understand and start using ngx-speculoos in just a few minutes if you already know\nhow to write Angular unit tests.\nWhy should you care?\nIf you've ever written tests like the following:\nit('should display French cities when selecting the country France', () => {\n  const countrySelect = fixture.nativeElement.querySelector('#country'); // countrySelect is of type any\n  countrySelect.selectedIndex = 12; // what is at index 12?\n  countrySelect.dispatchEvent(new Event('change')); // why do I need to do that?\n  fixture.detectChanges();\n\n  const city = fixture.nativeElement.querySelector('#city'); // city is of type any\n  expect(city).toBeTruthy();\n  expect(city.options.length).toBe(3);\n  expect(city.options[0].value).toBe('');\n  expect(city.options[0].label).toBe('');\n  expect(city.options[1].value).toBe('PARIS');\n  expect(city.options[1].label).toBe('Paris');\n  expect(city.options[2].value).toBe('LYON');\n  expect(city.options[2].label).toBe('Lyon');\n});\n\nit('should hide cities when selecting the empty country option', () => {\n  const countrySelect = fixture.nativeElement.querySelector('#country'); // I did that previously. What about DRY?\n  countrySelect.selectedIndex = 0;\n  countrySelect.dispatchEvent(new Event('change')); // why do I need to do that?\n  fixture.detectChanges(); // why do I need to do that?\n\n  expect(fixture.nativeElement.querySelector('#city')).toBeFalsy(); // I did that previously. What about DRY?\n});ngx-speculoos allows writing the above tests in a simpler, cleaner way:\n\nby using the page object pattern (which is optional, but recommended), you avoid repetitions. \nby using wrappers around elements, dispatching events and triggering change detection is automatic.\nby using wrappers around elements, you get useful additional methods to make tests easier to write and read.\nby using custom matchers, you get even simpler expectations and more readable error messages\nin any case you need them, you always have access to the fixture, the native elements, the debug elements, etc.\n\nclass MyComponentTester extends ComponentTester {\n  constructor() {\n    super(MyComponent);\n  }\n\n  get country() {\n    return this.select('#country'); // returns a TestSelect object, not any. Similar methods exist for inputs, buttons, etc.\n  }\n\n  get city() {\n    return this.select('#city'); // returns a TestSelect object, not any\n  }\n}\n\n[...]\n\nit('should display French cities when selecting the country France', () => {\n  tester.country.selectLabel('France'); // no dispatchEvent, no detectChanges needed\n\n  expect(tester.city.optionValues).toEqual(['', 'PARIS', 'LYON']);\n  expect(tester.city.optionLabels).toEqual(['', 'Paris', 'Lyon']);\n});\n\nit('should hide cities when selecting empty country option', () => {\n  tester.country.selectIndex(0); // no repetition of the selector, no dispatchEvent, no detectChanges needed\n\n  expect(tester.city).toBeFalsy(); // no repetition of the selector\n});If you use Jasmine, we also have custom matchers for frequent expectations:\n  beforeEach(() => jasmine.addMatchers(speculoosMatchers));\n\n  it('should contain a pre-populated form', () => {\n    expect(tester.informationMessage).toContainText('Please check that everything is correct');\n    expect(tester.country).toHaveSelectedValue('FR');\n    expect(tester.city).toHaveSelectedLabel('Paris');\n    expect(tester.name).toHaveValue('Doe');\n    expect(tester.newsletter).toBeChecked();\n  });Installation\nUsing npm: npm install --save-dev ngx-speculoos\nUsing yarn: yarn add --dev ngx-speculoos\nGetting started\n\nimport ComponentTester, and other needed classes from ngx-speculoos\nCreate a MyComponentTester class (in your my-component.spec.ts file, typically) extending \nComponentTester, as shown above.\nExpose getters (or methods, if you prefer) returning the elements used in your tests, using\none of the ComponentTester methods (element, elements, input, select, textarea, button).\nSee the API documentation for details\nWrite your tests, as shown above, benefitting from the additional methods on the TestXxx classes.\nIf needed, you can always get the fixture, componentInstance, debugElement, nativeElement, etc.\nfrom the ComponentTester, and the nativeElement from each TestXxx wrapper.\nIf you like our custom matchers, add them in a beforeEach block as shown above, and enjoy.\n\nIssues, questions\nPlease, provide feedback by filing issues, or by submitting pull requests, to the Github Project.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2018 Ninja Squad\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n    \n            \n                \n                    \n                        \n                        7 classes\n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            speculoosMatchers   (src/.../matchers.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/matchers.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            speculoosMatchers\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        speculoosMatchers:     jasmine.CustomMatcherFactories\n\n                    \n                \n                    \n                        \n                            Type :     jasmine.CustomMatcherFactories\n\n                        \n                    \n                    \n                        \n                            Default value : {\n\n  /**\n   * Checks that the receiver is a TestElement wrapping a DOM element and as the given CSS class\n   */\n  toHaveClass: (util: jasmine.MatchersUtil, customEqualityTesters: Array): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: any, expected: string) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check class '${expected}' on element, but element was falsy` };\n      }\n      if (!(el instanceof TestElement)) {\n        return { pass: false, message: `Expected to check class '${expected}' on element, but element was not a TestElement` };\n      }\n      const actual = el.classes;\n      const pass = actual.indexOf(expected) !== -1;\n      const message = `Expected element to ${isNegative ? 'not ' : ''}have class '${expected}', `\n      + `but had ${actual.length ? '\\'' + actual.join(', ') + '\\'' : 'none'}`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(false, el, expected);\n      },\n      negativeCompare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(true, el, expected);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestInput or a TestTextArea and has the given value\n   */\n  toHaveValue: (util: jasmine.MatchersUtil, customEqualityTesters: Array): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: any, expected: string) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check value '${expected}' on element, but element was falsy` };\n      }\n      if (!(el instanceof TestInput) && !(el instanceof TestTextArea)) {\n        return {\n          pass: false,\n          message: `Expected to check value '${expected}' on element, but element was neither a TestInput nor a TestTextArea`\n        };\n      }\n      const actual = el.value;\n      const pass = actual === expected;\n      const message = `Expected element to ${isNegative ? 'not ' : ''}have value '${expected}', but had value '${actual}'`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(false, el, expected);\n      },\n      negativeCompare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(true, el, expected);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestElement wrapping a DOM element and has the exact given textContent\n   */\n  toHaveText: (util: jasmine.MatchersUtil, customEqualityTesters: Array): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: any, expected: string) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check text '${expected}' on element, but element was falsy` };\n      }\n      if (!(el instanceof TestElement)) {\n        return { pass: false, message: `Expected to check text '${expected}' on element, but element was not a TestElement` };\n      }\n      const actual = el.textContent;\n      const pass = actual === expected;\n      const message = `Expected element to ${isNegative ? 'not ' : ''}have text '${expected}', but had '${actual}'`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(false, el, expected);\n      },\n      negativeCompare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(true, el, expected);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestElement wrapping a DOM element and contains the given textContent\n   */\n  toContainText: (util: jasmine.MatchersUtil, customEqualityTesters: Array): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: any, expected: string) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check text '${expected}' on element, but element was falsy` };\n      }\n      if (!(el instanceof TestElement)) {\n        return { pass: false, message: `Expected to check text '${expected}' on element, but element was not a TestElement` };\n      }\n      const actual = el.textContent;\n      if (!actual) {\n        return {\n          pass: isNegative,\n          message: `Expected element to ${isNegative ? 'not ' : ''}contain text '${expected}', but had no text`\n        };\n      }\n      const pass = actual.indexOf(expected) !== -1;\n      const message = `Expected element to ${isNegative ? 'not ' : ''}contain text '${expected}', but had text '${actual}'`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(false, el, expected);\n      },\n      negativeCompare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(true, el, expected);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestElement wrapping a DOM element and contains the given textContent\n   */\n  toBeChecked: (util: jasmine.MatchersUtil, customEqualityTesters: Array): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: any) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check if element was checked, but element was falsy` };\n      }\n      if (!(el instanceof TestInput)) {\n        return { pass: false, message: `Expected to check if element was checked, but element was not a TestInput` };\n      }\n      const pass = el.checked;\n      const message = `Expected element to be ${isNegative ? 'not ' : ''}checked, but was${!isNegative ? ' not' : ''}`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: any): jasmine.CustomMatcherResult => {\n        return assert(false, el);\n      },\n      negativeCompare: (el: any): jasmine.CustomMatcherResult => {\n        return assert(true, el);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestSelect wrapping a DOM element and has the given selected index\n   */\n  toHaveSelectedIndex: (util: jasmine.MatchersUtil, customEqualityTesters: Array): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: any, expected: number) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check selected index ${expected} on element, but element was falsy` };\n      }\n      if (!(el instanceof TestSelect)) {\n        return { pass: false, message: `Expected to check selected index ${expected} on element, but element was not a TestSelect` };\n      }\n      const actual = el.selectedIndex;\n      const pass = actual === expected;\n      const message = `Expected element to ${isNegative ? 'not ' : ''}have selected index ${expected}, but had ${actual}`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: any, expected: number): jasmine.CustomMatcherResult => {\n        return assert(false, el, expected);\n      },\n      negativeCompare: (el: any, expected: number): jasmine.CustomMatcherResult => {\n        return assert(true, el, expected);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestSelect wrapping a DOM element with the selected option's value equal to the given value\n   */\n  toHaveSelectedValue: (util: jasmine.MatchersUtil, customEqualityTesters: Array): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: any, expected: string) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check selected value '${expected}' on element, but element was falsy` };\n      }\n      if (!(el instanceof TestSelect)) {\n        return { pass: false, message: `Expected to check selected value '${expected}' on element, but element was not a TestSelect` };\n      }\n      const actual = el.selectedValue;\n      const pass = actual  === expected;\n      const message = `Expected element to ${isNegative ? 'not ' : ''}have selected value '${expected}', but had '${actual}'`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(false, el, expected);\n      },\n      negativeCompare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(true, el, expected);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestSelect wrapping a DOM element with the selected option's label equal to the given label\n   */\n  toHaveSelectedLabel: (util: jasmine.MatchersUtil, customEqualityTesters: Array): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: any, expected: string) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check selected label '${expected}' on element, but element was falsy` };\n      }\n      if (!(el instanceof TestSelect)) {\n        return { pass: false, message: `Expected to check selected label '${expected}' on element, but element was not a TestSelect` };\n      }\n      const actual = el.selectedLabel;\n      const pass = actual  === expected;\n      const message = `Expected element to ${isNegative ? 'not ' : ''}have selected label '${expected}', but had '${actual}'`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(false, el, expected);\n      },\n      negativeCompare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(true, el, expected);\n      }\n    };\n  }\n}\n                        \n                    \n\n\n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
