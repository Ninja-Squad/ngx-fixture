var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.2","fields":["title","body"],"fieldVectors":[["title/classes/ComponentTester.html",[0,0.136,1,0.559]],["body/classes/ComponentTester.html",[0,0.125,1,0.9,2,0.481,3,0.481,4,0.268,5,4.473,6,1.504,7,1.275,8,2.334,9,2.334,10,2.334,11,1.83,12,1.065,13,1.498,14,3.388,15,2.334,16,1.83,17,0.92,18,1.227,19,1.064,20,1.498,21,0.815,22,0.886,23,1.239,24,1.515,25,1.117,26,0.21,27,1.405,28,3.689,29,1.093,30,2.86,31,2.683,32,2.895,33,1.456,34,1.093,35,1.338,36,0.888,37,1.836,38,2.243,39,0.987,40,0.932,41,2.334,42,1.069,43,0.069,44,1.418,45,1.504,46,1.206,47,1.257,48,3.489,49,3.223,50,1.498,51,2.334,52,2.334,53,3.223,54,2.334,55,2.334,56,2.334,57,2.334,58,3.223,59,0.861,60,0.71,61,0.861,62,2.334,63,2.334,64,2.334,65,1.251,66,3.223,67,1.117,68,1.093,69,0.9,70,3.223,71,1.504,72,1.504,73,0.757,74,0.888,75,1.224,76,1.504,77,1.338,78,0.066,79,1.565,80,1.556,81,1.309,82,1.556,83,1.401,84,1.445,85,0.866,86,0.764,87,1.764,88,2.334,89,1.504,90,2.86,91,1.504,92,2.334,93,2.243,94,1.504,95,1.504,96,1.504,97,0.481,98,0.888,99,1.504,100,0.514,101,1.227,102,1.093,103,1.032,104,0.888,105,0.888,106,1.504,107,1.275,108,0.888,109,0.624,110,0.888,111,1.504,112,0.888,113,1.504,114,0.63,115,0.888,116,1.504,117,0.764,118,1.179,119,1.504,120,1.83,121,0.747,122,2.334,123,2.334,124,1.504,125,1.504,126,1.504,127,1.504,128,0.747,129,1.064,130,1.504,131,0.402,132,1.179,133,1.179,134,1.796,135,0.481,136,0.806,137,1.504,138,0.806,139,1.504,140,1.504,141,1.179,142,1.504,143,1.504,144,1.504,145,1.504,146,1.504,147,1.504,148,1.504,149,1.504,150,1.504,151,1.504,152,1.504,153,1.504,154,1.504,155,0.031]],["title/classes/TestButton.html",[0,0.136,86,0.679]],["body/classes/TestButton.html",[0,0.217,1,1.004,2,1.062,3,1.062,4,0.59,7,1.062,12,0.964,19,1.218,22,0.811,26,0.463,29,1.218,36,1.542,39,1.299,40,0.886,42,0.731,43,0.068,44,1.401,47,0.886,59,0.886,60,0.731,61,0.886,67,0.886,68,0.886,69,0.731,73,0.779,78,0.054,85,0.721,86,1.083,97,1.062,129,1.169,131,0.886,135,1.062,155,0.054,156,1.665,157,3.317,158,1.083,159,1.297,160,1.542,161,1.297,162,1.297,163,1.542,164,1.735,165,2.056,166,4.675,167,1.542,168,3.317,169,1.542,170,1.496,171,1.778,172,3.317,173,3.317,174,4.053,175,1.496,176,1.496,177,3.317]],["title/classes/TestElement.html",[0,0.136,23,0.679]],["body/classes/TestElement.html",[0,0.213,1,0.747,2,0.53,3,0.53,4,0.295,7,1.315,12,1.06,17,0.747,18,0.957,19,1.098,21,0.817,22,0.894,23,1.181,24,1.29,25,1.085,26,0.231,27,1.156,29,1.124,33,1.459,34,1.124,35,1.373,36,0.957,37,1.95,39,1.195,40,0.443,42,1.045,43,0.069,44,1.446,46,1.243,47,0.443,59,0.906,60,0.747,61,0.906,67,1.146,68,1.227,69,0.944,73,0.709,74,0.957,75,1.277,77,1.373,78,0.067,79,1.578,80,1.601,81,1.346,82,1.601,83,1.431,84,1.49,85,0.872,86,0.812,87,1.79,97,0.805,98,0.957,100,0.554,101,1.29,102,1.124,103,1.085,104,0.957,105,0.957,107,1.414,108,0.957,109,0.672,110,0.957,112,0.957,114,0.669,115,0.957,117,0.812,118,1.299,121,0.805,128,0.805,129,1.065,131,0.443,132,1.971,133,1.971,134,1.799,135,0.53,138,0.888,155,0.034,156,1.734,158,0.672,159,0.805,160,1.46,161,0.805,162,0.805,167,0.63,169,1.156,178,1.299,179,1.37,180,1.134,181,0.957,182,1.134,183,2.382,184,1.657,185,1.657,186,1.134,187,1.657,188,1.657,189,1.134,190,1.315,191,1.657,192,1.29,193,1.134,194,1.657,195,1.657,196,1.657,197,1.657,198,1.657,199,1.657,200,1.657,201,1.657,202,1.657,203,1.347,204,1.971,205,1.657,206,1.657,207,1.657,208,1.657,209,1.657,210,1.657,211,1.657,212,1.657,213,1.657,214,1.657,215,1.657,216,1.971,217,1.657,218,1.657,219,1.657,220,1.657,221,1.657,222,1.657,223,1.657,224,1.657,225,1.657]],["title/classes/TestHtmlElement.html",[0,0.136,164,0.967]],["body/classes/TestHtmlElement.html",[0,0.167,1,0.858,2,0.71,3,0.71,4,0.395,7,1.427,12,1.052,17,0.685,18,1.184,19,1.136,21,0.777,22,0.889,23,1.295,24,1.184,25,0.996,26,0.309,27,1.184,29,1.096,33,1.427,34,1.096,35,1.313,39,1.261,40,0.593,42,1.063,43,0.068,44,1.499,46,1.21,47,0.593,59,1.041,60,0.858,61,1.041,67,1.226,68,1.261,69,1.011,73,0.639,74,0.844,75,1.283,77,1.313,78,0.066,79,1.556,80,1.482,81,1.247,82,1.482,83,1.361,84,1.427,85,0.845,86,0.593,87,1.746,97,1.15,98,0.844,100,0.488,101,1.184,102,1.041,103,0.996,104,0.844,105,0.844,107,1.247,108,0.844,109,0.593,110,0.844,112,0.844,114,0.488,115,0.844,117,0.593,121,0.996,128,0.71,129,0.96,131,0.593,135,0.71,155,0.042,156,1.367,158,0.831,159,0.996,160,1.482,161,0.996,162,0.996,163,1.184,164,1.184,165,1.918,167,1.184,169,1.184,170,2.07,175,1.85,176,1,178,1.739,179,1.403,180,1.403,181,1.184,182,1.403,186,1,189,1,190,1.313,192,1.184,193,1,216,1.739,226,2.218,227,2.218,228,2.218,229,2.218,230,2.218,231,2.218,232,2.218,233,2.218,234,2.218,235,2.218,236,2.218,237,2.218,238,2.218]],["title/classes/TestInput.html",[0,0.136,102,0.679]],["body/classes/TestInput.html",[0,0.151,1,0.805,2,0.618,3,0.618,4,0.343,7,1.402,12,1.071,17,0.62,18,1.391,19,1.084,21,0.746,22,0.879,23,1.039,24,1.071,25,0.901,26,0.269,27,1.071,29,1.039,33,1.557,34,1.039,35,1.244,36,1.071,39,1.231,40,0.516,42,1.071,43,0.068,44,1.515,46,1.171,47,0.516,59,1.171,60,1.014,61,1.171,65,1.509,67,1.205,68,1.241,69,0.993,73,0.592,74,0.734,75,1.277,77,1.244,78,0.065,79,1.53,80,1.391,81,1.17,82,1.391,83,1.299,84,1.375,85,0.851,86,0.516,87,1.694,97,1.299,98,0.734,100,1.014,101,1.071,102,1.084,103,0.901,104,0.734,105,0.734,107,1.17,108,0.734,109,0.516,110,0.734,112,0.734,114,0.425,115,0.734,117,0.516,121,0.901,128,0.618,129,0.888,131,0.516,134,0.87,135,0.618,138,1.509,155,0.038,156,1.595,158,0.752,159,0.901,160,1.391,161,0.901,162,0.901,163,1.071,164,1.767,165,1.649,167,1.071,169,1.071,170,2.035,171,1.034,175,1.5,176,0.87,179,1.27,180,1.27,181,1.071,182,1.27,186,0.87,189,0.87,190,1.444,192,1.635,193,0.87,239,1.929,240,2.896,241,2.208,242,4.058,243,1.929,244,1.239,245,1.929,246,2.208,247,1.929,248,1.929,249,1.239,250,1.239,251,1.239,252,1.239,253,1.239,254,1.239,255,1.239,256,1.239,257,1.239,258,1.513,259,1.929,260,1.929,261,1.929,262,2.208,263,1.513,264,3.325,265,1.929,266,2.208,267,1.239]],["title/classes/TestSelect.html",[0,0.136,114,0.559]],["body/classes/TestSelect.html",[0,0.137,1,0.757,2,0.545,3,0.545,4,0.303,7,1.326,12,1.035,17,0.565,18,0.977,19,1.036,21,0.716,22,0.869,23,0.986,24,0.977,25,0.822,26,0.612,27,0.977,29,0.986,33,1.326,34,1.296,35,1.181,36,0.977,39,1.201,40,0.455,42,1.063,43,0.069,44,1.518,46,1.256,47,0.455,59,1.133,60,1.008,61,1.133,67,1.201,68,1.233,69,1.081,73,0.55,74,0.648,75,1.286,77,1.357,78,0.064,79,1.504,80,1.576,81,1.101,82,1.308,83,1.241,84,1.326,85,0.859,86,0.455,87,1.756,97,1.241,98,0.648,100,0.933,101,0.977,102,0.919,103,0.822,104,0.648,105,0.648,107,1.382,108,0.648,109,0.455,110,0.648,112,0.648,114,0.68,115,0.648,117,0.455,121,0.822,128,0.545,129,0.825,131,0.455,135,0.545,136,1.375,155,0.034,156,1.669,158,0.686,159,0.822,160,1.308,161,0.822,162,0.822,163,0.977,164,1.728,165,1.551,167,0.977,169,0.977,170,1.979,171,0.913,175,1.393,176,0.768,179,1.158,180,1.158,181,0.977,182,1.158,186,0.768,189,0.768,190,1.404,192,1.576,193,0.768,203,1.977,244,1.093,249,1.093,250,1.093,251,1.093,252,1.093,253,1.093,254,1.093,255,1.093,256,1.093,257,1.093,266,1.335,268,1.703,269,2.567,270,2.567,271,2.567,272,3.089,273,3.089,274,2.567,275,2.567,276,3.089,277,3.089,278,1.703,279,2.567,280,2.584,281,1.703,282,2.567,283,1.703,284,3.44,285,3.439,286,3.439,287,3.439,288,2.567,289,1.703,290,1.703,291,1.703,292,1.703,293,1.703,294,1.703,295,1.703,296,1.703,297,1.703,298,1.703,299,1.703,300,1.703,301,1.703,302,2.567,303,1.703,304,2.013,305,2.567,306,1.703,307,1.703,308,2.567,309,2.567,310,1.703,311,1.703,312,1.703]],["title/classes/TestTextArea.html",[0,0.136,117,0.679]],["body/classes/TestTextArea.html",[0,0.16,1,0.835,2,0.669,3,0.669,4,0.372,7,1.43,12,1.059,17,0.657,18,1.135,19,1.115,21,0.764,22,0.884,23,1.072,24,1.135,25,0.955,26,0.292,27,1.135,29,1.072,33,1.451,34,1.072,35,1.495,36,1.135,39,1.248,40,0.559,42,1.067,43,0.068,44,1.506,46,1.194,47,0.559,59,1.072,60,0.883,61,1.072,65,1.599,67,1.225,68,1.258,69,1.01,73,0.619,74,0.795,75,1.29,77,1.284,78,0.066,79,1.546,80,1.444,81,1.214,82,1.444,83,1.335,84,1.405,85,0.848,86,0.559,87,1.725,97,1.214,98,0.795,100,1.029,101,1.135,102,1.014,103,0.955,104,0.795,105,0.795,107,1.214,108,0.795,109,0.559,110,0.795,112,0.795,114,0.46,115,0.795,117,0.929,121,0.955,128,0.669,129,0.929,131,0.559,134,0.943,135,0.669,138,1.599,155,0.04,156,1.444,158,0.797,159,0.955,160,1.444,161,0.955,162,0.955,163,1.135,164,1.791,165,1.711,167,1.135,169,1.135,170,2.069,171,1.12,175,1.569,176,0.943,179,1.346,180,1.346,181,1.135,182,1.346,186,0.943,189,0.943,190,1.374,192,1.444,193,0.943,241,2.339,244,1.342,246,2.339,249,1.342,250,1.342,251,1.342,252,1.342,253,1.342,254,1.342,255,1.342,256,1.342,257,1.342,258,1.639,262,2.339,263,1.639,313,2.09,314,2.09,315,2.09,316,2.09]],["title/changelog.html",[21,0.382,317,1.151,318,2.147]],["body/changelog.html",[0,0.179,4,0.594,13,2.818,22,0.594,43,0.055,60,0.896,73,0.594,77,1.069,78,0.055,85,0.594,100,0.735,109,0.892,155,0.055,203,1.79,204,2.619,267,2.144,319,3.339,320,3.339,321,2.619,322,2.144,323,2.619,324,2.619,325,4.389,326,3.339,327,3.339,328,4.069,329,3.736,330,3.339,331,3.339,332,2.619,333,3.339,334,3.339,335,3.339,336,3.339,337,4.069,338,3.339,339,3.339,340,3.339,341,3.339,342,3.339,343,3.339,344,4.069,345,4.389,346,3.339,347,3.339,348,3.339,349,3.339,350,3.339,351,3.339,352,3.339,353,4.389,354,3.339,355,3.339,356,4.069,357,3.339,358,3.339,359,4.069,360,3.339,361,3.845,362,3.845,363,2.619,364,3.339,365,3.191,366,3.339,367,3.339,368,3.191,369,3.339,370,3.339,371,2.144,372,3.339,373,2.619,374,3.339,375,3.339,376,2.619,377,3.339,378,2.619,379,3.339,380,2.619,381,3.339,382,3.339,383,3.339,384,3.339,385,3.339,386,3.339,387,3.339]],["title/dependencies.html",[388,2.147,389,2.385]],["body/dependencies.html",[43,0.065,78,0.06,131,1.042,155,0.06,389,3.058,390,3.9,391,4.46,392,3.9,393,3.9,394,3.9]],["title/miscellaneous/functions.html",[395,1.151,396,2.385]],["body/miscellaneous/functions.html",[17,0.908,20,2.647,26,0.476,31,2.955,43,0.062,46,0.912,50,3.11,65,2.209,67,1.102,68,1.102,69,1.014,73,0.819,78,0.055,100,0.908,134,1.86,155,0.055,395,1.828,396,2.676,397,4.123,398,4.123,399,4.123,400,3.412,401,3.412,402,4.123,403,4.123,404,4.123,405,3.412,406,4.123,407,4.123,408,2.647,409,4.602,410,4.123,411,4.123,412,4.123,413,4.92,414,4.123,415,4.788,416,3.412,417,4.43,418,4.123,419,4.123,420,4.123,421,4.123,422,3.412,423,2.676,424,3.412,425,3.412]],["title/index.html",[21,0.382,26,0.3,317,1.151]],["body/index.html",[0,0.216,1,0.93,4,0.585,11,1.884,12,0.529,13,2.588,14,1.884,16,1.884,17,1.037,19,1.128,20,1.543,21,0.428,22,0.794,25,1.052,26,0.335,28,2.579,29,0.879,31,1.543,32,2.579,33,1.052,34,1.128,35,0.769,37,2.111,38,1.884,39,0.642,40,0.642,42,0.724,43,0.068,47,0.642,59,0.642,60,0.529,61,0.642,69,0.826,73,0.809,75,1.165,78,0.044,79,1.052,81,0.769,85,0.751,103,0.769,109,0.879,114,0.724,120,1.884,128,0.769,129,0.642,136,2.009,155,0.044,158,0.879,159,1.052,161,0.769,162,1.395,163,1.251,181,1.251,190,0.769,192,0.914,240,1.543,280,1.543,304,1.884,317,1.762,321,2.579,322,1.543,323,1.884,324,1.884,332,1.884,361,3.161,362,3.311,363,2.579,368,2.579,371,1.543,408,1.543,426,4.463,427,4.463,428,3.749,429,3.288,430,3.749,431,3.288,432,4.031,433,3.288,434,1.884,435,3.288,436,3.288,437,2.402,438,2.402,439,2.402,440,2.402,441,2.402,442,2.402,443,2.402,444,2.402,445,2.402,446,2.402,447,1.884,448,4.222,449,3.288,450,3.288,451,4.463,452,4.222,453,3.288,454,3.749,455,3.288,456,3.288,457,3.288,458,3.288,459,3.288,460,4.544,461,3.288,462,2.402,463,2.402,464,2.402,465,2.402,466,2.402,467,2.402,468,2.402,469,2.402,470,2.402,471,3.288,472,3.288,473,3.288,474,2.402,475,3.161,476,2.402,477,2.402,478,2.402,479,3.749,480,3.749,481,3.288,482,2.402,483,2.402,484,2.402,485,2.579,486,2.402,487,2.402,488,1.884,489,2.402,490,3.749,491,3.288,492,2.402,493,2.402,494,2.402,495,2.402,496,2.402,497,2.402,498,2.402,499,3.288,500,3.288,501,2.402,502,2.402,503,2.402,504,2.402,505,2.402,506,3.288,507,2.402,508,2.402,509,2.402,510,2.402,511,2.402,512,2.402,513,2.402,514,2.402,515,2.402,516,2.402,517,2.402,518,3.749,519,2.402,520,1.884,521,2.402,522,2.402,523,2.402,524,2.402,525,2.402,526,2.402,527,2.402,528,3.288,529,3.288,530,2.402,531,3.288,532,3.288,533,2.402,534,2.402,535,3.749,536,2.402,537,2.402,538,2.402,539,2.402,540,2.402,541,2.402,542,3.288,543,2.402,544,2.402,545,2.402,546,3.288,547,2.402,548,2.402,549,2.402,550,2.402,551,2.402,552,2.402,553,2.402,554,2.402,555,2.402,556,2.402]],["title/license.html",[21,0.382,317,1.151,557,1.684]],["body/license.html",[4,0.616,17,0.915,43,0.056,78,0.056,155,0.056,158,0.924,190,1.107,322,2.221,329,2.713,423,3.495,447,2.713,475,2.713,520,3.495,557,2.713,558,3.459,559,4.457,560,3.459,561,3.459,562,3.459,563,4.157,564,3.459,565,3.459,566,3.459,567,3.459,568,4.157,569,3.459,570,4.623,571,4.931,572,3.459,573,4.157,574,3.459,575,4.157,576,3.459,577,3.459,578,3.459,579,3.459,580,3.459,581,3.459,582,3.459,583,3.459,584,3.459,585,3.459,586,3.459,587,3.459,588,4.157,589,4.157,590,3.459,591,3.459,592,4.157,593,3.459,594,3.459,595,3.459,596,3.459,597,3.459,598,3.459,599,3.459,600,3.459,601,3.459,602,3.459,603,3.459,604,3.459,605,3.459,606,3.459,607,3.459,608,3.459,609,3.459,610,3.459,611,3.459,612,3.459,613,3.459,614,3.459]],["title/modules.html",[615,2.678]],["body/modules.html",[43,0.06,78,0.06,155,0.06,615,3.107]],["title/overview.html",[616,2.678]],["body/overview.html",[0,0.211,43,0.06,78,0.06,155,0.06,616,3.097,617,3.949]],["title/miscellaneous/variables.html",[395,1.151,618,2.385]],["body/miscellaneous/variables.html",[0,0.172,12,0.845,22,0.881,23,1.113,26,0.484,34,1.152,42,0.328,43,0.069,46,1.06,50,3.181,75,1.222,78,0.031,83,1.473,84,0.476,85,0.882,93,3.111,100,0.934,102,0.928,107,1.27,114,0.898,117,0.759,121,1.228,136,2.582,141,3.196,155,0.031,183,2.227,203,2.184,240,3.06,267,2.892,280,1.824,284,2.723,365,1.167,371,0.955,373,1.167,376,1.167,378,1.167,380,1.167,395,0.797,408,2.058,434,3.111,485,3.97,488,3.796,618,1.167,619,2.84,620,1.488,621,1.488,622,2.314,623,1.488,624,3.968,625,1.488,626,3.968,627,3.968,628,3.968,629,3.968,630,4.751,631,4.989,632,3.968,633,1.488,634,2.314,635,2.314,636,1.488,637,1.488,638,1.488,639,3.968,640,4.504,641,3.968,642,3.968,643,3.968,644,1.488,645,1.488,646,1.488,647,2.314,648,1.488,649,1.488,650,1.488,651,2.314,652,2.314,653,1.488,654,1.488]]],"invertedIndex":[["",{"_index":43,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":304,"title":{},"body":{"classes/TestSelect.html":{},"index.html":{}}}],["0.1.0",{"_index":383,"title":{},"body":{"changelog.html":{}}}],["0.2.0",{"_index":358,"title":{},"body":{"changelog.html":{}}}],["0.2.1",{"_index":357,"title":{},"body":{"changelog.html":{}}}],["0.2.2",{"_index":355,"title":{},"body":{"changelog.html":{}}}],["0.2.3",{"_index":352,"title":{},"body":{"changelog.html":{}}}],["0172de3",{"_index":366,"title":{},"body":{"changelog.html":{}}}],["02",{"_index":331,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":356,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":359,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":353,"title":{},"body":{"changelog.html":{}}}],["065ab58",{"_index":372,"title":{},"body":{"changelog.html":{}}}],["085fd65",{"_index":381,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":328,"title":{},"body":{"changelog.html":{}}}],["11",{"_index":330,"title":{},"body":{"changelog.html":{}}}],["12",{"_index":457,"title":{},"body":{"index.html":{}}}],["13",{"_index":374,"title":{},"body":{"changelog.html":{}}}],["17",{"_index":354,"title":{},"body":{"changelog.html":{}}}],["2018",{"_index":329,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["25",{"_index":384,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":360,"title":{},"body":{"changelog.html":{}}}],["2c49330",{"_index":379,"title":{},"body":{"changelog.html":{}}}],["2e6bce7",{"_index":349,"title":{},"body":{"changelog.html":{}}}],["39d1f3a",{"_index":369,"title":{},"body":{"changelog.html":{}}}],["42",{"_index":351,"title":{},"body":{"changelog.html":{}}}],["6",{"_index":337,"title":{},"body":{"changelog.html":{}}}],["6.3.3",{"_index":394,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":617,"title":{},"body":{"overview.html":{}}}],["7.0.0",{"_index":333,"title":{},"body":{"changelog.html":{}}}],["7.0.2",{"_index":391,"title":{},"body":{"dependencies.html":{}}}],["8036c22",{"_index":382,"title":{},"body":{"changelog.html":{}}}],["a282826",{"_index":364,"title":{},"body":{"changelog.html":{}}}],["abov",{"_index":475,"title":{},"body":{"index.html":{},"license.html":{}}}],["access",{"_index":16,"title":{},"body":{"classes/ComponentTester.html":{},"index.html":{}}}],["accessor",{"_index":36,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["action",{"_index":608,"title":{},"body":{"license.html":{}}}],["activatedrout",{"_index":405,"title":{},"body":{"miscellaneous/functions.html":{}}}],["activatedroutesnapshot",{"_index":425,"title":{},"body":{"miscellaneous/functions.html":{}}}],["actual",{"_index":83,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/variables.html":{}}}],["actual.indexof(expect",{"_index":634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["actual.join",{"_index":637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["actual.length",{"_index":636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["add",{"_index":368,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["addit",{"_index":159,"title":{},"body":{"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["allow",{"_index":20,"title":{},"body":{"classes/ComponentTester.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["alreadi",{"_index":442,"title":{},"body":{"index.html":{}}}],["although",{"_index":334,"title":{},"body":{"changelog.html":{}}}],["alway",{"_index":363,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["and/or",{"_index":582,"title":{},"body":{"license.html":{}}}],["angular",{"_index":13,"title":{},"body":{"classes/ComponentTester.html":{},"changelog.html":{},"index.html":{}}}],["angular/cor",{"_index":131,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"dependencies.html":{}}}],["angular/core/test",{"_index":130,"title":{},"body":{"classes/ComponentTester.html":{}}}],["angular/rout",{"_index":392,"title":{},"body":{"dependencies.html":{}}}],["api",{"_index":11,"title":{},"body":{"classes/ComponentTester.html":{},"index.html":{}}}],["arg",{"_index":70,"title":{},"body":{"classes/ComponentTester.html":{}}}],["aris",{"_index":612,"title":{},"body":{"license.html":{}}}],["around",{"_index":481,"title":{},"body":{"index.html":{}}}],["array",{"_index":107,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/variables.html":{}}}],["array).map(opt",{"_index":309,"title":{},"body":{"classes/TestSelect.html":{}}}],["array.prototype.slice.call(this.nativeelement.classlist",{"_index":218,"title":{},"body":{"classes/TestElement.html":{}}}],["array.prototype.slice.call(this.nativeelement.opt",{"_index":308,"title":{},"body":{"classes/TestSelect.html":{}}}],["assert",{"_index":629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["assert(fals",{"_index":641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["assert(tru",{"_index":643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["associ",{"_index":572,"title":{},"body":{"license.html":{}}}],["attr",{"_index":180,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["attr(nam",{"_index":186,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["attribut",{"_index":160,"title":{},"body":{"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["author",{"_index":601,"title":{},"body":{"license.html":{}}}],["automat",{"_index":482,"title":{},"body":{"index.html":{}}}],["avoid",{"_index":478,"title":{},"body":{"index.html":{}}}],["base",{"_index":332,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["beforeeach",{"_index":506,"title":{},"body":{"index.html":{}}}],["benefit",{"_index":541,"title":{},"body":{"index.html":{}}}],["block",{"_index":544,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":93,"title":{},"body":{"classes/ComponentTester.html":{},"miscellaneous/variables.html":{}}}],["bug",{"_index":344,"title":{},"body":{"changelog.html":{}}}],["button",{"_index":29,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["button(selector",{"_index":74,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["button.t",{"_index":157,"title":{},"body":{"classes/TestButton.html":{}}}],["button.ts:16",{"_index":173,"title":{},"body":{"classes/TestButton.html":{}}}],["button.ts:8",{"_index":168,"title":{},"body":{"classes/TestButton.html":{}}}],["c",{"_index":560,"title":{},"body":{"license.html":{}}}],["call",{"_index":53,"title":{},"body":{"classes/ComponentTester.html":{}}}],["care",{"_index":444,"title":{},"body":{"index.html":{}}}],["case",{"_index":489,"title":{},"body":{"index.html":{}}}],["champagn",{"_index":387,"title":{},"body":{"changelog.html":{}}}],["chang",{"_index":60,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"index.html":{}}}],["changelog",{"_index":318,"title":{"changelog.html":{}},"body":{}}],["charg",{"_index":567,"title":{},"body":{"license.html":{}}}],["check",{"_index":240,"title":{},"body":{"classes/TestInput.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["checknochang",{"_index":95,"title":{},"body":{"classes/ComponentTester.html":{}}}],["citi",{"_index":451,"title":{},"body":{"index.html":{}}}],["claim",{"_index":604,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["cleaner",{"_index":429,"title":{},"body":{"index.html":{}}}],["click",{"_index":165,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["close",{"_index":350,"title":{},"body":{"changelog.html":{}}}],["code",{"_index":418,"title":{},"body":{"miscellaneous/functions.html":{}}}],["commit",{"_index":326,"title":{},"body":{"changelog.html":{}}}],["compar",{"_index":639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["complet",{"_index":518,"title":{},"body":{"index.html":{}}}],["compon",{"_index":47,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["component.spec.t",{"_index":533,"title":{},"body":{"index.html":{}}}],["componentfixtur",{"_index":14,"title":{},"body":{"classes/ComponentTester.html":{},"index.html":{}}}],["componentinst",{"_index":38,"title":{},"body":{"classes/ComponentTester.html":{},"index.html":{}}}],["componenttest",{"_index":1,"title":{"classes/ComponentTester.html":{}},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["componenttester(fixtur",{"_index":139,"title":{},"body":{"classes/ComponentTester.html":{}}}],["componenttyp",{"_index":91,"title":{},"body":{"classes/ComponentTester.html":{}}}],["condit",{"_index":587,"title":{},"body":{"license.html":{}}}],["connect",{"_index":614,"title":{},"body":{"license.html":{}}}],["const",{"_index":136,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestSelect.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":40,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["constructor(arg",{"_index":41,"title":{},"body":{"classes/ComponentTester.html":{}}}],["constructor(protect",{"_index":208,"title":{},"body":{"classes/TestElement.html":{}}}],["constructor(test",{"_index":167,"title":{},"body":{"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["contain",{"_index":408,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["content",{"_index":204,"title":{},"body":{"classes/TestElement.html":{},"changelog.html":{}}}],["contract",{"_index":609,"title":{},"body":{"license.html":{}}}],["copi",{"_index":570,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":559,"title":{},"body":{"license.html":{}}}],["correct",{"_index":513,"title":{},"body":{"index.html":{}}}],["countri",{"_index":452,"title":{},"body":{"index.html":{}}}],["countryselect",{"_index":454,"title":{},"body":{"index.html":{}}}],["countryselect.dispatchevent(new",{"_index":458,"title":{},"body":{"index.html":{}}}],["countryselect.selectedindex",{"_index":456,"title":{},"body":{"index.html":{}}}],["creat",{"_index":31,"title":{},"body":{"classes/ComponentTester.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["create(componenttyp",{"_index":88,"title":{},"body":{"classes/ComponentTester.html":{}}}],["css",{"_index":84,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/variables.html":{}}}],["custom",{"_index":361,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["customequalitytest",{"_index":627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["damag",{"_index":605,"title":{},"body":{"license.html":{}}}],["deal",{"_index":573,"title":{},"body":{"license.html":{}}}],["debug",{"_index":128,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["debugel",{"_index":39,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["default",{"_index":623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defin",{"_index":44,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["deleg",{"_index":49,"title":{},"body":{"classes/ComponentTester.html":{}}}],["demo",{"_index":556,"title":{},"body":{"index.html":{}}}],["depend",{"_index":389,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["descript",{"_index":7,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["detail",{"_index":540,"title":{},"body":{"index.html":{}}}],["detect",{"_index":61,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["detectchang",{"_index":32,"title":{},"body":{"classes/ComponentTester.html":{},"index.html":{}}}],["detectchanges(checknochang",{"_index":92,"title":{},"body":{"classes/ComponentTester.html":{}}}],["dev",{"_index":531,"title":{},"body":{"index.html":{}}}],["directli",{"_index":51,"title":{},"body":{"classes/ComponentTester.html":{}}}],["disabl",{"_index":166,"title":{},"body":{"classes/TestButton.html":{}}}],["dispatch",{"_index":192,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["dispatchev",{"_index":181,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["dispatchevent(ev",{"_index":189,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["dispatcheventoftyp",{"_index":182,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["dispatcheventoftype(typ",{"_index":193,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["display",{"_index":449,"title":{},"body":{"index.html":{}}}],["distribut",{"_index":580,"title":{},"body":{"license.html":{}}}],["doc",{"_index":346,"title":{},"body":{"changelog.html":{}}}],["document",{"_index":322,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["doesn't",{"_index":416,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dom",{"_index":121,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/variables.html":{}}}],["don't",{"_index":422,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dri",{"_index":473,"title":{},"body":{"index.html":{}}}],["e",{"_index":211,"title":{},"body":{"classes/TestElement.html":{}}}],["e0a0472",{"_index":375,"title":{},"body":{"changelog.html":{}}}],["e1163fb",{"_index":377,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":543,"title":{},"body":{"index.html":{}}}],["easier",{"_index":436,"title":{},"body":{"index.html":{}}}],["eee2e97",{"_index":370,"title":{},"body":{"changelog.html":{}}}],["el",{"_index":631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.check",{"_index":648,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.class",{"_index":633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.selectedindex",{"_index":650,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.selectedlabel",{"_index":654,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.selectedvalu",{"_index":653,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.textcont",{"_index":647,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.valu",{"_index":645,"title":{},"body":{"miscellaneous/variables.html":{}}}],["element",{"_index":22,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["element(selector",{"_index":98,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["element.t",{"_index":178,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{}}}],["element.ts:104",{"_index":198,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:114",{"_index":199,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:123",{"_index":188,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:14",{"_index":184,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:16",{"_index":228,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["element.ts:20",{"_index":185,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:24",{"_index":200,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:31",{"_index":202,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:38",{"_index":194,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:46",{"_index":191,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:54",{"_index":206,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:62",{"_index":187,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:74",{"_index":195,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:8",{"_index":226,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["element.ts:86",{"_index":196,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:95",{"_index":197,"title":{},"body":{"classes/TestElement.html":{}}}],["elements(selector",{"_index":105,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["empti",{"_index":109,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"index.html":{}}}],["encourag",{"_index":342,"title":{},"body":{"changelog.html":{}}}],["enjoy",{"_index":545,"title":{},"body":{"index.html":{}}}],["entri",{"_index":9,"title":{},"body":{"classes/ComponentTester.html":{}}}],["equal",{"_index":652,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error",{"_index":81,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["etc",{"_index":490,"title":{},"body":{"index.html":{}}}],["evalu",{"_index":64,"title":{},"body":{"classes/ComponentTester.html":{}}}],["even",{"_index":484,"title":{},"body":{"index.html":{}}}],["event",{"_index":190,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{},"license.html":{}}}],["event('chang",{"_index":459,"title":{},"body":{"index.html":{}}}],["event(typ",{"_index":215,"title":{},"body":{"classes/TestElement.html":{}}}],["everyth",{"_index":512,"title":{},"body":{"index.html":{}}}],["exact",{"_index":646,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exampl",{"_index":25,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["exist",{"_index":495,"title":{},"body":{"index.html":{}}}],["expect",{"_index":485,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["expect(city).tobetruthi",{"_index":463,"title":{},"body":{"index.html":{}}}],["expect(city.options.length).tobe(3",{"_index":464,"title":{},"body":{"index.html":{}}}],["expect(city.options[0].label).tob",{"_index":466,"title":{},"body":{"index.html":{}}}],["expect(city.options[0].value).tob",{"_index":465,"title":{},"body":{"index.html":{}}}],["expect(city.options[1].label).tobe('pari",{"_index":468,"title":{},"body":{"index.html":{}}}],["expect(city.options[1].value).tobe('pari",{"_index":467,"title":{},"body":{"index.html":{}}}],["expect(city.options[2].label).tobe('lyon",{"_index":470,"title":{},"body":{"index.html":{}}}],["expect(city.options[2].value).tobe('lyon",{"_index":469,"title":{},"body":{"index.html":{}}}],["expect(fixture.nativeelement.queryselector('#city')).tobefalsi",{"_index":474,"title":{},"body":{"index.html":{}}}],["expect(tester.city).tobefalsi",{"_index":503,"title":{},"body":{"index.html":{}}}],["expect(tester.city).tohaveselectedlabel('pari",{"_index":515,"title":{},"body":{"index.html":{}}}],["expect(tester.city.optionlabels).toequ",{"_index":501,"title":{},"body":{"index.html":{}}}],["expect(tester.city.optionvalues).toequ",{"_index":498,"title":{},"body":{"index.html":{}}}],["expect(tester.country).tohaveselectedvalue('fr",{"_index":514,"title":{},"body":{"index.html":{}}}],["expect(tester.informationmessage).tocontaintext('pleas",{"_index":511,"title":{},"body":{"index.html":{}}}],["expect(tester.name).tohavevalue('do",{"_index":516,"title":{},"body":{"index.html":{}}}],["expect(tester.newsletter).tobecheck",{"_index":517,"title":{},"body":{"index.html":{}}}],["export",{"_index":135,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["expos",{"_index":536,"title":{},"body":{"index.html":{}}}],["express",{"_index":594,"title":{},"body":{"license.html":{}}}],["extend",{"_index":163,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["fake",{"_index":403,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fakerout",{"_index":397,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fakeroute(opt",{"_index":401,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fakesnapshot",{"_index":399,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fakesnapshot(opt",{"_index":424,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fals",{"_index":267,"title":{},"body":{"classes/TestInput.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["falsi",{"_index":632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["featur",{"_index":367,"title":{},"body":{"changelog.html":{}}}],["feedback",{"_index":549,"title":{},"body":{"index.html":{}}}],["few",{"_index":440,"title":{},"body":{"index.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["fillwith",{"_index":241,"title":{},"body":{"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["fillwith(valu",{"_index":246,"title":{},"body":{"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["fine",{"_index":336,"title":{},"body":{"changelog.html":{}}}],["first",{"_index":77,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{}}}],["fit",{"_index":597,"title":{},"body":{"license.html":{}}}],["fix",{"_index":345,"title":{},"body":{"changelog.html":{}}}],["fixtur",{"_index":28,"title":{},"body":{"classes/ComponentTester.html":{},"index.html":{}}}],["fixture.detectchang",{"_index":461,"title":{},"body":{"index.html":{}}}],["fixture.nativeelement.queryselector('#c",{"_index":462,"title":{},"body":{"index.html":{}}}],["fixture.nativeelement.queryselector('#countri",{"_index":455,"title":{},"body":{"index.html":{}}}],["flag",{"_index":174,"title":{},"body":{"classes/TestButton.html":{}}}],["follow",{"_index":447,"title":{},"body":{"index.html":{},"license.html":{}}}],["form",{"_index":510,"title":{},"body":{"index.html":{}}}],["found",{"_index":101,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["franc",{"_index":453,"title":{},"body":{"index.html":{}}}],["free",{"_index":566,"title":{},"body":{"license.html":{}}}],["french",{"_index":450,"title":{},"body":{"index.html":{}}}],["frequent",{"_index":505,"title":{},"body":{"index.html":{}}}],["function",{"_index":396,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnish",{"_index":585,"title":{},"body":{"license.html":{}}}],["futur",{"_index":338,"title":{},"body":{"changelog.html":{}}}],["get",{"_index":21,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["getcheck",{"_index":260,"title":{},"body":{"classes/TestInput.html":{}}}],["getclass",{"_index":205,"title":{},"body":{"classes/TestElement.html":{}}}],["getcomponentinst",{"_index":124,"title":{},"body":{"classes/ComponentTester.html":{}}}],["getdebugel",{"_index":126,"title":{},"body":{"classes/ComponentTester.html":{}}}],["getdis",{"_index":172,"title":{},"body":{"classes/TestButton.html":{}}}],["getnativeel",{"_index":118,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{}}}],["getoptionlabel",{"_index":298,"title":{},"body":{"classes/TestSelect.html":{}}}],["getoptionvalu",{"_index":296,"title":{},"body":{"classes/TestSelect.html":{}}}],["getselectedindex",{"_index":290,"title":{},"body":{"classes/TestSelect.html":{}}}],["getselectedlabel",{"_index":294,"title":{},"body":{"classes/TestSelect.html":{}}}],["getselectedvalu",{"_index":292,"title":{},"body":{"classes/TestSelect.html":{}}}],["getsiz",{"_index":300,"title":{},"body":{"classes/TestSelect.html":{}}}],["getter",{"_index":537,"title":{},"body":{"index.html":{}}}],["gettextcont",{"_index":201,"title":{},"body":{"classes/TestElement.html":{}}}],["getvalu",{"_index":258,"title":{},"body":{"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["github",{"_index":553,"title":{},"body":{"index.html":{}}}],["give",{"_index":15,"title":{},"body":{"classes/ComponentTester.html":{}}}],["given",{"_index":46,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["goe",{"_index":410,"title":{},"body":{"miscellaneous/functions.html":{}}}],["grant",{"_index":565,"title":{},"body":{"license.html":{}}}],["guarante",{"_index":339,"title":{},"body":{"changelog.html":{}}}],["guidelin",{"_index":327,"title":{},"body":{"changelog.html":{}}}],["help",{"_index":161,"title":{},"body":{"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["herebi",{"_index":564,"title":{},"body":{"license.html":{}}}],["hide",{"_index":471,"title":{},"body":{"index.html":{}}}],["holder",{"_index":602,"title":{},"body":{"license.html":{}}}],["host",{"_index":122,"title":{},"body":{"classes/ComponentTester.html":{}}}],["html",{"_index":175,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["htmlelement",{"_index":123,"title":{},"body":{"classes/ComponentTester.html":{}}}],["impli",{"_index":595,"title":{},"body":{"license.html":{}}}],["import",{"_index":129,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["includ",{"_index":520,"title":{},"body":{"index.html":{},"license.html":{}}}],["index",{"_index":26,"title":{"index.html":{}},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["inherit",{"_index":170,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["input",{"_index":33,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["input(selector",{"_index":110,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["input.t",{"_index":239,"title":{},"body":{"classes/TestInput.html":{}}}],["input.ts:17",{"_index":247,"title":{},"body":{"classes/TestInput.html":{}}}],["input.ts:25",{"_index":259,"title":{},"body":{"classes/TestInput.html":{}}}],["input.ts:32",{"_index":261,"title":{},"body":{"classes/TestInput.html":{}}}],["input.ts:39",{"_index":245,"title":{},"body":{"classes/TestInput.html":{}}}],["input.ts:47",{"_index":248,"title":{},"body":{"classes/TestInput.html":{}}}],["input.ts:8",{"_index":243,"title":{},"body":{"classes/TestInput.html":{}}}],["instal",{"_index":528,"title":{},"body":{"index.html":{}}}],["instanc",{"_index":66,"title":{},"body":{"classes/ComponentTester.html":{}}}],["instanceof",{"_index":141,"title":{},"body":{"classes/ComponentTester.html":{},"miscellaneous/variables.html":{}}}],["instead",{"_index":287,"title":{},"body":{"classes/TestSelect.html":{}}}],["isn't",{"_index":82,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["isneg",{"_index":630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["issu",{"_index":546,"title":{},"body":{"index.html":{}}}],["it'",{"_index":55,"title":{},"body":{"classes/ComponentTester.html":{}}}],["it('should",{"_index":448,"title":{},"body":{"index.html":{}}}],["jasmin",{"_index":504,"title":{},"body":{"index.html":{}}}],["jasmine.addmatchers(speculoosmatch",{"_index":507,"title":{},"body":{"index.html":{}}}],["jasmine.custommatch",{"_index":628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jasmine.custommatcherfactori",{"_index":622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jasmine.custommatcherresult",{"_index":640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jasmine.matchersutil",{"_index":626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kind",{"_index":593,"title":{},"body":{"license.html":{}}}],["know",{"_index":443,"title":{},"body":{"index.html":{}}}],["label",{"_index":284,"title":{},"body":{"classes/TestSelect.html":{},"miscellaneous/variables.html":{}}}],["liabil",{"_index":606,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":603,"title":{},"body":{"license.html":{}}}],["librari",{"_index":437,"title":{},"body":{"index.html":{}}}],["licens",{"_index":557,"title":{"license.html":{}},"body":{"license.html":{}}}],["limit",{"_index":575,"title":{},"body":{"license.html":{}}}],["list",{"_index":519,"title":{},"body":{"index.html":{}}}],["log",{"_index":319,"title":{},"body":{"changelog.html":{}}}],["look",{"_index":554,"title":{},"body":{"index.html":{}}}],["lyon",{"_index":500,"title":{},"body":{"index.html":{}}}],["made",{"_index":54,"title":{},"body":{"classes/ComponentTester.html":{}}}],["main",{"_index":8,"title":{},"body":{"classes/ComponentTester.html":{}}}],["make",{"_index":435,"title":{},"body":{"index.html":{}}}],["match",{"_index":78,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["matcher",{"_index":362,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["merchant",{"_index":596,"title":{},"body":{"license.html":{}}}],["merg",{"_index":578,"title":{},"body":{"license.html":{}}}],["messag",{"_index":488,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["method",{"_index":19,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["minim",{"_index":555,"title":{},"body":{"index.html":{}}}],["minut",{"_index":441,"title":{},"body":{"index.html":{}}}],["miscellan",{"_index":395,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":558,"title":{},"body":{"license.html":{}}}],["modifi",{"_index":577,"title":{},"body":{"license.html":{}}}],["modul",{"_index":615,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":486,"title":{},"body":{"index.html":{}}}],["mycomponenttest",{"_index":491,"title":{},"body":{"index.html":{}}}],["name",{"_index":68,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{}}}],["nativ",{"_index":120,"title":{},"body":{"classes/ComponentTester.html":{},"index.html":{}}}],["nativeel",{"_index":37,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"index.html":{}}}],["necessari",{"_index":62,"title":{},"body":{"classes/ComponentTester.html":{}}}],["need",{"_index":460,"title":{},"body":{"index.html":{}}}],["negativecompar",{"_index":642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["new",{"_index":138,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["ngx",{"_index":426,"title":{},"body":{"index.html":{}}}],["ninja",{"_index":561,"title":{},"body":{"license.html":{}}}],["none",{"_index":638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["noninfring",{"_index":600,"title":{},"body":{"license.html":{}}}],["notabl",{"_index":320,"title":{},"body":{"changelog.html":{}}}],["note",{"_index":52,"title":{},"body":{"classes/ComponentTester.html":{}}}],["noth",{"_index":285,"title":{},"body":{"classes/TestSelect.html":{}}}],["notic",{"_index":588,"title":{},"body":{"license.html":{}}}],["npm",{"_index":529,"title":{},"body":{"index.html":{}}}],["null",{"_index":87,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["number",{"_index":280,"title":{},"body":{"classes/TestSelect.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":432,"title":{},"body":{"index.html":{}}}],["obtain",{"_index":569,"title":{},"body":{"license.html":{}}}],["on",{"_index":539,"title":{},"body":{"index.html":{}}}],["onc",{"_index":58,"title":{},"body":{"classes/ComponentTester.html":{}}}],["option",{"_index":69,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["option'",{"_index":651,"title":{},"body":{"miscellaneous/variables.html":{}}}],["option.label",{"_index":311,"title":{},"body":{"classes/TestSelect.html":{}}}],["option.valu",{"_index":310,"title":{},"body":{"classes/TestSelect.html":{}}}],["optionlabel",{"_index":276,"title":{},"body":{"classes/TestSelect.html":{}}}],["optionvalu",{"_index":275,"title":{},"body":{"classes/TestSelect.html":{}}}],["otherwis",{"_index":611,"title":{},"body":{"license.html":{}}}],["out",{"_index":613,"title":{},"body":{"license.html":{}}}],["overview",{"_index":616,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":388,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":431,"title":{},"body":{"index.html":{}}}],["param",{"_index":134,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{}}}],["paramet",{"_index":67,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{}}}],["parammap",{"_index":407,"title":{},"body":{"miscellaneous/functions.html":{}}}],["parent",{"_index":413,"title":{},"body":{"miscellaneous/functions.html":{}}}],["pari",{"_index":499,"title":{},"body":{"index.html":{}}}],["partial",{"_index":404,"title":{},"body":{"miscellaneous/functions.html":{}}}],["particular",{"_index":598,"title":{},"body":{"license.html":{}}}],["pass",{"_index":50,"title":{},"body":{"classes/ComponentTester.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["pattern",{"_index":433,"title":{},"body":{"index.html":{}}}],["peer",{"_index":390,"title":{},"body":{"dependencies.html":{}}}],["permiss",{"_index":563,"title":{},"body":{"license.html":{}}}],["permit",{"_index":584,"title":{},"body":{"license.html":{}}}],["person",{"_index":568,"title":{},"body":{"license.html":{}}}],["pleas",{"_index":548,"title":{},"body":{"index.html":{}}}],["point",{"_index":10,"title":{},"body":{"classes/ComponentTester.html":{}}}],["popul",{"_index":509,"title":{},"body":{"index.html":{}}}],["portion",{"_index":591,"title":{},"body":{"license.html":{}}}],["pre",{"_index":508,"title":{},"body":{"index.html":{}}}],["prefer",{"_index":538,"title":{},"body":{"index.html":{}}}],["previous",{"_index":472,"title":{},"body":{"index.html":{}}}],["privat",{"_index":207,"title":{},"body":{"classes/TestElement.html":{}}}],["project",{"_index":321,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["properti",{"_index":18,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["provid",{"_index":158,"title":{},"body":{"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{},"license.html":{}}}],["public",{"_index":179,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["publish",{"_index":579,"title":{},"body":{"license.html":{}}}],["pull",{"_index":551,"title":{},"body":{"index.html":{}}}],["purpos",{"_index":599,"title":{},"body":{"license.html":{}}}],["querier",{"_index":133,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{}}}],["queryparam",{"_index":411,"title":{},"body":{"miscellaneous/functions.html":{}}}],["queryparammap",{"_index":412,"title":{},"body":{"miscellaneous/functions.html":{}}}],["question",{"_index":547,"title":{},"body":{"index.html":{}}}],["read",{"_index":483,"title":{},"body":{"index.html":{}}}],["readabl",{"_index":487,"title":{},"body":{"index.html":{}}}],["readm",{"_index":348,"title":{},"body":{"changelog.html":{}}}],["readonli",{"_index":27,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["receiv",{"_index":624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["recommend",{"_index":477,"title":{},"body":{"index.html":{}}}],["releas",{"_index":386,"title":{},"body":{"changelog.html":{}}}],["repetit",{"_index":479,"title":{},"body":{"index.html":{}}}],["request",{"_index":552,"title":{},"body":{"index.html":{}}}],["restrict",{"_index":574,"title":{},"body":{"license.html":{}}}],["result",{"_index":155,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":85,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["right",{"_index":576,"title":{},"body":{"license.html":{}}}],["rout",{"_index":414,"title":{},"body":{"miscellaneous/functions.html":{}}}],["route'",{"_index":406,"title":{},"body":{"miscellaneous/functions.html":{}}}],["route.parent.snapshot",{"_index":420,"title":{},"body":{"miscellaneous/functions.html":{}}}],["route.snapshot.par",{"_index":421,"title":{},"body":{"miscellaneous/functions.html":{}}}],["run",{"_index":335,"title":{},"body":{"changelog.html":{}}}],["rxj",{"_index":393,"title":{},"body":{"dependencies.html":{}}}],["same",{"_index":409,"title":{},"body":{"miscellaneous/functions.html":{}}}],["save",{"_index":530,"title":{},"body":{"index.html":{}}}],["see",{"_index":323,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["select",{"_index":34,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["select(selector",{"_index":112,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["select.t",{"_index":268,"title":{},"body":{"classes/TestSelect.html":{}}}],["select.ts:16",{"_index":281,"title":{},"body":{"classes/TestSelect.html":{}}}],["select.ts:26",{"_index":289,"title":{},"body":{"classes/TestSelect.html":{}}}],["select.ts:38",{"_index":283,"title":{},"body":{"classes/TestSelect.html":{}}}],["select.ts:48",{"_index":291,"title":{},"body":{"classes/TestSelect.html":{}}}],["select.ts:55",{"_index":293,"title":{},"body":{"classes/TestSelect.html":{}}}],["select.ts:65",{"_index":295,"title":{},"body":{"classes/TestSelect.html":{}}}],["select.ts:75",{"_index":297,"title":{},"body":{"classes/TestSelect.html":{}}}],["select.ts:8",{"_index":278,"title":{},"body":{"classes/TestSelect.html":{}}}],["select.ts:82",{"_index":299,"title":{},"body":{"classes/TestSelect.html":{}}}],["select.ts:89",{"_index":301,"title":{},"body":{"classes/TestSelect.html":{}}}],["selectedindex",{"_index":272,"title":{},"body":{"classes/TestSelect.html":{}}}],["selectedlabel",{"_index":274,"title":{},"body":{"classes/TestSelect.html":{}}}],["selectedvalu",{"_index":273,"title":{},"body":{"classes/TestSelect.html":{}}}],["selectindex",{"_index":269,"title":{},"body":{"classes/TestSelect.html":{}}}],["selectindex(index",{"_index":279,"title":{},"body":{"classes/TestSelect.html":{}}}],["selectlabel",{"_index":270,"title":{},"body":{"classes/TestSelect.html":{}}}],["selectlabel(label",{"_index":282,"title":{},"body":{"classes/TestSelect.html":{}}}],["selector",{"_index":79,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["selectvalu",{"_index":271,"title":{},"body":{"classes/TestSelect.html":{}}}],["selectvalue(valu",{"_index":288,"title":{},"body":{"classes/TestSelect.html":{}}}],["sell",{"_index":583,"title":{},"body":{"license.html":{}}}],["set",{"_index":65,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{}}}],["shall",{"_index":589,"title":{},"body":{"license.html":{}}}],["shown",{"_index":535,"title":{},"body":{"index.html":{}}}],["similar",{"_index":494,"title":{},"body":{"index.html":{}}}],["simpler",{"_index":428,"title":{},"body":{"index.html":{}}}],["simpli",{"_index":438,"title":{},"body":{"index.html":{}}}],["size",{"_index":277,"title":{},"body":{"classes/TestSelect.html":{}}}],["snapshot",{"_index":415,"title":{},"body":{"miscellaneous/functions.html":{}}}],["snapshot'",{"_index":417,"title":{},"body":{"miscellaneous/functions.html":{}}}],["softwar",{"_index":571,"title":{},"body":{"license.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["speculoo",{"_index":427,"title":{},"body":{"index.html":{}}}],["speculoosmatch",{"_index":619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["squad",{"_index":562,"title":{},"body":{"license.html":{}}}],["src/.../matchers.t",{"_index":620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../route.t",{"_index":398,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/lib/compon",{"_index":5,"title":{},"body":{"classes/ComponentTester.html":{}}}],["src/lib/matchers.t",{"_index":621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/lib/route.t",{"_index":400,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/lib/test",{"_index":156,"title":{},"body":{"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["standard",{"_index":324,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["start",{"_index":317,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["static",{"_index":30,"title":{},"body":{"classes/ComponentTester.html":{}}}],["string",{"_index":75,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["subclass",{"_index":24,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["subject",{"_index":586,"title":{},"body":{"license.html":{}}}],["sublicens",{"_index":581,"title":{},"body":{"license.html":{}}}],["submit",{"_index":550,"title":{},"body":{"index.html":{}}}],["substanti",{"_index":590,"title":{},"body":{"license.html":{}}}],["super(mycompon",{"_index":492,"title":{},"body":{"index.html":{}}}],["super(test",{"_index":176,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["support",{"_index":340,"title":{},"body":{"changelog.html":{}}}],["t",{"_index":90,"title":{},"body":{"classes/ComponentTester.html":{}}}],["templat",{"_index":63,"title":{},"body":{"classes/ComponentTester.html":{}}}],["test",{"_index":73,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["testb",{"_index":48,"title":{},"body":{"classes/ComponentTester.html":{}}}],["testbed.createcomponent(arg",{"_index":142,"title":{},"body":{"classes/ComponentTester.html":{}}}],["testbed.createcomponent(componenttyp",{"_index":137,"title":{},"body":{"classes/ComponentTester.html":{}}}],["testbutton",{"_index":86,"title":{"classes/TestButton.html":{}},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testel",{"_index":23,"title":{"classes/TestElement.html":{}},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/variables.html":{}}}],["testelement:104",{"_index":236,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["testelement:114",{"_index":237,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["testelement:123",{"_index":230,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["testelement:20",{"_index":227,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["testelement:38",{"_index":232,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["testelement:46",{"_index":231,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["testelement:62",{"_index":229,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["testelement:74",{"_index":233,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["testelement:86",{"_index":234,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["testelement:95",{"_index":235,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["testelementqueri",{"_index":132,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{}}}],["testelementquerier(test",{"_index":210,"title":{},"body":{"classes/TestElement.html":{}}}],["testelementquerier.wrap(this.debugel",{"_index":144,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester",{"_index":169,"title":{},"body":{"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["tester.country.selectindex(0",{"_index":502,"title":{},"body":{"index.html":{}}}],["tester.country.selectlabel('fr",{"_index":497,"title":{},"body":{"index.html":{}}}],["tester.element('#som",{"_index":104,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["tester.elements('input",{"_index":108,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["tester.t",{"_index":6,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:101",{"_index":111,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:110",{"_index":113,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:120",{"_index":116,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:129",{"_index":76,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:136",{"_index":94,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:20",{"_index":72,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:25",{"_index":71,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:30",{"_index":89,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:33",{"_index":45,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:54",{"_index":119,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:61",{"_index":125,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:68",{"_index":127,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:80",{"_index":99,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:92",{"_index":106,"title":{},"body":{"classes/ComponentTester.html":{}}}],["testhtmlel",{"_index":164,"title":{"classes/TestHtmlElement.html":{}},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testhtmlelement:104",{"_index":256,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testhtmlelement:114",{"_index":257,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testhtmlelement:123",{"_index":250,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testhtmlelement:16",{"_index":171,"title":{},"body":{"classes/TestButton.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testhtmlelement:20",{"_index":244,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testhtmlelement:38",{"_index":252,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testhtmlelement:46",{"_index":251,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testhtmlelement:62",{"_index":249,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testhtmlelement:74",{"_index":253,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testhtmlelement:86",{"_index":254,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testhtmlelement:95",{"_index":255,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testinput",{"_index":102,"title":{"classes/TestInput.html":{}},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/variables.html":{}}}],["testselect",{"_index":114,"title":{"classes/TestSelect.html":{}},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["testtextarea",{"_index":117,"title":{"classes/TestTextArea.html":{}},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/variables.html":{}}}],["testxxx",{"_index":542,"title":{},"body":{"index.html":{}}}],["text",{"_index":203,"title":{},"body":{"classes/TestElement.html":{},"classes/TestSelect.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["textarea",{"_index":35,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["textarea(selector",{"_index":115,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["textarea.t",{"_index":313,"title":{},"body":{"classes/TestTextArea.html":{}}}],["textarea.ts:17",{"_index":315,"title":{},"body":{"classes/TestTextArea.html":{}}}],["textarea.ts:25",{"_index":316,"title":{},"body":{"classes/TestTextArea.html":{}}}],["textarea.ts:8",{"_index":314,"title":{},"body":{"classes/TestTextArea.html":{}}}],["textcont",{"_index":183,"title":{},"body":{"classes/TestElement.html":{},"miscellaneous/variables.html":{}}}],["this.debugelement.nativeel",{"_index":212,"title":{},"body":{"classes/TestElement.html":{}}}],["this.dispatcheventoftype('chang",{"_index":266,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{}}}],["this.dispatcheventoftype('input",{"_index":263,"title":{},"body":{"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["this.fixtur",{"_index":140,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.fixture.componentinst",{"_index":146,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.fixture.debugel",{"_index":147,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.fixture.detectchanges(checknochang",{"_index":154,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.fixture.nativeel",{"_index":145,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.nativeelement.check",{"_index":264,"title":{},"body":{"classes/TestInput.html":{}}}],["this.nativeelement.click",{"_index":238,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["this.nativeelement.dis",{"_index":177,"title":{},"body":{"classes/TestButton.html":{}}}],["this.nativeelement.dispatchevent(ev",{"_index":217,"title":{},"body":{"classes/TestElement.html":{}}}],["this.nativeelement.dispatchevent(new",{"_index":214,"title":{},"body":{"classes/TestElement.html":{}}}],["this.nativeelement.getattribute(nam",{"_index":219,"title":{},"body":{"classes/TestElement.html":{}}}],["this.nativeelement.options.length",{"_index":312,"title":{},"body":{"classes/TestSelect.html":{}}}],["this.nativeelement.selectedindex",{"_index":302,"title":{},"body":{"classes/TestSelect.html":{}}}],["this.nativeelement.textcont",{"_index":213,"title":{},"body":{"classes/TestElement.html":{}}}],["this.nativeelement.valu",{"_index":262,"title":{},"body":{"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["this.optionlabels.indexof(label",{"_index":306,"title":{},"body":{"classes/TestSelect.html":{}}}],["this.optionvalues.indexof(valu",{"_index":303,"title":{},"body":{"classes/TestSelect.html":{}}}],["this.queri",{"_index":209,"title":{},"body":{"classes/TestElement.html":{}}}],["this.querier.button(selector",{"_index":225,"title":{},"body":{"classes/TestElement.html":{}}}],["this.querier.element(selector",{"_index":220,"title":{},"body":{"classes/TestElement.html":{}}}],["this.querier.elements(selector",{"_index":221,"title":{},"body":{"classes/TestElement.html":{}}}],["this.querier.input(selector",{"_index":222,"title":{},"body":{"classes/TestElement.html":{}}}],["this.querier.select(selector",{"_index":223,"title":{},"body":{"classes/TestElement.html":{}}}],["this.querier.textarea(selector",{"_index":224,"title":{},"body":{"classes/TestElement.html":{}}}],["this.select('#c",{"_index":496,"title":{},"body":{"index.html":{}}}],["this.select('#countri",{"_index":493,"title":{},"body":{"index.html":{}}}],["this.selectedindex",{"_index":307,"title":{},"body":{"classes/TestSelect.html":{}}}],["this.selectindex(index",{"_index":305,"title":{},"body":{"classes/TestSelect.html":{}}}],["this.testel",{"_index":143,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.testelement.button(selector",{"_index":153,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.testelement.element(selector",{"_index":148,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.testelement.elements(selector",{"_index":149,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.testelement.input(selector",{"_index":150,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.testelement.select(selector",{"_index":151,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.testelement.textarea(selector",{"_index":152,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.tester.detectchang",{"_index":216,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{}}}],["though",{"_index":341,"title":{},"body":{"changelog.html":{}}}],["throw",{"_index":80,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["thu",{"_index":103,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["tobecheck",{"_index":371,"title":{},"body":{"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["tocontaintext",{"_index":373,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["tocontaintext(textcont",{"_index":524,"title":{},"body":{"index.html":{}}}],["todo",{"_index":286,"title":{},"body":{"classes/TestSelect.html":{}}}],["tohaveclass",{"_index":625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tohaveclass(classnam",{"_index":521,"title":{},"body":{"index.html":{}}}],["tohaveselectedindex",{"_index":376,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["tohaveselectedindex(index",{"_index":525,"title":{},"body":{"index.html":{}}}],["tohaveselectedlabel",{"_index":378,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["tohaveselectedlabel(label",{"_index":527,"title":{},"body":{"index.html":{}}}],["tohaveselectedvalu",{"_index":380,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["tohaveselectedvalue(valu",{"_index":526,"title":{},"body":{"index.html":{}}}],["tohavetext",{"_index":365,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["tohavetext(textcont",{"_index":523,"title":{},"body":{"index.html":{}}}],["tohavevalu",{"_index":644,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tohavevalue(valu",{"_index":522,"title":{},"body":{"index.html":{}}}],["tort",{"_index":610,"title":{},"body":{"license.html":{}}}],["trigger",{"_index":59,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["true",{"_index":265,"title":{},"body":{"classes/TestInput.html":{}}}],["type",{"_index":42,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["typic",{"_index":534,"title":{},"body":{"index.html":{}}}],["typo",{"_index":347,"title":{},"body":{"changelog.html":{}}}],["ugrad",{"_index":343,"title":{},"body":{"changelog.html":{}}}],["uncheck",{"_index":242,"title":{},"body":{"classes/TestInput.html":{}}}],["undefin",{"_index":402,"title":{},"body":{"miscellaneous/functions.html":{}}}],["under",{"_index":419,"title":{},"body":{"miscellaneous/functions.html":{}}}],["understand",{"_index":439,"title":{},"body":{"index.html":{}}}],["unit",{"_index":430,"title":{},"body":{"index.html":{}}}],["up",{"_index":56,"title":{},"body":{"classes/ComponentTester.html":{}}}],["us",{"_index":17,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{}}}],["user",{"_index":57,"title":{},"body":{"classes/ComponentTester.html":{}}}],["util",{"_index":434,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["valu",{"_index":100,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["variabl",{"_index":618,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["veri",{"_index":385,"title":{},"body":{"changelog.html":{}}}],["version",{"_index":325,"title":{},"body":{"changelog.html":{}}}],["void",{"_index":97,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["warranti",{"_index":592,"title":{},"body":{"license.html":{}}}],["was${!isneg",{"_index":649,"title":{},"body":{"miscellaneous/variables.html":{}}}],["way",{"_index":476,"title":{},"body":{"index.html":{}}}],["whether",{"_index":607,"title":{},"body":{"license.html":{}}}],["without",{"_index":423,"title":{},"body":{"miscellaneous/functions.html":{},"license.html":{}}}],["wrap",{"_index":12,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["wrapper",{"_index":480,"title":{},"body":{"index.html":{}}}],["write",{"_index":162,"title":{},"body":{"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["written",{"_index":446,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":532,"title":{},"body":{"index.html":{}}}],["ye",{"_index":96,"title":{},"body":{"classes/ComponentTester.html":{}}}],["you'v",{"_index":445,"title":{},"body":{"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/ComponentTester.html":{"url":"classes/ComponentTester.html","title":"class - ComponentTester","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ComponentTester\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/component-tester.ts\n        \n\n            \n                Description\n            \n            \n                The main entry point of the API. It wraps an Angular ComponentFixture, and gives access to its\nmost used properties and methods. It also allows getting elements wrapped in TestElement (and its subclasses)\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                fixture\n                            \n                            \n                                    Readonly\n                                testElement\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                button\n                            \n                            \n                                    Static\n                                create\n                            \n                            \n                                detectChanges\n                            \n                            \n                                element\n                            \n                            \n                                elements\n                            \n                            \n                                input\n                            \n                            \n                                select\n                            \n                            \n                                textarea\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    nativeElement\n                                \n                                \n                                    componentInstance\n                                \n                                \n                                    debugElement\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(arg: Type | ComponentFixture)\n                    \n                \n                        \n                            \n                                Defined in src/lib/component-tester.ts:33\n                            \n                        \n\n                \n                    \n                            Creates a ComponentFixture for the given component type using the TestBed, and creates a ComponentTester\nwrapping (and delegating) to this fixture. If a fixture is passed, then delegates to this fixture directly.\nNote that no detectChanges() call is made by this constructor. It's up to the subclass constructor,\nor to the user of the created ComponentTester, to call detectChanges() at least once to trigger change\ndetection. This is necessary because some component templates can only be evaluated once inputs\nhave been set on the component instance.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        arg\n                                                  \n                                                        \n                                                                    Type | ComponentFixture\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                the type of the component to wrap, or a component fixture to wrap\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            fixture\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        fixture:     ComponentFixture\n\n                    \n                \n                    \n                        \n                            Type :     ComponentFixture\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/component-tester.ts:25\n                            \n                        \n\n                \n                    \n                        The component fixture of the component\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            testElement\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        testElement:     TestElement\n\n                    \n                \n                    \n                        \n                            Type :     TestElement\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/component-tester.ts:20\n                            \n                        \n\n                \n                    \n                        The test element of the component\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            button\n                            \n                            \n                        \n                    \n                \n                \n                    \nbutton(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/component-tester.ts:129\n                            \n                        \n\n\n                \n                    \n                            Gets the first button matched by the given selector. Throws an Error if the matched element isn't actually a button.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestButton | null\n\n                            \n                                \n                                    the wrapped button, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            create\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        create(componentType: Type)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/component-tester.ts:30\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n                            Creates a component fixture of the given type with the TestBed and wraps it into a ComponentTester\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        componentType\n                                                        \n                                                                    Type\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     ComponentTester\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            detectChanges\n                            \n                            \n                        \n                    \n                \n                \n                    \ndetectChanges(checkNoChanges?: boolean)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/component-tester.ts:136\n                            \n                        \n\n\n                \n                    \n                            Triggers a change detection using the wrapped fixture\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        checkNoChanges\n                                                        \n                                                                    boolean\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            element\n                            \n                            \n                        \n                    \n                \n                \n                    \nelement(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/component-tester.ts:80\n                            \n                        \n\n\n                \n                    \n                            Gets the first element matching the given CSS selector and wraps it into a TestElement. The actual type\nof the returned value is the TestElement subclass matching the type of the found element. So, if the\nmatched element is an input for example, the method will return a TestInput. You can thus use\ntester.element('#some-input') as TestInput.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestElement | null\n\n                            \n                                \n                                    the wrapped element, or null if no element matches the selector.\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            elements\n                            \n                            \n                        \n                    \n                \n                \n                    \nelements(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/component-tester.ts:92\n                            \n                        \n\n\n                \n                    \n                            Gets all the elements matching the given CSS selector and wraps them into a TestElement. The actual type\nof the returned elements is the TestElement subclass matching the type of the found element. So, if the\nmatched elements are inputs for example, the method will return an array of TestInput. You can thus use\ntester.elements('input') as Array.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Array>\n\n                            \n                                \n                                    the array of matched elements, empty if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            input\n                            \n                            \n                        \n                    \n                \n                \n                    \ninput(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/component-tester.ts:101\n                            \n                        \n\n\n                \n                    \n                            Gets the first input matched by the given selector. Throws an Error if the matched element isn't actually an input.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestInput | null\n\n                            \n                                \n                                    the wrapped input, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            select\n                            \n                            \n                        \n                    \n                \n                \n                    \nselect(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/component-tester.ts:110\n                            \n                        \n\n\n                \n                    \n                            Gets the first select matched by the given selector. Throws an Error if the matched element isn't actually a select.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestSelect | null\n\n                            \n                                \n                                    the wrapped select, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            textarea\n                            \n                            \n                        \n                    \n                \n                \n                    \ntextarea(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/component-tester.ts:120\n                            \n                        \n\n\n                \n                    \n                            Gets the first textarea matched by the given selector\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestTextArea | null\n\n                            \n                                \n                                    the wrapped textarea, or null if no element was matched. Throws an Error if the matched element isn't actually a textarea.\n\n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        nativeElement\n                    \n                \n\n                \n                    \n                        getnativeElement()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/component-tester.ts:54\n                                \n                            \n                    \n                        \n                                The native DOM host element of the component\n\n\n                                \n                                    Returns :     HTMLElement\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        componentInstance\n                    \n                \n\n                \n                    \n                        getcomponentInstance()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/component-tester.ts:61\n                                \n                            \n                    \n                        \n                                Gets the instance of the tested component from the wrapped fixture\n\n\n                                \n                                    Returns :     T\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        debugElement\n                    \n                \n\n                \n                    \n                        getdebugElement()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/component-tester.ts:68\n                                \n                            \n                    \n                        \n                                Gets the debug element from the wrapped fixture\n\n\n                                \n                                    Returns :     DebugElement\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { DebugElement, Type } from '@angular/core';\nimport { TestTextArea } from './test-textarea';\nimport { TestElement } from './test-element';\nimport { TestInput } from './test-input';\nimport { TestSelect } from './test-select';\nimport { TestButton } from './test-button';\nimport { TestElementQuerier } from './test-element-querier';\n\n/**\n * The main entry point of the API. It wraps an Angular ComponentFixture, and gives access to its\n * most used properties and methods. It also allows getting elements wrapped in TestElement (and its subclasses)\n * @param  the type of the component to test\n */\nexport class ComponentTester {\n\n  /**\n   * The test element of the component\n   */\n  readonly testElement: TestElement;\n\n  /**\n   * The component fixture of the component\n   */\n  readonly fixture: ComponentFixture;\n\n  /**\n   * Creates a component fixture of the given type with the TestBed and wraps it into a ComponentTester\n   */\n  static create(componentType: Type) {\n    const fixture = TestBed.createComponent(componentType);\n    return new ComponentTester(fixture);\n  }\n\n  /**\n   * Creates a ComponentFixture for the given component type using the TestBed, and creates a ComponentTester\n   * wrapping (and delegating) to this fixture. If a fixture is passed, then delegates to this fixture directly.\n   *\n   * Note that no `detectChanges()` call is made by this constructor. It's up to the subclass constructor,\n   * or to the user of the created ComponentTester, to call `detectChanges()` at least once to trigger change\n   * detection. This is necessary because some component templates can only be evaluated once inputs\n   * have been set on the component instance.\n   *\n   * @param arg the type of the component to wrap, or a component fixture to wrap\n   */\n  constructor(arg: Type | ComponentFixture) {\n    this.fixture = (arg instanceof ComponentFixture) ? arg : TestBed.createComponent(arg);\n    this.testElement = TestElementQuerier.wrap(this.debugElement, this);\n  }\n\n  /**\n   * The native DOM host element of the component\n   */\n  get nativeElement(): HTMLElement {\n    return this.fixture.nativeElement;\n  }\n\n  /**\n   * Gets the instance of the tested component from the wrapped fixture\n   */\n  get componentInstance(): T {\n    return this.fixture.componentInstance;\n  }\n\n  /**\n   * Gets the debug element from the wrapped fixture\n   */\n  get debugElement(): DebugElement {\n    return this.fixture.debugElement;\n  }\n\n  /**\n   * Gets the first element matching the given CSS selector and wraps it into a TestElement. The actual type\n   * of the returned value is the TestElement subclass matching the type of the found element. So, if the\n   * matched element is an input for example, the method will return a TestInput. You can thus use\n   * `tester.element('#some-input') as TestInput`.\n   * @param selector a CSS selector\n   * @returns the wrapped element, or null if no element matches the selector.\n   */\n  element(selector: string): TestElement | null {\n    return this.testElement.element(selector);\n  }\n\n  /**\n   * Gets all the elements matching the given CSS selector and wraps them into a TestElement. The actual type\n   * of the returned elements is the TestElement subclass matching the type of the found element. So, if the\n   * matched elements are inputs for example, the method will return an array of TestInput. You can thus use\n   * `tester.elements('input') as Array`.\n   * @param selector a CSS selector\n   * @returns the array of matched elements, empty if no element was matched\n   */\n  elements(selector: string): Array> {\n    return this.testElement.elements(selector);\n  }\n\n  /**\n   * Gets the first input matched by the given selector. Throws an Error if the matched element isn't actually an input.\n   * @param selector a CSS selector\n   * @returns the wrapped input, or null if no element was matched\n   */\n  input(selector: string): TestInput | null  {\n    return this.testElement.input(selector);\n  }\n\n  /**\n   * Gets the first select matched by the given selector. Throws an Error if the matched element isn't actually a select.\n   * @param selector a CSS selector\n   * @returns the wrapped select, or null if no element was matched\n   */\n  select(selector: string): TestSelect | null  {\n    return this.testElement.select(selector);\n  }\n\n  /**\n   * Gets the first textarea matched by the given selector\n   * @param selector a CSS selector\n   * @returns the wrapped textarea, or null if no element was matched. Throws an Error if the matched element isn't actually a textarea.\n   * @throws {Error} if the matched element isn't actually a textarea\n   */\n  textarea(selector: string): TestTextArea | null {\n    return this.testElement.textarea(selector);\n  }\n\n  /**\n   * Gets the first button matched by the given selector. Throws an Error if the matched element isn't actually a button.\n   * @param selector a CSS selector\n   * @returns the wrapped button, or null if no element was matched\n   */\n  button(selector: string): TestButton | null {\n    return this.testElement.button(selector);\n  }\n\n  /**\n   * Triggers a change detection using the wrapped fixture\n   */\n  detectChanges(checkNoChanges?: boolean) {\n    this.fixture.detectChanges(checkNoChanges);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TestButton.html":{"url":"classes/TestButton.html","title":"class - TestButton","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TestButton\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/test-button.ts\n        \n\n            \n                Description\n            \n            \n                A wrapped button element, providing additional methods and attributes helping with writing tests\n\n            \n\n            \n                Extends\n            \n            \n                    TestHtmlElement\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    disabled\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tester: ComponentTester, debugElement: DebugElement)\n                    \n                \n                        \n                            \n                                Defined in src/lib/test-button.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tester\n                                                  \n                                                        \n                                                                    ComponentTester\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        debugElement\n                                                  \n                                                        \n                                                                    DebugElement\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            click\n                            \n                            \n                        \n                    \n                \n                \n                    \nclick()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:16\n                            \n                        \n\n\n                \n                    \n                            Clicks on the wrapped element, then triggers a change detection\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        disabled\n                    \n                \n\n                \n                    \n                        getdisabled()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-button.ts:16\n                                \n                            \n                    \n                        \n                                the disabled flag of the button\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { ComponentTester } from './component-tester';\nimport { TestHtmlElement } from './test-html-element';\nimport { DebugElement } from '@angular/core';\n\n/**\n * A wrapped button element, providing additional methods and attributes helping with writing tests\n */\nexport class TestButton extends TestHtmlElement {\n  constructor(tester: ComponentTester, debugElement: DebugElement) {\n    super(tester, debugElement);\n  }\n\n  /**\n   * the disabled flag of the button\n   */\n  get disabled() {\n    return this.nativeElement.disabled;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TestElement.html":{"url":"classes/TestElement.html","title":"class - TestElement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TestElement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/test-element.ts\n        \n\n            \n                Description\n            \n            \n                A wrapped DOM element, providing additional methods and attributes helping with writing tests\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                debugElement\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                attr\n                            \n                            \n                                button\n                            \n                            \n                                dispatchEvent\n                            \n                            \n                                dispatchEventOfType\n                            \n                            \n                                element\n                            \n                            \n                                elements\n                            \n                            \n                                input\n                            \n                            \n                                select\n                            \n                            \n                                textarea\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    nativeElement\n                                \n                                \n                                    textContent\n                                \n                                \n                                    classes\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tester: ComponentTester, debugElement: DebugElement)\n                    \n                \n                        \n                            \n                                Defined in src/lib/test-element.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tester\n                                                  \n                                                        \n                                                                    ComponentTester\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        debugElement\n                                                  \n                                                        \n                                                                    DebugElement\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            debugElement\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        debugElement:     DebugElement\n\n                    \n                \n                    \n                        \n                            Type :     DebugElement\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/test-element.ts:20\n                            \n                        \n\n                \n                    \n                        the wrapped debug element\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            attr\n                            \n                            \n                        \n                    \n                \n                \n                    \nattr(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-element.ts:62\n                            \n                        \n\n\n                \n                    \n                            Gets the attribute of the wrapped element with the given name\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                the name of the attribute to get\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            button\n                            \n                            \n                        \n                    \n                \n                \n                    \nbutton(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-element.ts:123\n                            \n                        \n\n\n                \n                    \n                            Gets the first button matched by the given selector. Throws an Error if the matched element isn't actually a button.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestButton | null\n\n                            \n                                \n                                    the wrapped button, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dispatchEvent\n                            \n                            \n                        \n                    \n                \n                \n                    \ndispatchEvent(event: Event)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-element.ts:46\n                            \n                        \n\n\n                \n                    \n                            dispatches the given event from the wrapped element, then triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        event\n                                                        \n                                                                    Event\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dispatchEventOfType\n                            \n                            \n                        \n                    \n                \n                \n                    \ndispatchEventOfType(type: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-element.ts:38\n                            \n                        \n\n\n                \n                    \n                            dispatches an event of the given type from the wrapped element, then triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        type\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            element\n                            \n                            \n                        \n                    \n                \n                \n                    \nelement(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-element.ts:74\n                            \n                        \n\n\n                \n                    \n                            Gets the first element matching the given CSS selector and wraps it into a TestElement. The actual type\nof the returned value is the TestElement subclass matching the type of the found element. So, if the\nmatched element is an input for example, the method will return a TestInput. You can thus use\ntester.element('#some-input') as TestInput.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestElement | null\n\n                            \n                                \n                                    the wrapped element, or null if no element matches the selector.\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            elements\n                            \n                            \n                        \n                    \n                \n                \n                    \nelements(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-element.ts:86\n                            \n                        \n\n\n                \n                    \n                            Gets all the elements matching the given CSS selector and wraps them into a TestElement. The actual type\nof the returned elements is the TestElement subclass matching the type of the found element. So, if the\nmatched elements are inputs for example, the method will return an array of TestInput. You can thus use\ntester.elements('input') as Array.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Array>\n\n                            \n                                \n                                    the array of matched elements, empty if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            input\n                            \n                            \n                        \n                    \n                \n                \n                    \ninput(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-element.ts:95\n                            \n                        \n\n\n                \n                    \n                            Gets the first input matched by the given selector. Throws an Error if the matched element isn't actually an input.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestInput | null\n\n                            \n                                \n                                    the wrapped input, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            select\n                            \n                            \n                        \n                    \n                \n                \n                    \nselect(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-element.ts:104\n                            \n                        \n\n\n                \n                    \n                            Gets the first select matched by the given selector. Throws an Error if the matched element isn't actually a select.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestSelect | null\n\n                            \n                                \n                                    the wrapped select, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            textarea\n                            \n                            \n                        \n                    \n                \n                \n                    \ntextarea(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-element.ts:114\n                            \n                        \n\n\n                \n                    \n                            Gets the first textarea matched by the given selector\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestTextArea | null\n\n                            \n                                \n                                    the wrapped textarea, or null if no element was matched. Throws an Error if the matched element isn't actually a textarea.\n\n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        nativeElement\n                    \n                \n\n                \n                    \n                        getnativeElement()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-element.ts:24\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        textContent\n                    \n                \n\n                \n                    \n                        gettextContent()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-element.ts:31\n                                \n                            \n                    \n                        \n                                the text content of this element\n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        classes\n                    \n                \n\n                \n                    \n                        getclasses()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-element.ts:54\n                                \n                            \n                    \n                        \n                                Gets the CSS classes of the wrapped element, as an array\n\n\n                                \n                                    Returns :     Array\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { ComponentTester } from './component-tester';\nimport { TestButton } from './test-button';\nimport { TestSelect } from './test-select';\nimport { TestTextArea } from './test-textarea';\nimport { TestInput } from './test-input';\nimport { TestElementQuerier } from './test-element-querier';\nimport { DebugElement } from '@angular/core';\n\n/**\n * A wrapped DOM element, providing additional methods and attributes helping with writing tests\n */\nexport class TestElement {\n\n  private querier: TestElementQuerier;\n\n  constructor(protected tester: ComponentTester,\n              /**\n               * the wrapped debug element\n               */\n              public readonly debugElement: DebugElement) {\n    this.querier = new TestElementQuerier(tester, debugElement);\n  }\n\n  get nativeElement(): E {\n    return this.debugElement.nativeElement;\n  }\n\n  /**\n   * the text content of this element\n   */\n  get textContent() {\n    return this.nativeElement.textContent;\n  }\n\n  /**\n   * dispatches an event of the given type from the wrapped element, then triggers a change detection\n   */\n  dispatchEventOfType(type: string) {\n    this.nativeElement.dispatchEvent(new Event(type));\n    this.tester.detectChanges();\n  }\n\n  /**\n   * dispatches the given event from the wrapped element, then triggers a change detection\n   */\n  dispatchEvent(event: Event) {\n    this.nativeElement.dispatchEvent(event);\n    this.tester.detectChanges();\n  }\n\n  /**\n   * Gets the CSS classes of the wrapped element, as an array\n   */\n  get classes(): Array {\n    return Array.prototype.slice.call(this.nativeElement.classList);\n  }\n\n  /**\n   * Gets the attribute of the wrapped element with the given name\n   * @param name the name of the attribute to get\n   */\n  attr(name: string) {\n    return this.nativeElement.getAttribute(name);\n  }\n\n  /**\n   * Gets the first element matching the given CSS selector and wraps it into a TestElement. The actual type\n   * of the returned value is the TestElement subclass matching the type of the found element. So, if the\n   * matched element is an input for example, the method will return a TestInput. You can thus use\n   * `tester.element('#some-input') as TestInput`.\n   * @param selector a CSS selector\n   * @returns the wrapped element, or null if no element matches the selector.\n   */\n  element(selector: string): TestElement | null {\n    return this.querier.element(selector);\n  }\n\n  /**\n   * Gets all the elements matching the given CSS selector and wraps them into a TestElement. The actual type\n   * of the returned elements is the TestElement subclass matching the type of the found element. So, if the\n   * matched elements are inputs for example, the method will return an array of TestInput. You can thus use\n   * `tester.elements('input') as Array`.\n   * @param selector a CSS selector\n   * @returns the array of matched elements, empty if no element was matched\n   */\n  elements(selector: string): Array> {\n    return this.querier.elements(selector);\n  }\n\n  /**\n   * Gets the first input matched by the given selector. Throws an Error if the matched element isn't actually an input.\n   * @param selector a CSS selector\n   * @returns the wrapped input, or null if no element was matched\n   */\n  input(selector: string): TestInput | null {\n    return this.querier.input(selector);\n  }\n\n  /**\n   * Gets the first select matched by the given selector. Throws an Error if the matched element isn't actually a select.\n   * @param selector a CSS selector\n   * @returns the wrapped select, or null if no element was matched\n   */\n  select(selector: string): TestSelect | null {\n    return this.querier.select(selector);\n  }\n\n  /**\n   * Gets the first textarea matched by the given selector\n   * @param selector a CSS selector\n   * @returns the wrapped textarea, or null if no element was matched. Throws an Error if the matched element isn't actually a textarea.\n   * @throws {Error} if the matched element isn't actually a textarea\n   */\n  textarea(selector: string): TestTextArea | null {\n    return this.querier.textarea(selector);\n  }\n\n  /**\n   * Gets the first button matched by the given selector. Throws an Error if the matched element isn't actually a button.\n   * @param selector a CSS selector\n   * @returns the wrapped button, or null if no element was matched\n   */\n  button(selector: string): TestButton | null {\n    return this.querier.button(selector);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TestHtmlElement.html":{"url":"classes/TestHtmlElement.html","title":"class - TestHtmlElement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TestHtmlElement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/test-html-element.ts\n        \n\n            \n                Description\n            \n            \n                A wrapped DOM HTML element, providing additional methods and attributes helping with writing tests\n\n            \n\n            \n                Extends\n            \n            \n                    TestElement\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                debugElement\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                            \n                                attr\n                            \n                            \n                                button\n                            \n                            \n                                dispatchEvent\n                            \n                            \n                                dispatchEventOfType\n                            \n                            \n                                element\n                            \n                            \n                                elements\n                            \n                            \n                                input\n                            \n                            \n                                select\n                            \n                            \n                                textarea\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tester: ComponentTester, debugElement: DebugElement)\n                    \n                \n                        \n                            \n                                Defined in src/lib/test-html-element.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tester\n                                                  \n                                                        \n                                                                    ComponentTester\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        debugElement\n                                                  \n                                                        \n                                                                    DebugElement\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            debugElement\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        debugElement:     DebugElement\n\n                    \n                \n                    \n                        \n                            Type :     DebugElement\n\n                        \n                    \n                            \n                                \n                                    Inherited from     TestElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestElement:20\n                            \n                        \n\n                \n                    \n                        the wrapped debug element\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            click\n                            \n                            \n                        \n                    \n                \n                \n                    \nclick()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-html-element.ts:16\n                            \n                        \n\n\n                \n                    \n                            Clicks on the wrapped element, then triggers a change detection\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            attr\n                            \n                            \n                        \n                    \n                \n                \n                    \nattr(name: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestElement:62\n                            \n                        \n\n\n                \n                    \n                            Gets the attribute of the wrapped element with the given name\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                the name of the attribute to get\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            button\n                            \n                            \n                        \n                    \n                \n                \n                    \nbutton(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestElement:123\n                            \n                        \n\n\n                \n                    \n                            Gets the first button matched by the given selector. Throws an Error if the matched element isn't actually a button.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestButton | null\n\n                            \n                                \n                                    the wrapped button, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dispatchEvent\n                            \n                            \n                        \n                    \n                \n                \n                    \ndispatchEvent(event: Event)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestElement:46\n                            \n                        \n\n\n                \n                    \n                            dispatches the given event from the wrapped element, then triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        event\n                                                        \n                                                                    Event\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dispatchEventOfType\n                            \n                            \n                        \n                    \n                \n                \n                    \ndispatchEventOfType(type: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestElement:38\n                            \n                        \n\n\n                \n                    \n                            dispatches an event of the given type from the wrapped element, then triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        type\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            element\n                            \n                            \n                        \n                    \n                \n                \n                    \nelement(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestElement:74\n                            \n                        \n\n\n                \n                    \n                            Gets the first element matching the given CSS selector and wraps it into a TestElement. The actual type\nof the returned value is the TestElement subclass matching the type of the found element. So, if the\nmatched element is an input for example, the method will return a TestInput. You can thus use\ntester.element('#some-input') as TestInput.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestElement | null\n\n                            \n                                \n                                    the wrapped element, or null if no element matches the selector.\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            elements\n                            \n                            \n                        \n                    \n                \n                \n                    \nelements(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestElement:86\n                            \n                        \n\n\n                \n                    \n                            Gets all the elements matching the given CSS selector and wraps them into a TestElement. The actual type\nof the returned elements is the TestElement subclass matching the type of the found element. So, if the\nmatched elements are inputs for example, the method will return an array of TestInput. You can thus use\ntester.elements('input') as Array.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Array>\n\n                            \n                                \n                                    the array of matched elements, empty if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            input\n                            \n                            \n                        \n                    \n                \n                \n                    \ninput(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestElement:95\n                            \n                        \n\n\n                \n                    \n                            Gets the first input matched by the given selector. Throws an Error if the matched element isn't actually an input.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestInput | null\n\n                            \n                                \n                                    the wrapped input, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            select\n                            \n                            \n                        \n                    \n                \n                \n                    \nselect(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestElement:104\n                            \n                        \n\n\n                \n                    \n                            Gets the first select matched by the given selector. Throws an Error if the matched element isn't actually a select.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestSelect | null\n\n                            \n                                \n                                    the wrapped select, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            textarea\n                            \n                            \n                        \n                    \n                \n                \n                    \ntextarea(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestElement:114\n                            \n                        \n\n\n                \n                    \n                            Gets the first textarea matched by the given selector\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestTextArea | null\n\n                            \n                                \n                                    the wrapped textarea, or null if no element was matched. Throws an Error if the matched element isn't actually a textarea.\n\n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { ComponentTester } from './component-tester';\nimport { TestElement } from './test-element';\nimport { DebugElement } from '@angular/core';\n\n/**\n * A wrapped DOM HTML element, providing additional methods and attributes helping with writing tests\n */\nexport class TestHtmlElement extends TestElement {\n  constructor(tester: ComponentTester, debugElement: DebugElement) {\n    super(tester, debugElement);\n  }\n\n  /**\n   * Clicks on the wrapped element, then triggers a change detection\n   */\n  click() {\n    this.nativeElement.click();\n    this.tester.detectChanges();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TestInput.html":{"url":"classes/TestInput.html","title":"class - TestInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TestInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/test-input.ts\n        \n\n            \n                Description\n            \n            \n                A wrapped DOM HTML input element, providing additional methods and attributes helping with writing tests\n\n            \n\n            \n                Extends\n            \n            \n                    TestHtmlElement\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                debugElement\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                check\n                            \n                            \n                                fillWith\n                            \n                            \n                                uncheck\n                            \n                            \n                                click\n                            \n                            \n                                attr\n                            \n                            \n                                button\n                            \n                            \n                                dispatchEvent\n                            \n                            \n                                dispatchEventOfType\n                            \n                            \n                                element\n                            \n                            \n                                elements\n                            \n                            \n                                input\n                            \n                            \n                                select\n                            \n                            \n                                textarea\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    value\n                                \n                                \n                                    checked\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tester: ComponentTester, debugElement: DebugElement)\n                    \n                \n                        \n                            \n                                Defined in src/lib/test-input.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tester\n                                                  \n                                                        \n                                                                    ComponentTester\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        debugElement\n                                                  \n                                                        \n                                                                    DebugElement\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            debugElement\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        debugElement:     DebugElement\n\n                    \n                \n                    \n                        \n                            Type :     DebugElement\n\n                        \n                    \n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:20\n                            \n                        \n\n                \n                    \n                        the wrapped debug element\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            check\n                            \n                            \n                        \n                    \n                \n                \n                    \ncheck()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-input.ts:39\n                            \n                        \n\n\n                \n                    \n                            Checks the wrapped input, then dispatches an event of type change and triggers a change detection\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fillWith\n                            \n                            \n                        \n                    \n                \n                \n                    \nfillWith(value: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-input.ts:17\n                            \n                        \n\n\n                \n                    \n                            Sets the value of the wrapped input, then dispatches an event of type input and triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                the new value of the input\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            uncheck\n                            \n                            \n                        \n                    \n                \n                \n                    \nuncheck()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-input.ts:47\n                            \n                        \n\n\n                \n                    \n                            Unchecks the wrapped input, then dispatches an event of type change and triggers a change detection\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            click\n                            \n                            \n                        \n                    \n                \n                \n                    \nclick()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:16\n                            \n                        \n\n\n                \n                    \n                            Clicks on the wrapped element, then triggers a change detection\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            attr\n                            \n                            \n                        \n                    \n                \n                \n                    \nattr(name: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:62\n                            \n                        \n\n\n                \n                    \n                            Gets the attribute of the wrapped element with the given name\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                the name of the attribute to get\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            button\n                            \n                            \n                        \n                    \n                \n                \n                    \nbutton(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:123\n                            \n                        \n\n\n                \n                    \n                            Gets the first button matched by the given selector. Throws an Error if the matched element isn't actually a button.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestButton | null\n\n                            \n                                \n                                    the wrapped button, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dispatchEvent\n                            \n                            \n                        \n                    \n                \n                \n                    \ndispatchEvent(event: Event)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:46\n                            \n                        \n\n\n                \n                    \n                            dispatches the given event from the wrapped element, then triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        event\n                                                        \n                                                                    Event\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dispatchEventOfType\n                            \n                            \n                        \n                    \n                \n                \n                    \ndispatchEventOfType(type: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:38\n                            \n                        \n\n\n                \n                    \n                            dispatches an event of the given type from the wrapped element, then triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        type\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            element\n                            \n                            \n                        \n                    \n                \n                \n                    \nelement(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:74\n                            \n                        \n\n\n                \n                    \n                            Gets the first element matching the given CSS selector and wraps it into a TestElement. The actual type\nof the returned value is the TestElement subclass matching the type of the found element. So, if the\nmatched element is an input for example, the method will return a TestInput. You can thus use\ntester.element('#some-input') as TestInput.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestElement | null\n\n                            \n                                \n                                    the wrapped element, or null if no element matches the selector.\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            elements\n                            \n                            \n                        \n                    \n                \n                \n                    \nelements(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:86\n                            \n                        \n\n\n                \n                    \n                            Gets all the elements matching the given CSS selector and wraps them into a TestElement. The actual type\nof the returned elements is the TestElement subclass matching the type of the found element. So, if the\nmatched elements are inputs for example, the method will return an array of TestInput. You can thus use\ntester.elements('input') as Array.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Array>\n\n                            \n                                \n                                    the array of matched elements, empty if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            input\n                            \n                            \n                        \n                    \n                \n                \n                    \ninput(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:95\n                            \n                        \n\n\n                \n                    \n                            Gets the first input matched by the given selector. Throws an Error if the matched element isn't actually an input.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestInput | null\n\n                            \n                                \n                                    the wrapped input, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            select\n                            \n                            \n                        \n                    \n                \n                \n                    \nselect(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:104\n                            \n                        \n\n\n                \n                    \n                            Gets the first select matched by the given selector. Throws an Error if the matched element isn't actually a select.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestSelect | null\n\n                            \n                                \n                                    the wrapped select, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            textarea\n                            \n                            \n                        \n                    \n                \n                \n                    \ntextarea(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:114\n                            \n                        \n\n\n                \n                    \n                            Gets the first textarea matched by the given selector\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestTextArea | null\n\n                            \n                                \n                                    the wrapped textarea, or null if no element was matched. Throws an Error if the matched element isn't actually a textarea.\n\n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        value\n                    \n                \n\n                \n                    \n                        getvalue()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-input.ts:25\n                                \n                            \n                    \n                        \n                                the value of the wrapped input\n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        checked\n                    \n                \n\n                \n                    \n                        getchecked()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-input.ts:32\n                                \n                            \n                    \n                        \n                                the checked property of the wrapped input\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { ComponentTester } from './component-tester';\nimport { TestHtmlElement } from './test-html-element';\nimport { DebugElement } from '@angular/core';\n\n/**\n * A wrapped DOM HTML input element, providing additional methods and attributes helping with writing tests\n */\nexport class TestInput extends TestHtmlElement {\n  constructor(tester: ComponentTester, debugElement: DebugElement) {\n    super(tester, debugElement);\n  }\n\n  /**\n   * Sets the value of the wrapped input, then dispatches an event of type input and triggers a change detection\n   * @param value the new value of the input\n   */\n  fillWith(value: string) {\n    this.nativeElement.value = value;\n    this.dispatchEventOfType('input');\n  }\n\n  /**\n   * the value of the wrapped input\n   */\n  get value() {\n    return this.nativeElement.value;\n  }\n\n  /**\n   * the checked property of the wrapped input\n   */\n  get checked() {\n    return this.nativeElement.checked;\n  }\n\n  /**\n   * Checks the wrapped input, then dispatches an event of type change and triggers a change detection\n   */\n  check() {\n    this.nativeElement.checked = true;\n    this.dispatchEventOfType('change');\n  }\n\n  /**\n   * Unchecks the wrapped input, then dispatches an event of type change and triggers a change detection\n   */\n  uncheck() {\n    this.nativeElement.checked = false;\n    this.dispatchEventOfType('change');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TestSelect.html":{"url":"classes/TestSelect.html","title":"class - TestSelect","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TestSelect\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/test-select.ts\n        \n\n            \n                Description\n            \n            \n                A wrapped DOM HTML select element, providing additional methods and attributes helping with writing tests\n\n            \n\n            \n                Extends\n            \n            \n                    TestHtmlElement\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                debugElement\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                selectIndex\n                            \n                            \n                                selectLabel\n                            \n                            \n                                selectValue\n                            \n                            \n                                click\n                            \n                            \n                                attr\n                            \n                            \n                                button\n                            \n                            \n                                dispatchEvent\n                            \n                            \n                                dispatchEventOfType\n                            \n                            \n                                element\n                            \n                            \n                                elements\n                            \n                            \n                                input\n                            \n                            \n                                select\n                            \n                            \n                                textarea\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    selectedIndex\n                                \n                                \n                                    selectedValue\n                                \n                                \n                                    selectedLabel\n                                \n                                \n                                    optionValues\n                                \n                                \n                                    optionLabels\n                                \n                                \n                                    size\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tester: ComponentTester, debugElement: DebugElement)\n                    \n                \n                        \n                            \n                                Defined in src/lib/test-select.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tester\n                                                  \n                                                        \n                                                                    ComponentTester\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        debugElement\n                                                  \n                                                        \n                                                                    DebugElement\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            debugElement\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        debugElement:     DebugElement\n\n                    \n                \n                    \n                        \n                            Type :     DebugElement\n\n                        \n                    \n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:20\n                            \n                        \n\n                \n                    \n                        the wrapped debug element\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectIndex\n                            \n                            \n                        \n                    \n                \n                \n                    \nselectIndex(index: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-select.ts:16\n                            \n                        \n\n\n                \n                    \n                            Selects the option at the given index, then dispatches an event of type change and triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        index\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectLabel\n                            \n                            \n                        \n                    \n                \n                \n                    \nselectLabel(label: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-select.ts:38\n                            \n                        \n\n\n                \n                    \n                            Selects the first option with the given label (or text), then dispatches an event of type change and triggers a change detection.\nIf there is no option with the given label, then does nothing\nTODO should it throw instead?\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        label\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectValue\n                            \n                            \n                        \n                    \n                \n                \n                    \nselectValue(value: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-select.ts:26\n                            \n                        \n\n\n                \n                    \n                            Selects the first option with the given value, then dispatches an event of type change and triggers a change detection.\nIf there is no option with the given value, then does nothing\nTODO should it throw instead?\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            click\n                            \n                            \n                        \n                    \n                \n                \n                    \nclick()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:16\n                            \n                        \n\n\n                \n                    \n                            Clicks on the wrapped element, then triggers a change detection\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            attr\n                            \n                            \n                        \n                    \n                \n                \n                    \nattr(name: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:62\n                            \n                        \n\n\n                \n                    \n                            Gets the attribute of the wrapped element with the given name\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                the name of the attribute to get\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            button\n                            \n                            \n                        \n                    \n                \n                \n                    \nbutton(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:123\n                            \n                        \n\n\n                \n                    \n                            Gets the first button matched by the given selector. Throws an Error if the matched element isn't actually a button.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestButton | null\n\n                            \n                                \n                                    the wrapped button, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dispatchEvent\n                            \n                            \n                        \n                    \n                \n                \n                    \ndispatchEvent(event: Event)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:46\n                            \n                        \n\n\n                \n                    \n                            dispatches the given event from the wrapped element, then triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        event\n                                                        \n                                                                    Event\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dispatchEventOfType\n                            \n                            \n                        \n                    \n                \n                \n                    \ndispatchEventOfType(type: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:38\n                            \n                        \n\n\n                \n                    \n                            dispatches an event of the given type from the wrapped element, then triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        type\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            element\n                            \n                            \n                        \n                    \n                \n                \n                    \nelement(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:74\n                            \n                        \n\n\n                \n                    \n                            Gets the first element matching the given CSS selector and wraps it into a TestElement. The actual type\nof the returned value is the TestElement subclass matching the type of the found element. So, if the\nmatched element is an input for example, the method will return a TestInput. You can thus use\ntester.element('#some-input') as TestInput.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestElement | null\n\n                            \n                                \n                                    the wrapped element, or null if no element matches the selector.\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            elements\n                            \n                            \n                        \n                    \n                \n                \n                    \nelements(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:86\n                            \n                        \n\n\n                \n                    \n                            Gets all the elements matching the given CSS selector and wraps them into a TestElement. The actual type\nof the returned elements is the TestElement subclass matching the type of the found element. So, if the\nmatched elements are inputs for example, the method will return an array of TestInput. You can thus use\ntester.elements('input') as Array.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Array>\n\n                            \n                                \n                                    the array of matched elements, empty if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            input\n                            \n                            \n                        \n                    \n                \n                \n                    \ninput(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:95\n                            \n                        \n\n\n                \n                    \n                            Gets the first input matched by the given selector. Throws an Error if the matched element isn't actually an input.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestInput | null\n\n                            \n                                \n                                    the wrapped input, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            select\n                            \n                            \n                        \n                    \n                \n                \n                    \nselect(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:104\n                            \n                        \n\n\n                \n                    \n                            Gets the first select matched by the given selector. Throws an Error if the matched element isn't actually a select.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestSelect | null\n\n                            \n                                \n                                    the wrapped select, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            textarea\n                            \n                            \n                        \n                    \n                \n                \n                    \ntextarea(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:114\n                            \n                        \n\n\n                \n                    \n                            Gets the first textarea matched by the given selector\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestTextArea | null\n\n                            \n                                \n                                    the wrapped textarea, or null if no element was matched. Throws an Error if the matched element isn't actually a textarea.\n\n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        selectedIndex\n                    \n                \n\n                \n                    \n                        getselectedIndex()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-select.ts:48\n                                \n                            \n                    \n                        \n                                the selected index of the wrapped select\n\n\n                                \n                                    Returns :     number\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        selectedValue\n                    \n                \n\n                \n                    \n                        getselectedValue()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-select.ts:55\n                                \n                            \n                    \n                        \n                                the value of the selected option of the wrapped select, or null if there is no selected option\n\n\n                                \n                                    Returns :     string | null\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        selectedLabel\n                    \n                \n\n                \n                    \n                        getselectedLabel()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-select.ts:65\n                                \n                            \n                    \n                        \n                                the label (or text if no label) of the selected option of the wrapped select, or null if there is no selected option\n\n\n                                \n                                    Returns :     string | null\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        optionValues\n                    \n                \n\n                \n                    \n                        getoptionValues()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-select.ts:75\n                                \n                            \n                    \n                        \n                                the values of the options, as an array\n\n\n                                \n                                    Returns :     Array\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        optionLabels\n                    \n                \n\n                \n                    \n                        getoptionLabels()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-select.ts:82\n                                \n                            \n                    \n                        \n                                the labels (or texts if no label) of the options, as an array\n\n\n                                \n                                    Returns :     Array\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        size\n                    \n                \n\n                \n                    \n                        getsize()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-select.ts:89\n                                \n                            \n                    \n                        \n                                the number of options in the select\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { ComponentTester } from './component-tester';\nimport { TestHtmlElement } from './test-html-element';\nimport { DebugElement } from '@angular/core';\n\n/**\n * A wrapped DOM HTML select element, providing additional methods and attributes helping with writing tests\n */\nexport class TestSelect extends TestHtmlElement {\n  constructor(tester: ComponentTester, debugElement: DebugElement) {\n    super(tester, debugElement);\n  }\n\n  /**\n   * Selects the option at the given index, then dispatches an event of type change and triggers a change detection\n   */\n  selectIndex(index: number) {\n    this.nativeElement.selectedIndex = index;\n    this.dispatchEventOfType('change');\n  }\n\n  /**\n   * Selects the first option with the given value, then dispatches an event of type change and triggers a change detection.\n   * If there is no option with the given value, then does nothing\n   * TODO should it throw instead?\n   */\n  selectValue(value: string) {\n    const index = this.optionValues.indexOf(value);\n    if (index >= 0) {\n      this.selectIndex(index);\n    }\n  }\n\n  /**\n   * Selects the first option with the given label (or text), then dispatches an event of type change and triggers a change detection.\n   * If there is no option with the given label, then does nothing\n   * TODO should it throw instead?\n   */\n  selectLabel(label: string) {\n    const index = this.optionLabels.indexOf(label);\n    if (index >= 0) {\n      this.selectIndex(index);\n    }\n  }\n\n  /**\n   * the selected index of the wrapped select\n   */\n  get selectedIndex(): number {\n    return this.nativeElement.selectedIndex;\n  }\n\n  /**\n   * the value of the selected option of the wrapped select, or null if there is no selected option\n   */\n  get selectedValue(): string | null {\n    if (this.selectedIndex  {\n    return (Array.prototype.slice.call(this.nativeElement.options) as Array).map(option => option.value);\n  }\n\n  /**\n   * the labels (or texts if no label) of the options, as an array\n   */\n  get optionLabels(): Array {\n    return (Array.prototype.slice.call(this.nativeElement.options) as Array).map(option => option.label);\n  }\n\n  /**\n   * the number of options in the select\n   */\n  get size() {\n    return this.nativeElement.options.length;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TestTextArea.html":{"url":"classes/TestTextArea.html","title":"class - TestTextArea","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TestTextArea\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/test-textarea.ts\n        \n\n            \n                Description\n            \n            \n                A wrapped DOM HTML textarea element, providing additional methods and attributes helping with writing tests\n\n            \n\n            \n                Extends\n            \n            \n                    TestHtmlElement\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                debugElement\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                fillWith\n                            \n                            \n                                click\n                            \n                            \n                                attr\n                            \n                            \n                                button\n                            \n                            \n                                dispatchEvent\n                            \n                            \n                                dispatchEventOfType\n                            \n                            \n                                element\n                            \n                            \n                                elements\n                            \n                            \n                                input\n                            \n                            \n                                select\n                            \n                            \n                                textarea\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    value\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tester: ComponentTester, debugElement: DebugElement)\n                    \n                \n                        \n                            \n                                Defined in src/lib/test-textarea.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tester\n                                                  \n                                                        \n                                                                    ComponentTester\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        debugElement\n                                                  \n                                                        \n                                                                    DebugElement\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            debugElement\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        debugElement:     DebugElement\n\n                    \n                \n                    \n                        \n                            Type :     DebugElement\n\n                        \n                    \n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:20\n                            \n                        \n\n                \n                    \n                        the wrapped debug element\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fillWith\n                            \n                            \n                        \n                    \n                \n                \n                    \nfillWith(value: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-textarea.ts:17\n                            \n                        \n\n\n                \n                    \n                            Sets the value of the wrapped textarea, then dispatches an event of type input and triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                the new value of the textarea\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            click\n                            \n                            \n                        \n                    \n                \n                \n                    \nclick()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:16\n                            \n                        \n\n\n                \n                    \n                            Clicks on the wrapped element, then triggers a change detection\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            attr\n                            \n                            \n                        \n                    \n                \n                \n                    \nattr(name: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:62\n                            \n                        \n\n\n                \n                    \n                            Gets the attribute of the wrapped element with the given name\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                the name of the attribute to get\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            button\n                            \n                            \n                        \n                    \n                \n                \n                    \nbutton(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:123\n                            \n                        \n\n\n                \n                    \n                            Gets the first button matched by the given selector. Throws an Error if the matched element isn't actually a button.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestButton | null\n\n                            \n                                \n                                    the wrapped button, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dispatchEvent\n                            \n                            \n                        \n                    \n                \n                \n                    \ndispatchEvent(event: Event)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:46\n                            \n                        \n\n\n                \n                    \n                            dispatches the given event from the wrapped element, then triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        event\n                                                        \n                                                                    Event\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dispatchEventOfType\n                            \n                            \n                        \n                    \n                \n                \n                    \ndispatchEventOfType(type: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:38\n                            \n                        \n\n\n                \n                    \n                            dispatches an event of the given type from the wrapped element, then triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        type\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            element\n                            \n                            \n                        \n                    \n                \n                \n                    \nelement(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:74\n                            \n                        \n\n\n                \n                    \n                            Gets the first element matching the given CSS selector and wraps it into a TestElement. The actual type\nof the returned value is the TestElement subclass matching the type of the found element. So, if the\nmatched element is an input for example, the method will return a TestInput. You can thus use\ntester.element('#some-input') as TestInput.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestElement | null\n\n                            \n                                \n                                    the wrapped element, or null if no element matches the selector.\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            elements\n                            \n                            \n                        \n                    \n                \n                \n                    \nelements(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:86\n                            \n                        \n\n\n                \n                    \n                            Gets all the elements matching the given CSS selector and wraps them into a TestElement. The actual type\nof the returned elements is the TestElement subclass matching the type of the found element. So, if the\nmatched elements are inputs for example, the method will return an array of TestInput. You can thus use\ntester.elements('input') as Array.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Array>\n\n                            \n                                \n                                    the array of matched elements, empty if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            input\n                            \n                            \n                        \n                    \n                \n                \n                    \ninput(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:95\n                            \n                        \n\n\n                \n                    \n                            Gets the first input matched by the given selector. Throws an Error if the matched element isn't actually an input.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestInput | null\n\n                            \n                                \n                                    the wrapped input, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            select\n                            \n                            \n                        \n                    \n                \n                \n                    \nselect(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:104\n                            \n                        \n\n\n                \n                    \n                            Gets the first select matched by the given selector. Throws an Error if the matched element isn't actually a select.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestSelect | null\n\n                            \n                                \n                                    the wrapped select, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            textarea\n                            \n                            \n                        \n                    \n                \n                \n                    \ntextarea(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:114\n                            \n                        \n\n\n                \n                    \n                            Gets the first textarea matched by the given selector\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestTextArea | null\n\n                            \n                                \n                                    the wrapped textarea, or null if no element was matched. Throws an Error if the matched element isn't actually a textarea.\n\n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        value\n                    \n                \n\n                \n                    \n                        getvalue()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-textarea.ts:25\n                                \n                            \n                    \n                        \n                                the value of the wrapped textarea\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { ComponentTester } from './component-tester';\nimport { TestHtmlElement } from './test-html-element';\nimport { DebugElement } from '@angular/core';\n\n/**\n * A wrapped DOM HTML textarea element, providing additional methods and attributes helping with writing tests\n */\nexport class TestTextArea extends TestHtmlElement {\n  constructor(tester: ComponentTester, debugElement: DebugElement) {\n    super(tester, debugElement);\n  }\n\n  /**\n   * Sets the value of the wrapped textarea, then dispatches an event of type input and triggers a change detection\n   * @param value the new value of the textarea\n   */\n  fillWith(value: string) {\n    this.nativeElement.value = value;\n    this.dispatchEventOfType('input');\n  }\n\n  /**\n   * the value of the wrapped textarea\n   */\n  get value() {\n    return this.nativeElement.value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChange Log\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n\n1.0.0 (2018-11-02)\nThis 1.0.0 version is based and tested on Angular 7.0.0, although it should run fine with Angular 6.\nFuture versions are not guaranteed to support Angular 6, though. We encourage you to ugrade.\nBug Fixes\n\ndocs: typo in readme (2e6bce7), closes #42\n\n\n0.2.3 (2018-06-17)\n\n0.2.2 (2018-06-04)\n\n0.2.1 (2018-06-04)\n\n0.2.0 (2018-05-28)\nBug Fixes\n\ncustom matchers always return false if no element (a282826)\nfix toHaveText on empty text contents (0172de3)\n\nFeatures\n\nadd custom matcher for class (39d1f3a)\nadd custom matcher for value (eee2e97)\ncustom matcher toBeChecked (065ab58)\ncustom matcher toContainText (#13) (e0a0472)\ncustom matcher toHaveSelectedIndex (e1163fb)\ncustom matcher toHaveSelectedLabel (2c49330)\ncustom matcher toHaveSelectedValue (085fd65)\ncustom matcher toHaveText (8036c22)\n\n\n0.1.0 (2018-05-25)\nVery first release :champagne:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Peer dependencies\n    \n    \n        \n            @angular/core : ^7.0.2\n        \n            @angular/router : ^7.0.2\n        \n            rxjs : ^6.3.3\n    \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            fakeRoute   (src/.../route.ts)\n                        \n                        \n                            fakeSnapshot   (src/.../route.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/route.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            fakeRoute\n                            \n                            \n                        \n                    \n                \n                \n                    \nfakeRoute(options: undefined)\n                    \n                \n\n\n\n\n                \n                    \n                            Creates a fake partial ActivatedRoute for tests.\nIf you pass params, then the created route's paramMap will contain the same values.\nThe same goes for queryParams and queryParamMap.\nIf you pass a parent route and a snapshot, and the passed snapshot doesn't have a parent, then the snapshot's\nparent will be set to the parent route snapshot. This allows the code under test to use\nroute.parent.snapshot or route.snapshot.parent.\nIf you pass a snapshot with a parent, but don't pass a parent or pass a parent without snapshot, then the route's\nparent snapshot will be set to the given snapshot's parent. This allows the code under test to use\nroute.parent.snapshot or route.snapshot.parent.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fakeSnapshot\n                            \n                            \n                        \n                    \n                \n                \n                    \nfakeSnapshot(options: undefined)\n                    \n                \n\n\n\n\n                \n                    \n                            Creates a fake partial ActivatedRouteSnapshot for tests.\nIf you pass params, then the created snapshot's paramMap will contain the same values.\nThe same goes for queryParams and queryParamMap.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\nngx-speculoos\nngx-speculoos helps you write simpler, cleaner unit tests for your Angular components, based on the\npage object pattern. It also provides utilities to make writing Angular unit tests easier.\nThe library simply wraps the standard Angular ComponentFixture, and you should thus be \nable to understand and start using ngx-speculoos in just a few minutes if you already know\nhow to write Angular unit tests.\nWhy should you care?\nIf you've ever written tests like the following:\nit('should display French cities when selecting the country France', () => {\n  const countrySelect = fixture.nativeElement.querySelector('#country'); // countrySelect is of type any\n  countrySelect.selectedIndex = 12; // what is at index 12?\n  countrySelect.dispatchEvent(new Event('change')); // why do I need to do that?\n  fixture.detectChanges();\n\n  const city = fixture.nativeElement.querySelector('#city'); // city is of type any\n  expect(city).toBeTruthy();\n  expect(city.options.length).toBe(3);\n  expect(city.options[0].value).toBe('');\n  expect(city.options[0].label).toBe('');\n  expect(city.options[1].value).toBe('PARIS');\n  expect(city.options[1].label).toBe('Paris');\n  expect(city.options[2].value).toBe('LYON');\n  expect(city.options[2].label).toBe('Lyon');\n});\n\nit('should hide cities when selecting the empty country option', () => {\n  const countrySelect = fixture.nativeElement.querySelector('#country'); // I did that previously. What about DRY?\n  countrySelect.selectedIndex = 0;\n  countrySelect.dispatchEvent(new Event('change')); // why do I need to do that?\n  fixture.detectChanges(); // why do I need to do that?\n\n  expect(fixture.nativeElement.querySelector('#city')).toBeFalsy(); // I did that previously. What about DRY?\n});ngx-speculoos allows writing the above tests in a simpler, cleaner way:\n\nby using the page object pattern (which is optional, but recommended), you avoid repetitions. \nby using wrappers around elements, dispatching events and triggering change detection is automatic.\nby using wrappers around elements, you get useful additional methods to make tests easier to write and read.\nby using custom matchers, you get even simpler expectations and more readable error messages\nin any case you need them, you always have access to the fixture, the native elements, the debug elements, etc.\n\nclass MyComponentTester extends ComponentTester {\n  constructor() {\n    super(MyComponent);\n  }\n\n  get country() {\n    return this.select('#country'); // returns a TestSelect object, not any. Similar methods exist for inputs, buttons, etc.\n  }\n\n  get city() {\n    return this.select('#city'); // returns a TestSelect object, not any\n  }\n}\n\n[...]\n\nit('should display French cities when selecting the country France', () => {\n  tester.country.selectLabel('France'); // no dispatchEvent, no detectChanges needed\n\n  expect(tester.city.optionValues).toEqual(['', 'PARIS', 'LYON']);\n  expect(tester.city.optionLabels).toEqual(['', 'Paris', 'Lyon']);\n});\n\nit('should hide cities when selecting empty country option', () => {\n  tester.country.selectIndex(0); // no repetition of the selector, no dispatchEvent, no detectChanges needed\n\n  expect(tester.city).toBeFalsy(); // no repetition of the selector\n});Custom matchers\nIf you use Jasmine, we also have custom matchers for frequent expectations:\n  beforeEach(() => jasmine.addMatchers(speculoosMatchers));\n\n  it('should contain a pre-populated form', () => {\n    expect(tester.informationMessage).toContainText('Please check that everything is correct');\n    expect(tester.country).toHaveSelectedValue('FR');\n    expect(tester.city).toHaveSelectedLabel('Paris');\n    expect(tester.name).toHaveValue('Doe');\n    expect(tester.newsletter).toBeChecked();\n  });The complete matcher list includes:\n\ntoHaveClass(className: string)\ntoHaveValue(value: string)\ntoHaveText(textContent: string)\ntoContainText(textContent: string)\ntoBeChecked()\ntoHaveSelectedIndex(index: number)\ntoHaveSelectedValue(value: string)\ntoHaveSelectedLabel(label: string)\n\nInstallation\nUsing npm: npm install --save-dev ngx-speculoos\nUsing yarn: yarn add --dev ngx-speculoos\nGetting started\n\nimport ComponentTester, and other needed classes from ngx-speculoos\nCreate a MyComponentTester class (in your my-component.spec.ts file, typically) extending \nComponentTester, as shown above.\nExpose getters (or methods, if you prefer) returning the elements used in your tests, using\none of the ComponentTester methods (element, elements, input, select, textarea, button).\nSee the API documentation for details\nWrite your tests, as shown above, benefitting from the additional methods on the TestXxx classes.\nIf needed, you can always get the fixture, componentInstance, debugElement, nativeElement, etc.\nfrom the ComponentTester, and the nativeElement from each TestXxx wrapper.\nIf you like our custom matchers, add them in a beforeEach block as shown above, and enjoy.\n\nIssues, questions\nPlease, provide feedback by filing issues, or by submitting pull requests, to the Github Project.\nComplete example\nYou can look at a minimal complete example in the demo project.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2018 Ninja Squad\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            speculoosMatchers   (src/.../matchers.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/matchers.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            speculoosMatchers\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        speculoosMatchers:     jasmine.CustomMatcherFactories\n\n                    \n                \n                    \n                        \n                            Type :     jasmine.CustomMatcherFactories\n\n                        \n                    \n                    \n                        \n                            Default value : {\n\n  /**\n   * Checks that the receiver is a TestElement wrapping a DOM element and as the given CSS class\n   */\n  toHaveClass: (util: jasmine.MatchersUtil, customEqualityTesters: Array): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: any, expected: string) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check class '${expected}' on element, but element was falsy` };\n      }\n      if (!(el instanceof TestElement)) {\n        return { pass: false, message: `Expected to check class '${expected}' on element, but element was not a TestElement` };\n      }\n      const actual = el.classes;\n      const pass = actual.indexOf(expected) !== -1;\n      const message = `Expected element to ${isNegative ? 'not ' : ''}have class '${expected}', `\n      + `but had ${actual.length ? '\\'' + actual.join(', ') + '\\'' : 'none'}`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(false, el, expected);\n      },\n      negativeCompare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(true, el, expected);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestInput or a TestTextArea and has the given value\n   */\n  toHaveValue: (util: jasmine.MatchersUtil, customEqualityTesters: Array): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: any, expected: string) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check value '${expected}' on element, but element was falsy` };\n      }\n      if (!(el instanceof TestInput) && !(el instanceof TestTextArea)) {\n        return {\n          pass: false,\n          message: `Expected to check value '${expected}' on element, but element was neither a TestInput nor a TestTextArea`\n        };\n      }\n      const actual = el.value;\n      const pass = actual === expected;\n      const message = `Expected element to ${isNegative ? 'not ' : ''}have value '${expected}', but had value '${actual}'`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(false, el, expected);\n      },\n      negativeCompare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(true, el, expected);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestElement wrapping a DOM element and has the exact given textContent\n   */\n  toHaveText: (util: jasmine.MatchersUtil, customEqualityTesters: Array): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: any, expected: string) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check text '${expected}' on element, but element was falsy` };\n      }\n      if (!(el instanceof TestElement)) {\n        return { pass: false, message: `Expected to check text '${expected}' on element, but element was not a TestElement` };\n      }\n      const actual = el.textContent;\n      const pass = actual === expected;\n      const message = `Expected element to ${isNegative ? 'not ' : ''}have text '${expected}', but had '${actual}'`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(false, el, expected);\n      },\n      negativeCompare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(true, el, expected);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestElement wrapping a DOM element and contains the given textContent\n   */\n  toContainText: (util: jasmine.MatchersUtil, customEqualityTesters: Array): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: any, expected: string) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check text '${expected}' on element, but element was falsy` };\n      }\n      if (!(el instanceof TestElement)) {\n        return { pass: false, message: `Expected to check text '${expected}' on element, but element was not a TestElement` };\n      }\n      const actual = el.textContent;\n      if (!actual) {\n        return {\n          pass: isNegative,\n          message: `Expected element to ${isNegative ? 'not ' : ''}contain text '${expected}', but had no text`\n        };\n      }\n      const pass = actual.indexOf(expected) !== -1;\n      const message = `Expected element to ${isNegative ? 'not ' : ''}contain text '${expected}', but had text '${actual}'`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(false, el, expected);\n      },\n      negativeCompare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(true, el, expected);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestElement wrapping a DOM element and contains the given textContent\n   */\n  toBeChecked: (util: jasmine.MatchersUtil, customEqualityTesters: Array): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: any) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check if element was checked, but element was falsy` };\n      }\n      if (!(el instanceof TestInput)) {\n        return { pass: false, message: `Expected to check if element was checked, but element was not a TestInput` };\n      }\n      const pass = el.checked;\n      const message = `Expected element to be ${isNegative ? 'not ' : ''}checked, but was${!isNegative ? ' not' : ''}`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: any): jasmine.CustomMatcherResult => {\n        return assert(false, el);\n      },\n      negativeCompare: (el: any): jasmine.CustomMatcherResult => {\n        return assert(true, el);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestSelect wrapping a DOM element and has the given selected index\n   */\n  toHaveSelectedIndex: (util: jasmine.MatchersUtil, customEqualityTesters: Array): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: any, expected: number) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check selected index ${expected} on element, but element was falsy` };\n      }\n      if (!(el instanceof TestSelect)) {\n        return { pass: false, message: `Expected to check selected index ${expected} on element, but element was not a TestSelect` };\n      }\n      const actual = el.selectedIndex;\n      const pass = actual === expected;\n      const message = `Expected element to ${isNegative ? 'not ' : ''}have selected index ${expected}, but had ${actual}`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: any, expected: number): jasmine.CustomMatcherResult => {\n        return assert(false, el, expected);\n      },\n      negativeCompare: (el: any, expected: number): jasmine.CustomMatcherResult => {\n        return assert(true, el, expected);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestSelect wrapping a DOM element with the selected option's value equal to the given value\n   */\n  toHaveSelectedValue: (util: jasmine.MatchersUtil, customEqualityTesters: Array): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: any, expected: string) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check selected value '${expected}' on element, but element was falsy` };\n      }\n      if (!(el instanceof TestSelect)) {\n        return { pass: false, message: `Expected to check selected value '${expected}' on element, but element was not a TestSelect` };\n      }\n      const actual = el.selectedValue;\n      const pass = actual  === expected;\n      const message = `Expected element to ${isNegative ? 'not ' : ''}have selected value '${expected}', but had '${actual}'`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(false, el, expected);\n      },\n      negativeCompare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(true, el, expected);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestSelect wrapping a DOM element with the selected option's label equal to the given label\n   */\n  toHaveSelectedLabel: (util: jasmine.MatchersUtil, customEqualityTesters: Array): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: any, expected: string) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check selected label '${expected}' on element, but element was falsy` };\n      }\n      if (!(el instanceof TestSelect)) {\n        return { pass: false, message: `Expected to check selected label '${expected}' on element, but element was not a TestSelect` };\n      }\n      const actual = el.selectedLabel;\n      const pass = actual  === expected;\n      const message = `Expected element to ${isNegative ? 'not ' : ''}have selected label '${expected}', but had '${actual}'`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(false, el, expected);\n      },\n      negativeCompare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(true, el, expected);\n      }\n    };\n  }\n}\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
