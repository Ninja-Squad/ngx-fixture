var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.2.0","fields":["title","body"],"fieldVectors":[["title/classes/ComponentTester.html",[0,0.136,1,0.559]],["body/classes/ComponentTester.html",[0,0.124,1,0.899,2,0.479,3,0.479,4,0.266,5,4.469,6,1.496,7,1.272,8,2.325,9,2.325,10,2.325,11,1.823,12,1.064,13,1.823,14,3.384,15,2.325,16,1.823,17,0.919,18,1.223,19,1.062,20,1.493,21,0.814,22,0.885,23,1.238,24,1.513,25,1.114,26,0.209,27,1.402,28,3.686,29,1.091,30,2.851,31,2.679,32,2.89,33,1.455,34,1.091,35,1.336,36,0.93,37,2.325,38,1.069,39,0.069,40,1.416,41,1.496,42,1.205,43,1.256,44,3.481,45,3.215,46,1.493,47,2.325,48,2.325,49,3.215,50,2.325,51,2.325,52,2.325,53,2.325,54,3.215,55,0.859,56,0.708,57,0.859,58,2.325,59,2.325,60,2.325,61,1.246,62,3.215,63,1.115,64,1.091,65,0.899,66,3.215,67,1.496,68,1.496,69,0.936,70,0.885,71,1.465,72,1.496,73,1.336,74,0.066,75,1.565,76,1.554,77,1.307,78,1.554,79,1.4,80,1.443,81,0.865,82,0.762,83,1.763,84,2.325,85,1.496,86,2.851,87,1.496,88,2.325,89,2.236,90,1.496,91,1.496,92,1.496,93,0.479,94,0.885,95,1.496,96,0.512,97,1.223,98,1.091,99,1.029,100,0.885,101,0.885,102,1.496,103,1.272,104,0.885,105,0.621,106,0.885,107,1.496,108,0.885,109,1.496,110,0.628,111,0.885,112,1.496,113,0.762,114,0.569,115,1.493,116,1.174,117,1.496,118,1.823,119,0.744,120,2.325,121,2.325,122,1.823,123,1.496,124,1.496,125,0.93,126,1.496,127,1.496,128,0.744,129,1.062,130,1.496,131,0.4,132,1.174,133,1.174,134,1.793,135,0.479,136,0.802,137,1.496,138,0.802,139,1.496,140,1.496,141,1.174,142,1.496,143,1.496,144,1.496,145,1.496,146,1.496,147,1.496,148,1.496,149,1.496,150,1.496,151,1.496,152,1.496,153,1.496,154,1.496,155,0.031]],["title/classes/TestButton.html",[0,0.136,82,0.679]],["body/classes/TestButton.html",[0,0.217,1,1.004,2,1.063,3,1.063,4,0.591,7,1.063,12,0.964,19,1.218,22,0.811,26,0.463,29,1.218,36,0.887,38,0.731,39,0.068,40,1.401,43,0.887,55,0.887,56,0.731,57,0.887,63,0.887,64,0.887,65,0.731,69,0.964,74,0.054,81,0.721,82,1.083,93,1.063,114,1.263,125,1.299,129,1.17,131,0.887,135,1.063,155,0.054,156,1.666,157,3.319,158,1.083,159,1.298,160,1.543,161,1.298,162,1.298,163,1.543,164,1.735,165,2.057,166,1.543,167,3.319,168,1.543,169,1.497,170,1.779,171,4.559,172,3.319,173,3.319,174,4.055,175,1.497,176,1.497,177,3.319]],["title/classes/TestElement.html",[0,0.136,23,0.679]],["body/classes/TestElement.html",[0,0.205,1,0.745,2,0.528,3,0.528,4,0.294,7,1.313,12,1.059,17,0.745,18,0.954,19,1.096,21,0.817,22,0.893,23,1.18,24,1.288,25,1.083,26,0.23,27,1.153,29,1.123,33,1.457,34,1.123,35,1.371,36,0.441,38,1.044,39,0.069,40,1.444,42,1.243,43,0.441,55,0.904,56,0.745,57,0.904,63,1.145,64,1.226,65,0.943,69,0.877,70,0.954,71,1.529,73,1.371,74,0.067,75,1.577,76,1.599,77,1.345,78,1.599,79,1.43,80,1.489,81,0.871,82,0.81,83,1.789,93,0.802,94,0.954,96,0.552,97,1.288,98,1.123,99,1.083,100,0.954,101,0.954,103,1.413,104,0.954,105,0.67,106,0.954,108,0.954,110,0.667,111,0.954,113,0.81,114,0.628,115,1.609,116,1.294,119,0.802,125,1.194,128,0.802,129,1.064,131,0.441,132,1.965,133,1.965,134,1.796,135,0.528,138,0.884,155,0.034,156,1.733,158,0.67,159,0.802,160,1.458,161,0.802,162,0.802,166,0.628,168,1.153,178,1.294,179,1.367,180,1.13,181,0.954,182,1.13,183,1.65,184,1.65,185,1.13,186,1.65,187,1.65,188,1.13,189,1.313,190,1.65,191,1.288,192,1.13,193,1.65,194,1.65,195,1.65,196,1.65,197,1.65,198,1.65,199,1.65,200,1.965,201,1.65,202,1.65,203,1.343,204,1.965,205,1.65,206,1.65,207,1.65,208,1.65,209,1.65,210,1.65,211,1.65,212,1.65,213,1.65,214,1.65,215,1.65,216,1.965,217,1.65,218,1.65,219,1.65,220,1.65,221,1.65,222,1.65,223,1.65,224,1.65,225,1.65]],["title/classes/TestHtmlElement.html",[0,0.136,164,0.967]],["body/classes/TestHtmlElement.html",[0,0.166,1,0.856,2,0.706,3,0.706,4,0.393,7,1.425,12,1.051,17,0.683,18,1.179,19,1.134,21,0.776,22,0.889,23,1.294,24,1.179,25,0.992,26,0.308,27,1.179,29,1.094,33,1.425,34,1.094,35,1.31,36,0.589,38,1.062,39,0.068,40,1.497,42,1.209,43,0.589,55,1.038,56,0.856,57,1.038,63,1.225,64,1.26,65,1.01,69,0.789,70,0.84,71,1.536,73,1.31,74,0.066,75,1.556,76,1.479,77,1.244,78,1.479,79,1.359,80,1.425,81,0.845,82,0.589,83,1.744,93,1.147,94,0.84,96,0.486,97,1.179,98,1.038,99,0.992,100,0.84,101,0.84,103,1.244,104,0.84,105,0.589,106,0.84,108,0.84,110,0.486,111,0.84,113,0.589,119,0.992,125,1.26,128,0.706,129,0.957,131,0.589,135,0.706,155,0.042,156,1.363,158,0.828,159,0.992,160,1.479,161,0.992,162,0.992,163,1.179,164,1.179,165,1.915,166,1.179,168,1.179,169,2.068,175,1.847,176,0.995,178,1.73,179,1.398,180,1.398,181,1.179,182,1.398,185,0.995,188,0.995,189,1.31,191,1.179,192,0.995,216,1.73,226,2.206,227,2.206,228,2.206,229,2.206,230,2.206,231,2.206,232,2.206,233,2.206,234,2.206,235,2.206,236,2.206,237,2.206,238,2.206]],["title/classes/TestInput.html",[0,0.136,98,0.679]],["body/classes/TestInput.html",[0,0.15,1,0.804,2,0.615,3,0.615,4,0.342,7,1.401,12,1.071,17,0.618,18,1.388,19,1.083,21,0.745,22,0.878,23,1.037,24,1.069,25,0.899,26,0.268,27,1.069,29,1.037,33,1.556,34,1.037,35,1.242,36,0.514,38,1.071,39,0.068,40,1.515,42,1.169,43,0.514,55,1.169,56,1.014,57,1.169,61,1.505,63,1.204,64,1.24,65,0.993,69,0.731,70,0.731,71,1.529,73,1.242,74,0.065,75,1.529,76,1.388,77,1.168,78,1.388,79,1.297,80,1.373,81,0.85,82,0.514,83,1.692,93,1.297,94,0.731,96,1.004,97,1.069,98,1.083,99,0.899,100,0.731,101,0.731,103,1.168,104,0.731,105,0.514,106,0.731,108,0.731,110,0.423,111,0.731,113,0.514,114,0.731,119,0.899,125,1.23,128,0.615,129,0.886,131,0.514,134,0.867,135,0.615,138,1.505,155,0.038,156,1.593,158,0.75,159,0.899,160,1.388,161,0.899,162,0.899,163,1.069,164,1.766,165,1.646,166,1.069,168,1.069,169,2.033,170,1.03,175,1.497,176,0.867,179,1.267,180,1.267,181,1.069,182,1.267,185,0.867,188,0.867,189,1.443,191,1.633,192,0.867,239,1.922,240,2.856,241,2.202,242,4.053,243,1.922,244,1.234,245,1.922,246,2.202,247,1.922,248,1.922,249,1.234,250,1.234,251,1.234,252,1.234,253,1.234,254,1.234,255,1.234,256,1.234,257,1.234,258,1.507,259,1.922,260,1.922,261,1.922,262,2.202,263,1.507,264,3.318,265,1.922,266,2.202,267,1.234]],["title/classes/TestSelect.html",[0,0.136,110,0.559]],["body/classes/TestSelect.html",[0,0.137,1,0.756,2,0.544,3,0.544,4,0.302,7,1.325,12,1.034,17,0.564,18,0.975,19,1.035,21,0.716,22,0.869,23,0.985,24,0.975,25,0.82,26,0.612,27,0.975,29,0.985,33,1.325,34,1.296,35,1.18,36,0.454,38,1.063,39,0.069,40,1.518,42,1.255,43,0.454,55,1.132,56,1.008,57,1.132,63,1.201,64,1.233,65,1.081,69,0.679,70,0.647,71,1.54,73,1.356,74,0.064,75,1.504,76,1.575,77,1.1,78,1.307,79,1.24,80,1.325,81,0.859,82,0.454,83,1.755,93,1.24,94,0.647,96,0.933,97,0.975,98,0.918,99,0.82,100,0.647,101,0.647,103,1.382,104,0.647,105,0.454,106,0.647,108,0.647,110,0.679,111,0.647,113,0.454,114,0.647,119,0.82,125,1.201,128,0.544,129,0.824,131,0.454,135,0.544,136,1.373,155,0.034,156,1.669,158,0.685,159,0.82,160,1.307,161,0.82,162,0.82,163,0.975,164,1.727,165,1.55,166,0.975,168,0.975,169,1.978,170,0.911,175,1.392,176,0.767,179,1.156,180,1.156,181,0.975,182,1.156,185,0.767,188,0.767,189,1.404,191,1.575,192,0.767,203,1.975,244,1.091,249,1.091,250,1.091,251,1.091,252,1.091,253,1.091,254,1.091,255,1.091,256,1.091,257,1.091,266,1.333,268,1.7,269,2.563,270,2.563,271,2.563,272,1.7,273,2.563,274,3.154,275,1.7,276,2.563,277,1.7,278,3.439,279,3.435,280,3.435,281,3.435,282,2.563,283,1.7,284,2.563,285,1.7,286,1.7,287,2.563,288,1.7,289,1.7,290,1.7,291,1.7,292,1.7,293,1.7,294,1.7,295,1.7,296,2.563,297,1.7,298,1.7,299,2.563,300,1.7,301,1.7,302,2.563,303,1.7,304,2.01,305,2.563,306,1.7,307,1.7,308,2.563,309,2.563,310,1.7,311,1.7,312,1.7]],["title/classes/TestTextArea.html",[0,0.136,113,0.679]],["body/classes/TestTextArea.html",[0,0.159,1,0.834,2,0.666,3,0.666,4,0.37,7,1.429,12,1.059,17,0.655,18,1.132,19,1.113,21,0.763,22,0.884,23,1.07,24,1.132,25,0.952,26,0.29,27,1.132,29,1.07,33,1.449,34,1.07,35,1.494,36,0.556,38,1.067,39,0.068,40,1.505,42,1.193,43,0.556,55,1.07,56,0.882,57,1.07,61,1.594,63,1.224,64,1.257,65,1.009,69,0.764,70,0.792,71,1.545,73,1.282,74,0.066,75,1.545,76,1.441,77,1.212,78,1.441,79,1.333,80,1.404,81,0.847,82,0.556,83,1.723,93,1.212,94,0.792,96,1.019,97,1.132,98,1.012,99,0.952,100,0.792,101,0.792,103,1.212,104,0.792,105,0.556,106,0.792,108,0.792,110,0.459,111,0.792,113,0.927,114,0.792,119,0.952,125,1.247,128,0.666,129,0.927,131,0.556,134,0.939,135,0.666,138,1.594,155,0.04,156,1.441,158,0.795,159,0.952,160,1.441,161,0.952,162,0.952,163,1.132,164,1.79,165,1.708,166,1.132,168,1.132,169,2.067,170,1.116,175,1.566,176,0.939,179,1.342,180,1.342,181,1.132,182,1.342,185,0.939,188,0.939,189,1.373,191,1.441,192,0.939,241,2.333,244,1.337,246,2.333,249,1.337,250,1.337,251,1.337,252,1.337,253,1.337,254,1.337,255,1.337,256,1.337,257,1.337,258,1.633,262,2.333,263,1.633,313,2.082,314,2.082,315,2.082,316,2.082]],["title/changelog.html",[21,0.382,317,1.151,318,2.147]],["body/changelog.html",[0,0.186,4,0.62,22,0.62,39,0.056,56,0.919,73,1.115,74,0.056,81,0.62,96,0.767,105,0.931,155,0.056,203,1.866,204,2.731,267,2.236,319,3.483,320,3.483,321,2.731,322,2.236,323,2.731,324,2.731,325,3.483,326,3.483,327,3.483,328,3.483,329,3.716,330,4.47,331,3.483,332,3.483,333,4.174,334,3.483,335,3.483,336,4.174,337,3.483,338,3.483,339,4.174,340,3.871,341,3.871,342,2.731,343,3.483,344,3.273,345,3.483,346,3.483,347,3.273,348,3.483,349,3.483,350,2.731,351,3.483,352,2.731,353,3.483,354,3.483,355,2.731,356,3.483,357,2.731,358,3.483,359,2.731,360,3.483,361,3.483,362,3.483,363,3.483,364,3.483,365,3.483,366,3.483]],["title/dependencies.html",[367,2.147,368,2.385]],["body/dependencies.html",[39,0.065,74,0.06,131,1.042,155,0.06,368,3.057,369,3.899,370,4.684,371,3.899,372,3.899]],["title/miscellaneous/functions.html",[373,1.151,374,2.385]],["body/miscellaneous/functions.html",[17,0.907,20,2.644,26,0.475,31,2.953,39,0.062,42,0.91,46,3.109,61,2.207,63,1.101,64,1.101,65,1.013,69,1.013,74,0.055,96,0.907,134,1.858,155,0.055,373,1.825,374,2.671,375,4.118,376,4.118,377,4.118,378,3.406,379,3.406,380,4.118,381,4.118,382,4.118,383,3.406,384,4.118,385,4.118,386,2.644,387,4.599,388,4.118,389,4.118,390,4.118,391,4.919,392,4.118,393,4.786,394,3.406,395,4.427,396,4.118,397,4.118,398,4.118,399,4.118,400,3.406,401,2.671,402,3.406,403,3.406]],["title/index.html",[21,0.382,26,0.3,317,1.151]],["body/index.html",[0,0.217,1,0.935,4,0.592,11,1.916,12,0.538,13,3.183,14,1.916,16,1.916,17,1.04,19,1.135,20,1.569,21,0.435,22,0.798,25,1.065,26,0.341,28,2.608,29,0.889,31,1.569,32,2.608,33,1.065,34,1.135,35,0.782,36,0.653,38,0.732,39,0.068,43,0.653,55,0.653,56,0.538,57,0.653,65,0.833,69,1.005,74,0.045,75,1.065,77,0.782,81,0.756,99,0.782,105,0.889,110,0.732,115,2.135,118,1.916,122,1.916,125,0.653,128,0.782,129,0.653,136,2.026,155,0.045,158,0.889,159,1.065,161,0.782,162,1.402,163,1.266,181,1.266,189,0.782,191,0.93,240,1.569,304,1.916,317,1.782,321,2.608,322,1.569,323,1.916,324,1.916,340,2.965,341,2.965,342,2.608,347,2.608,386,1.569,404,4.483,405,4.483,406,3.781,407,3.326,408,3.781,409,2.443,410,3.326,411,4.059,412,3.326,413,1.916,414,3.326,415,2.443,416,2.443,417,2.443,418,2.443,419,2.443,420,2.443,421,2.443,422,2.443,423,2.443,424,2.443,425,1.916,426,4.247,427,3.326,428,3.326,429,4.483,430,4.247,431,3.326,432,3.781,433,3.326,434,3.326,435,3.326,436,3.326,437,3.326,438,4.562,439,3.326,440,2.443,441,2.443,442,2.443,443,2.443,444,2.443,445,2.443,446,2.443,447,2.443,448,2.443,449,3.326,450,3.326,451,3.326,452,2.443,453,3.183,454,2.443,455,2.443,456,2.443,457,3.781,458,3.781,459,3.326,460,2.443,461,2.443,462,2.443,463,2.443,464,2.608,465,2.443,466,2.443,467,1.916,468,2.443,469,3.781,470,3.326,471,2.443,472,2.443,473,2.443,474,2.443,475,2.443,476,2.443,477,2.443,478,3.326,479,3.326,480,2.443,481,2.443,482,2.443,483,2.443,484,2.443,485,3.326,486,2.443,487,2.443,488,2.443,489,2.443,490,2.443,491,2.443,492,2.443,493,2.443,494,2.443,495,2.443,496,2.443,497,3.326,498,3.326,499,2.443,500,3.326,501,3.326,502,2.443,503,2.443,504,3.781,505,2.443,506,2.443,507,2.443,508,2.443,509,2.443,510,2.443,511,3.326,512,2.443,513,2.443,514,2.443,515,3.326,516,2.443,517,2.443,518,2.443,519,2.443,520,2.443,521,2.443,522,2.443,523,3.326,524,2.443,525,2.443,526,2.443]],["title/license.html",[21,0.382,317,1.151,527,1.684]],["body/license.html",[4,0.615,17,0.915,39,0.056,74,0.056,155,0.056,158,0.923,189,1.105,322,2.217,329,2.708,401,3.493,425,2.708,453,2.708,527,2.708,528,3.454,529,4.454,530,3.454,531,3.454,532,3.454,533,4.153,534,3.454,535,3.454,536,3.454,537,3.454,538,4.153,539,3.454,540,4.621,541,4.929,542,3.454,543,4.153,544,3.454,545,4.454,546,4.153,547,3.454,548,3.454,549,3.454,550,3.454,551,3.454,552,3.454,553,3.454,554,3.454,555,3.454,556,3.454,557,3.454,558,3.454,559,4.153,560,4.153,561,3.454,562,3.454,563,4.153,564,3.454,565,3.454,566,3.454,567,3.454,568,3.454,569,3.454,570,3.454,571,3.454,572,3.454,573,3.454,574,3.454,575,3.454,576,3.454,577,3.454,578,3.454,579,3.454,580,3.454,581,3.454,582,3.454,583,3.454,584,3.454,585,3.454]],["title/modules.html",[586,2.678]],["body/modules.html",[39,0.06,74,0.06,155,0.06,586,3.106]],["title/overview.html",[587,2.678]],["body/overview.html",[0,0.211,39,0.06,74,0.06,155,0.06,587,3.096,588,3.948]],["title/miscellaneous/variables.html",[373,1.151,589,2.385]],["body/miscellaneous/variables.html",[0,0.171,12,0.843,22,0.88,23,1.111,26,0.483,34,1.15,38,0.325,39,0.069,42,1.058,46,3.18,71,1.462,74,0.031,79,1.471,80,0.473,81,0.881,89,3.104,96,0.933,98,0.924,103,1.267,110,0.895,113,0.755,119,1.225,136,2.58,141,3.189,155,0.031,200,2.217,203,2.179,240,3.058,267,2.888,274,2.217,278,2.713,344,1.158,350,1.158,352,1.158,355,1.158,357,1.158,359,1.158,373,0.791,386,2.049,413,3.104,464,3.969,467,3.793,589,1.158,590,2.827,591,1.477,592,1.477,593,2.301,594,1.477,595,3.958,596,1.477,597,3.958,598,3.958,599,3.958,600,3.958,601,4.746,602,4.987,603,3.958,604,1.477,605,2.301,606,2.301,607,1.477,608,1.477,609,1.477,610,3.958,611,4.498,612,3.958,613,3.958,614,3.958,615,1.477,616,1.477,617,1.477,618,2.301,619,1.477,620,1.477,621,1.477,622,2.301,623,2.301,624,1.477,625,1.477]]],"invertedIndex":[["",{"_index":39,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":304,"title":{},"body":{"classes/TestSelect.html":{},"index.html":{}}}],["0.1.0",{"_index":362,"title":{},"body":{"changelog.html":{}}}],["0.2.0",{"_index":335,"title":{},"body":{"changelog.html":{}}}],["0.2.1",{"_index":334,"title":{},"body":{"changelog.html":{}}}],["0.2.2",{"_index":332,"title":{},"body":{"changelog.html":{}}}],["0.2.3",{"_index":328,"title":{},"body":{"changelog.html":{}}}],["0172de3",{"_index":345,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":333,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":336,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":330,"title":{},"body":{"changelog.html":{}}}],["065ab58",{"_index":351,"title":{},"body":{"changelog.html":{}}}],["085fd65",{"_index":360,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["12",{"_index":435,"title":{},"body":{"index.html":{}}}],["13",{"_index":353,"title":{},"body":{"changelog.html":{}}}],["17",{"_index":331,"title":{},"body":{"changelog.html":{}}}],["2018",{"_index":329,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["25",{"_index":363,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":337,"title":{},"body":{"changelog.html":{}}}],["2c49330",{"_index":358,"title":{},"body":{"changelog.html":{}}}],["39d1f3a",{"_index":348,"title":{},"body":{"changelog.html":{}}}],["6.0.0",{"_index":370,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":588,"title":{},"body":{"overview.html":{}}}],["8036c22",{"_index":361,"title":{},"body":{"changelog.html":{}}}],["a282826",{"_index":343,"title":{},"body":{"changelog.html":{}}}],["abov",{"_index":453,"title":{},"body":{"index.html":{},"license.html":{}}}],["access",{"_index":16,"title":{},"body":{"classes/ComponentTester.html":{},"index.html":{}}}],["accessor",{"_index":114,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["action",{"_index":579,"title":{},"body":{"license.html":{}}}],["activatedrout",{"_index":383,"title":{},"body":{"miscellaneous/functions.html":{}}}],["activatedroutesnapshot",{"_index":403,"title":{},"body":{"miscellaneous/functions.html":{}}}],["actual",{"_index":79,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/variables.html":{}}}],["actual.indexof(expect",{"_index":605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["actual.join",{"_index":608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["actual.length",{"_index":607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["add",{"_index":347,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["addit",{"_index":159,"title":{},"body":{"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["allow",{"_index":20,"title":{},"body":{"classes/ComponentTester.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["alreadi",{"_index":420,"title":{},"body":{"index.html":{}}}],["alway",{"_index":342,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["and/or",{"_index":553,"title":{},"body":{"license.html":{}}}],["angular",{"_index":13,"title":{},"body":{"classes/ComponentTester.html":{},"index.html":{}}}],["angular/cor",{"_index":131,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"dependencies.html":{}}}],["angular/core/test",{"_index":130,"title":{},"body":{"classes/ComponentTester.html":{}}}],["angular/rout",{"_index":371,"title":{},"body":{"dependencies.html":{}}}],["api",{"_index":11,"title":{},"body":{"classes/ComponentTester.html":{},"index.html":{}}}],["arg",{"_index":66,"title":{},"body":{"classes/ComponentTester.html":{}}}],["aris",{"_index":583,"title":{},"body":{"license.html":{}}}],["around",{"_index":459,"title":{},"body":{"index.html":{}}}],["array",{"_index":103,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/variables.html":{}}}],["array).map(opt",{"_index":309,"title":{},"body":{"classes/TestSelect.html":{}}}],["array.prototype.slice.call(this.nativeelement.classlist",{"_index":218,"title":{},"body":{"classes/TestElement.html":{}}}],["array.prototype.slice.call(this.nativeelement.opt",{"_index":308,"title":{},"body":{"classes/TestSelect.html":{}}}],["assert",{"_index":600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["assert(fals",{"_index":612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["assert(tru",{"_index":614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["associ",{"_index":542,"title":{},"body":{"license.html":{}}}],["attr",{"_index":180,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["attr(nam",{"_index":185,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["attribut",{"_index":160,"title":{},"body":{"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["author",{"_index":572,"title":{},"body":{"license.html":{}}}],["automat",{"_index":460,"title":{},"body":{"index.html":{}}}],["avoid",{"_index":456,"title":{},"body":{"index.html":{}}}],["base",{"_index":409,"title":{},"body":{"index.html":{}}}],["beforeeach",{"_index":485,"title":{},"body":{"index.html":{}}}],["benefit",{"_index":510,"title":{},"body":{"index.html":{}}}],["block",{"_index":513,"title":{},"body":{"index.html":{}}}],["boolean",{"_index":89,"title":{},"body":{"classes/ComponentTester.html":{},"miscellaneous/variables.html":{}}}],["bug",{"_index":338,"title":{},"body":{"changelog.html":{}}}],["button",{"_index":29,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["button(selector",{"_index":70,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["button.t",{"_index":157,"title":{},"body":{"classes/TestButton.html":{}}}],["button.ts:16",{"_index":173,"title":{},"body":{"classes/TestButton.html":{}}}],["button.ts:8",{"_index":167,"title":{},"body":{"classes/TestButton.html":{}}}],["c",{"_index":530,"title":{},"body":{"license.html":{}}}],["call",{"_index":49,"title":{},"body":{"classes/ComponentTester.html":{}}}],["care",{"_index":422,"title":{},"body":{"index.html":{}}}],["case",{"_index":468,"title":{},"body":{"index.html":{}}}],["champagn",{"_index":366,"title":{},"body":{"changelog.html":{}}}],["chang",{"_index":56,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"index.html":{}}}],["changelog",{"_index":318,"title":{"changelog.html":{}},"body":{}}],["charg",{"_index":537,"title":{},"body":{"license.html":{}}}],["check",{"_index":240,"title":{},"body":{"classes/TestInput.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["checknochang",{"_index":91,"title":{},"body":{"classes/ComponentTester.html":{}}}],["citi",{"_index":429,"title":{},"body":{"index.html":{}}}],["claim",{"_index":575,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["cleaner",{"_index":407,"title":{},"body":{"index.html":{}}}],["click",{"_index":165,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["code",{"_index":396,"title":{},"body":{"miscellaneous/functions.html":{}}}],["commit",{"_index":326,"title":{},"body":{"changelog.html":{}}}],["compar",{"_index":610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["complet",{"_index":523,"title":{},"body":{"index.html":{}}}],["compon",{"_index":43,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["component.spec.t",{"_index":502,"title":{},"body":{"index.html":{}}}],["componentfixtur",{"_index":14,"title":{},"body":{"classes/ComponentTester.html":{},"index.html":{}}}],["componentinst",{"_index":122,"title":{},"body":{"classes/ComponentTester.html":{},"index.html":{}}}],["componenttest",{"_index":1,"title":{"classes/ComponentTester.html":{}},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["componenttester(fixtur",{"_index":139,"title":{},"body":{"classes/ComponentTester.html":{}}}],["componenttyp",{"_index":87,"title":{},"body":{"classes/ComponentTester.html":{}}}],["condit",{"_index":558,"title":{},"body":{"license.html":{}}}],["connect",{"_index":585,"title":{},"body":{"license.html":{}}}],["const",{"_index":136,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestSelect.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":36,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["constructor(arg",{"_index":37,"title":{},"body":{"classes/ComponentTester.html":{}}}],["constructor(protect",{"_index":208,"title":{},"body":{"classes/TestElement.html":{}}}],["constructor(test",{"_index":166,"title":{},"body":{"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["contain",{"_index":386,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["content",{"_index":204,"title":{},"body":{"classes/TestElement.html":{},"changelog.html":{}}}],["contract",{"_index":580,"title":{},"body":{"license.html":{}}}],["copi",{"_index":540,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":529,"title":{},"body":{"license.html":{}}}],["correct",{"_index":492,"title":{},"body":{"index.html":{}}}],["countri",{"_index":430,"title":{},"body":{"index.html":{}}}],["countryselect",{"_index":432,"title":{},"body":{"index.html":{}}}],["countryselect.dispatchevent(new",{"_index":436,"title":{},"body":{"index.html":{}}}],["countryselect.selectedindex",{"_index":434,"title":{},"body":{"index.html":{}}}],["creat",{"_index":31,"title":{},"body":{"classes/ComponentTester.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["create(componenttyp",{"_index":84,"title":{},"body":{"classes/ComponentTester.html":{}}}],["css",{"_index":80,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/variables.html":{}}}],["custom",{"_index":340,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["customequalitytest",{"_index":598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["damag",{"_index":576,"title":{},"body":{"license.html":{}}}],["deal",{"_index":543,"title":{},"body":{"license.html":{}}}],["debug",{"_index":128,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["debugel",{"_index":125,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["default",{"_index":594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defin",{"_index":40,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["deleg",{"_index":45,"title":{},"body":{"classes/ComponentTester.html":{}}}],["demo",{"_index":526,"title":{},"body":{"index.html":{}}}],["depend",{"_index":368,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["descript",{"_index":7,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["detail",{"_index":509,"title":{},"body":{"index.html":{}}}],["detect",{"_index":57,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["detectchang",{"_index":32,"title":{},"body":{"classes/ComponentTester.html":{},"index.html":{}}}],["detectchanges(checknochang",{"_index":88,"title":{},"body":{"classes/ComponentTester.html":{}}}],["dev",{"_index":500,"title":{},"body":{"index.html":{}}}],["directli",{"_index":47,"title":{},"body":{"classes/ComponentTester.html":{}}}],["disabl",{"_index":171,"title":{},"body":{"classes/TestButton.html":{}}}],["dispatch",{"_index":191,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["dispatchev",{"_index":181,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["dispatchevent(ev",{"_index":188,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["dispatcheventoftyp",{"_index":182,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["dispatcheventoftype(typ",{"_index":192,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["display",{"_index":427,"title":{},"body":{"index.html":{}}}],["distribut",{"_index":551,"title":{},"body":{"license.html":{}}}],["document",{"_index":322,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["doesn't",{"_index":394,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dom",{"_index":119,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/variables.html":{}}}],["don't",{"_index":400,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dri",{"_index":451,"title":{},"body":{"index.html":{}}}],["e",{"_index":211,"title":{},"body":{"classes/TestElement.html":{}}}],["e0a0472",{"_index":354,"title":{},"body":{"changelog.html":{}}}],["e1163fb",{"_index":356,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":512,"title":{},"body":{"index.html":{}}}],["easier",{"_index":461,"title":{},"body":{"index.html":{}}}],["eee2e97",{"_index":349,"title":{},"body":{"changelog.html":{}}}],["el",{"_index":602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.check",{"_index":619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.class",{"_index":604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.selectedindex",{"_index":621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.selectedlabel",{"_index":625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.selectedvalu",{"_index":624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.textcont",{"_index":618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["el.valu",{"_index":616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["element",{"_index":22,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["element(selector",{"_index":94,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["element.t",{"_index":178,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{}}}],["element.ts:104",{"_index":197,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:114",{"_index":198,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:123",{"_index":187,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:14",{"_index":183,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:16",{"_index":228,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["element.ts:20",{"_index":184,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:24",{"_index":199,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:31",{"_index":202,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:38",{"_index":193,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:46",{"_index":190,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:54",{"_index":206,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:62",{"_index":186,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:74",{"_index":194,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:8",{"_index":226,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["element.ts:86",{"_index":195,"title":{},"body":{"classes/TestElement.html":{}}}],["element.ts:95",{"_index":196,"title":{},"body":{"classes/TestElement.html":{}}}],["elements(selector",{"_index":101,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["empti",{"_index":105,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"index.html":{}}}],["enjoy",{"_index":514,"title":{},"body":{"index.html":{}}}],["entri",{"_index":9,"title":{},"body":{"classes/ComponentTester.html":{}}}],["equal",{"_index":623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error",{"_index":77,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["etc",{"_index":469,"title":{},"body":{"index.html":{}}}],["evalu",{"_index":60,"title":{},"body":{"classes/ComponentTester.html":{}}}],["even",{"_index":463,"title":{},"body":{"index.html":{}}}],["event",{"_index":189,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{},"license.html":{}}}],["event('chang",{"_index":437,"title":{},"body":{"index.html":{}}}],["event(typ",{"_index":215,"title":{},"body":{"classes/TestElement.html":{}}}],["everyth",{"_index":491,"title":{},"body":{"index.html":{}}}],["exact",{"_index":617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exampl",{"_index":25,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["exist",{"_index":474,"title":{},"body":{"index.html":{}}}],["expect",{"_index":464,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["expect(city).tobetruthi",{"_index":441,"title":{},"body":{"index.html":{}}}],["expect(city.options.length).tobe(3",{"_index":442,"title":{},"body":{"index.html":{}}}],["expect(city.options[0].label).tob",{"_index":444,"title":{},"body":{"index.html":{}}}],["expect(city.options[0].value).tob",{"_index":443,"title":{},"body":{"index.html":{}}}],["expect(city.options[1].label).tobe('pari",{"_index":446,"title":{},"body":{"index.html":{}}}],["expect(city.options[1].value).tobe('pari",{"_index":445,"title":{},"body":{"index.html":{}}}],["expect(city.options[2].label).tobe('lyon",{"_index":448,"title":{},"body":{"index.html":{}}}],["expect(city.options[2].value).tobe('lyon",{"_index":447,"title":{},"body":{"index.html":{}}}],["expect(fixture.nativeelement.queryselector('#city')).tobefalsi",{"_index":452,"title":{},"body":{"index.html":{}}}],["expect(tester.city).tobefalsi",{"_index":482,"title":{},"body":{"index.html":{}}}],["expect(tester.city).tohaveselectedlabel('pari",{"_index":494,"title":{},"body":{"index.html":{}}}],["expect(tester.city.optionlabels).toequ",{"_index":480,"title":{},"body":{"index.html":{}}}],["expect(tester.city.optionvalues).toequ",{"_index":477,"title":{},"body":{"index.html":{}}}],["expect(tester.country).tohaveselectedvalue('fr",{"_index":493,"title":{},"body":{"index.html":{}}}],["expect(tester.informationmessage).tocontaintext('pleas",{"_index":490,"title":{},"body":{"index.html":{}}}],["expect(tester.name).tohavevalue('do",{"_index":495,"title":{},"body":{"index.html":{}}}],["expect(tester.newsletter).tobecheck",{"_index":496,"title":{},"body":{"index.html":{}}}],["export",{"_index":135,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["expos",{"_index":505,"title":{},"body":{"index.html":{}}}],["express",{"_index":565,"title":{},"body":{"license.html":{}}}],["extend",{"_index":163,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["fake",{"_index":381,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fakerout",{"_index":375,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fakeroute(opt",{"_index":379,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fakesnapshot",{"_index":377,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fakesnapshot(opt",{"_index":402,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fals",{"_index":267,"title":{},"body":{"classes/TestInput.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["falsi",{"_index":603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["featur",{"_index":346,"title":{},"body":{"changelog.html":{}}}],["feedback",{"_index":518,"title":{},"body":{"index.html":{}}}],["few",{"_index":418,"title":{},"body":{"index.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"index.html":{},"license.html":{}}}],["fillwith",{"_index":241,"title":{},"body":{"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["fillwith(valu",{"_index":246,"title":{},"body":{"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["first",{"_index":73,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{}}}],["fit",{"_index":568,"title":{},"body":{"license.html":{}}}],["fix",{"_index":339,"title":{},"body":{"changelog.html":{}}}],["fixtur",{"_index":28,"title":{},"body":{"classes/ComponentTester.html":{},"index.html":{}}}],["fixture.detectchang",{"_index":439,"title":{},"body":{"index.html":{}}}],["fixture.nativeelement.queryselector('#c",{"_index":440,"title":{},"body":{"index.html":{}}}],["fixture.nativeelement.queryselector('#countri",{"_index":433,"title":{},"body":{"index.html":{}}}],["flag",{"_index":174,"title":{},"body":{"classes/TestButton.html":{}}}],["follow",{"_index":425,"title":{},"body":{"index.html":{},"license.html":{}}}],["form",{"_index":489,"title":{},"body":{"index.html":{}}}],["found",{"_index":97,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["franc",{"_index":431,"title":{},"body":{"index.html":{}}}],["free",{"_index":536,"title":{},"body":{"license.html":{}}}],["french",{"_index":428,"title":{},"body":{"index.html":{}}}],["frequent",{"_index":484,"title":{},"body":{"index.html":{}}}],["function",{"_index":374,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnish",{"_index":556,"title":{},"body":{"license.html":{}}}],["get",{"_index":21,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["getcheck",{"_index":260,"title":{},"body":{"classes/TestInput.html":{}}}],["getclass",{"_index":205,"title":{},"body":{"classes/TestElement.html":{}}}],["getcomponentinst",{"_index":123,"title":{},"body":{"classes/ComponentTester.html":{}}}],["getdebugel",{"_index":126,"title":{},"body":{"classes/ComponentTester.html":{}}}],["getdis",{"_index":172,"title":{},"body":{"classes/TestButton.html":{}}}],["getnativeel",{"_index":116,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{}}}],["getoptionlabel",{"_index":297,"title":{},"body":{"classes/TestSelect.html":{}}}],["getoptionvalu",{"_index":294,"title":{},"body":{"classes/TestSelect.html":{}}}],["getselectedindex",{"_index":285,"title":{},"body":{"classes/TestSelect.html":{}}}],["getselectedlabel",{"_index":291,"title":{},"body":{"classes/TestSelect.html":{}}}],["getselectedvalu",{"_index":288,"title":{},"body":{"classes/TestSelect.html":{}}}],["getsiz",{"_index":300,"title":{},"body":{"classes/TestSelect.html":{}}}],["getter",{"_index":506,"title":{},"body":{"index.html":{}}}],["gettextcont",{"_index":201,"title":{},"body":{"classes/TestElement.html":{}}}],["getvalu",{"_index":258,"title":{},"body":{"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["github",{"_index":522,"title":{},"body":{"index.html":{}}}],["give",{"_index":15,"title":{},"body":{"classes/ComponentTester.html":{}}}],["given",{"_index":42,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["goe",{"_index":388,"title":{},"body":{"miscellaneous/functions.html":{}}}],["grant",{"_index":535,"title":{},"body":{"license.html":{}}}],["guidelin",{"_index":327,"title":{},"body":{"changelog.html":{}}}],["help",{"_index":161,"title":{},"body":{"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["herebi",{"_index":534,"title":{},"body":{"license.html":{}}}],["hide",{"_index":449,"title":{},"body":{"index.html":{}}}],["holder",{"_index":573,"title":{},"body":{"license.html":{}}}],["host",{"_index":120,"title":{},"body":{"classes/ComponentTester.html":{}}}],["html",{"_index":175,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["htmlelement",{"_index":121,"title":{},"body":{"classes/ComponentTester.html":{}}}],["impli",{"_index":566,"title":{},"body":{"license.html":{}}}],["import",{"_index":129,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["includ",{"_index":545,"title":{},"body":{"license.html":{}}}],["index",{"_index":26,"title":{"index.html":{}},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["inherit",{"_index":169,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["input",{"_index":33,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["input(selector",{"_index":106,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["input.t",{"_index":239,"title":{},"body":{"classes/TestInput.html":{}}}],["input.ts:17",{"_index":247,"title":{},"body":{"classes/TestInput.html":{}}}],["input.ts:25",{"_index":259,"title":{},"body":{"classes/TestInput.html":{}}}],["input.ts:32",{"_index":261,"title":{},"body":{"classes/TestInput.html":{}}}],["input.ts:39",{"_index":245,"title":{},"body":{"classes/TestInput.html":{}}}],["input.ts:47",{"_index":248,"title":{},"body":{"classes/TestInput.html":{}}}],["input.ts:8",{"_index":243,"title":{},"body":{"classes/TestInput.html":{}}}],["instal",{"_index":497,"title":{},"body":{"index.html":{}}}],["instanc",{"_index":62,"title":{},"body":{"classes/ComponentTester.html":{}}}],["instanceof",{"_index":141,"title":{},"body":{"classes/ComponentTester.html":{},"miscellaneous/variables.html":{}}}],["instead",{"_index":281,"title":{},"body":{"classes/TestSelect.html":{}}}],["isn't",{"_index":78,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["isneg",{"_index":601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["issu",{"_index":515,"title":{},"body":{"index.html":{}}}],["it'",{"_index":51,"title":{},"body":{"classes/ComponentTester.html":{}}}],["it('should",{"_index":426,"title":{},"body":{"index.html":{}}}],["jasmin",{"_index":483,"title":{},"body":{"index.html":{}}}],["jasmine.addmatchers(speculoosmatch",{"_index":486,"title":{},"body":{"index.html":{}}}],["jasmine.custommatch",{"_index":599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jasmine.custommatcherfactori",{"_index":593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jasmine.custommatcherresult",{"_index":611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jasmine.matchersutil",{"_index":597,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kind",{"_index":564,"title":{},"body":{"license.html":{}}}],["know",{"_index":421,"title":{},"body":{"index.html":{}}}],["label",{"_index":278,"title":{},"body":{"classes/TestSelect.html":{},"miscellaneous/variables.html":{}}}],["liabil",{"_index":577,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":574,"title":{},"body":{"license.html":{}}}],["librari",{"_index":415,"title":{},"body":{"index.html":{}}}],["licens",{"_index":527,"title":{"license.html":{}},"body":{"license.html":{}}}],["limit",{"_index":546,"title":{},"body":{"license.html":{}}}],["log",{"_index":319,"title":{},"body":{"changelog.html":{}}}],["look",{"_index":524,"title":{},"body":{"index.html":{}}}],["lyon",{"_index":479,"title":{},"body":{"index.html":{}}}],["made",{"_index":50,"title":{},"body":{"classes/ComponentTester.html":{}}}],["main",{"_index":8,"title":{},"body":{"classes/ComponentTester.html":{}}}],["make",{"_index":414,"title":{},"body":{"index.html":{}}}],["match",{"_index":74,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["matcher",{"_index":341,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["merchant",{"_index":567,"title":{},"body":{"license.html":{}}}],["merg",{"_index":549,"title":{},"body":{"license.html":{}}}],["messag",{"_index":467,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["method",{"_index":19,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["minim",{"_index":525,"title":{},"body":{"index.html":{}}}],["minut",{"_index":419,"title":{},"body":{"index.html":{}}}],["miscellan",{"_index":373,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":528,"title":{},"body":{"license.html":{}}}],["modifi",{"_index":548,"title":{},"body":{"license.html":{}}}],["modul",{"_index":586,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":465,"title":{},"body":{"index.html":{}}}],["mycomponenttest",{"_index":470,"title":{},"body":{"index.html":{}}}],["name",{"_index":64,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{}}}],["nativ",{"_index":118,"title":{},"body":{"classes/ComponentTester.html":{},"index.html":{}}}],["nativeel",{"_index":115,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"index.html":{}}}],["necessari",{"_index":58,"title":{},"body":{"classes/ComponentTester.html":{}}}],["need",{"_index":438,"title":{},"body":{"index.html":{}}}],["negativecompar",{"_index":613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["new",{"_index":138,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["ngx",{"_index":404,"title":{},"body":{"index.html":{}}}],["ninja",{"_index":531,"title":{},"body":{"license.html":{}}}],["none",{"_index":609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["noninfring",{"_index":571,"title":{},"body":{"license.html":{}}}],["notabl",{"_index":320,"title":{},"body":{"changelog.html":{}}}],["note",{"_index":48,"title":{},"body":{"classes/ComponentTester.html":{}}}],["noth",{"_index":279,"title":{},"body":{"classes/TestSelect.html":{}}}],["notic",{"_index":559,"title":{},"body":{"license.html":{}}}],["npm",{"_index":498,"title":{},"body":{"index.html":{}}}],["null",{"_index":83,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["number",{"_index":274,"title":{},"body":{"classes/TestSelect.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":411,"title":{},"body":{"index.html":{}}}],["obtain",{"_index":539,"title":{},"body":{"license.html":{}}}],["on",{"_index":508,"title":{},"body":{"index.html":{}}}],["onc",{"_index":54,"title":{},"body":{"classes/ComponentTester.html":{}}}],["option",{"_index":65,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["option'",{"_index":622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["option.label",{"_index":311,"title":{},"body":{"classes/TestSelect.html":{}}}],["option.valu",{"_index":310,"title":{},"body":{"classes/TestSelect.html":{}}}],["optionlabel",{"_index":296,"title":{},"body":{"classes/TestSelect.html":{}}}],["optionvalu",{"_index":293,"title":{},"body":{"classes/TestSelect.html":{}}}],["otherwis",{"_index":582,"title":{},"body":{"license.html":{}}}],["out",{"_index":584,"title":{},"body":{"license.html":{}}}],["overview",{"_index":587,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":367,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":410,"title":{},"body":{"index.html":{}}}],["param",{"_index":134,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{}}}],["paramet",{"_index":63,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{}}}],["parammap",{"_index":385,"title":{},"body":{"miscellaneous/functions.html":{}}}],["parent",{"_index":391,"title":{},"body":{"miscellaneous/functions.html":{}}}],["pari",{"_index":478,"title":{},"body":{"index.html":{}}}],["partial",{"_index":382,"title":{},"body":{"miscellaneous/functions.html":{}}}],["particular",{"_index":569,"title":{},"body":{"license.html":{}}}],["pass",{"_index":46,"title":{},"body":{"classes/ComponentTester.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["pattern",{"_index":412,"title":{},"body":{"index.html":{}}}],["peer",{"_index":369,"title":{},"body":{"dependencies.html":{}}}],["permiss",{"_index":533,"title":{},"body":{"license.html":{}}}],["permit",{"_index":555,"title":{},"body":{"license.html":{}}}],["person",{"_index":538,"title":{},"body":{"license.html":{}}}],["pleas",{"_index":517,"title":{},"body":{"index.html":{}}}],["point",{"_index":10,"title":{},"body":{"classes/ComponentTester.html":{}}}],["popul",{"_index":488,"title":{},"body":{"index.html":{}}}],["portion",{"_index":562,"title":{},"body":{"license.html":{}}}],["pre",{"_index":487,"title":{},"body":{"index.html":{}}}],["prefer",{"_index":507,"title":{},"body":{"index.html":{}}}],["previous",{"_index":450,"title":{},"body":{"index.html":{}}}],["privat",{"_index":207,"title":{},"body":{"classes/TestElement.html":{}}}],["project",{"_index":321,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["properti",{"_index":18,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["provid",{"_index":158,"title":{},"body":{"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{},"license.html":{}}}],["public",{"_index":179,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["publish",{"_index":550,"title":{},"body":{"license.html":{}}}],["pull",{"_index":520,"title":{},"body":{"index.html":{}}}],["purpos",{"_index":570,"title":{},"body":{"license.html":{}}}],["querier",{"_index":133,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{}}}],["queryparam",{"_index":389,"title":{},"body":{"miscellaneous/functions.html":{}}}],["queryparammap",{"_index":390,"title":{},"body":{"miscellaneous/functions.html":{}}}],["question",{"_index":516,"title":{},"body":{"index.html":{}}}],["read",{"_index":462,"title":{},"body":{"index.html":{}}}],["readabl",{"_index":466,"title":{},"body":{"index.html":{}}}],["readonli",{"_index":27,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["receiv",{"_index":595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["recommend",{"_index":455,"title":{},"body":{"index.html":{}}}],["releas",{"_index":365,"title":{},"body":{"changelog.html":{}}}],["repetit",{"_index":457,"title":{},"body":{"index.html":{}}}],["request",{"_index":521,"title":{},"body":{"index.html":{}}}],["restrict",{"_index":544,"title":{},"body":{"license.html":{}}}],["result",{"_index":155,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":81,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["right",{"_index":547,"title":{},"body":{"license.html":{}}}],["rout",{"_index":392,"title":{},"body":{"miscellaneous/functions.html":{}}}],["route'",{"_index":384,"title":{},"body":{"miscellaneous/functions.html":{}}}],["route.parent.snapshot",{"_index":398,"title":{},"body":{"miscellaneous/functions.html":{}}}],["route.snapshot.par",{"_index":399,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rxj",{"_index":372,"title":{},"body":{"dependencies.html":{}}}],["same",{"_index":387,"title":{},"body":{"miscellaneous/functions.html":{}}}],["save",{"_index":499,"title":{},"body":{"index.html":{}}}],["see",{"_index":323,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["select",{"_index":34,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["select(selector",{"_index":108,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["select.t",{"_index":268,"title":{},"body":{"classes/TestSelect.html":{}}}],["select.ts:16",{"_index":275,"title":{},"body":{"classes/TestSelect.html":{}}}],["select.ts:26",{"_index":283,"title":{},"body":{"classes/TestSelect.html":{}}}],["select.ts:38",{"_index":277,"title":{},"body":{"classes/TestSelect.html":{}}}],["select.ts:48",{"_index":286,"title":{},"body":{"classes/TestSelect.html":{}}}],["select.ts:55",{"_index":289,"title":{},"body":{"classes/TestSelect.html":{}}}],["select.ts:65",{"_index":292,"title":{},"body":{"classes/TestSelect.html":{}}}],["select.ts:75",{"_index":295,"title":{},"body":{"classes/TestSelect.html":{}}}],["select.ts:8",{"_index":272,"title":{},"body":{"classes/TestSelect.html":{}}}],["select.ts:82",{"_index":298,"title":{},"body":{"classes/TestSelect.html":{}}}],["select.ts:89",{"_index":301,"title":{},"body":{"classes/TestSelect.html":{}}}],["selectedindex",{"_index":284,"title":{},"body":{"classes/TestSelect.html":{}}}],["selectedlabel",{"_index":290,"title":{},"body":{"classes/TestSelect.html":{}}}],["selectedvalu",{"_index":287,"title":{},"body":{"classes/TestSelect.html":{}}}],["selectindex",{"_index":269,"title":{},"body":{"classes/TestSelect.html":{}}}],["selectindex(index",{"_index":273,"title":{},"body":{"classes/TestSelect.html":{}}}],["selectlabel",{"_index":270,"title":{},"body":{"classes/TestSelect.html":{}}}],["selectlabel(label",{"_index":276,"title":{},"body":{"classes/TestSelect.html":{}}}],["selector",{"_index":75,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["selectvalu",{"_index":271,"title":{},"body":{"classes/TestSelect.html":{}}}],["selectvalue(valu",{"_index":282,"title":{},"body":{"classes/TestSelect.html":{}}}],["sell",{"_index":554,"title":{},"body":{"license.html":{}}}],["set",{"_index":61,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestInput.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{}}}],["shall",{"_index":560,"title":{},"body":{"license.html":{}}}],["shown",{"_index":504,"title":{},"body":{"index.html":{}}}],["similar",{"_index":473,"title":{},"body":{"index.html":{}}}],["simpler",{"_index":406,"title":{},"body":{"index.html":{}}}],["simpli",{"_index":416,"title":{},"body":{"index.html":{}}}],["size",{"_index":299,"title":{},"body":{"classes/TestSelect.html":{}}}],["snapshot",{"_index":393,"title":{},"body":{"miscellaneous/functions.html":{}}}],["snapshot'",{"_index":395,"title":{},"body":{"miscellaneous/functions.html":{}}}],["softwar",{"_index":541,"title":{},"body":{"license.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["speculoo",{"_index":405,"title":{},"body":{"index.html":{}}}],["speculoosmatch",{"_index":590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["squad",{"_index":532,"title":{},"body":{"license.html":{}}}],["src/.../matchers.t",{"_index":591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../route.t",{"_index":376,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/lib/compon",{"_index":5,"title":{},"body":{"classes/ComponentTester.html":{}}}],["src/lib/matchers.t",{"_index":592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/lib/route.t",{"_index":378,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/lib/test",{"_index":156,"title":{},"body":{"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["standard",{"_index":324,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["start",{"_index":317,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["static",{"_index":30,"title":{},"body":{"classes/ComponentTester.html":{}}}],["string",{"_index":71,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/variables.html":{}}}],["subclass",{"_index":24,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["subject",{"_index":557,"title":{},"body":{"license.html":{}}}],["sublicens",{"_index":552,"title":{},"body":{"license.html":{}}}],["submit",{"_index":519,"title":{},"body":{"index.html":{}}}],["substanti",{"_index":561,"title":{},"body":{"license.html":{}}}],["super(mycompon",{"_index":471,"title":{},"body":{"index.html":{}}}],["super(test",{"_index":176,"title":{},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["t",{"_index":86,"title":{},"body":{"classes/ComponentTester.html":{}}}],["templat",{"_index":59,"title":{},"body":{"classes/ComponentTester.html":{}}}],["test",{"_index":69,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["testb",{"_index":44,"title":{},"body":{"classes/ComponentTester.html":{}}}],["testbed.createcomponent(arg",{"_index":142,"title":{},"body":{"classes/ComponentTester.html":{}}}],["testbed.createcomponent(componenttyp",{"_index":137,"title":{},"body":{"classes/ComponentTester.html":{}}}],["testbutton",{"_index":82,"title":{"classes/TestButton.html":{}},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testel",{"_index":23,"title":{"classes/TestElement.html":{}},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/variables.html":{}}}],["testelement:104",{"_index":236,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["testelement:114",{"_index":237,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["testelement:123",{"_index":230,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["testelement:20",{"_index":227,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["testelement:38",{"_index":232,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["testelement:46",{"_index":231,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["testelement:62",{"_index":229,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["testelement:74",{"_index":233,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["testelement:86",{"_index":234,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["testelement:95",{"_index":235,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["testelementqueri",{"_index":132,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{}}}],["testelementquerier(test",{"_index":210,"title":{},"body":{"classes/TestElement.html":{}}}],["testelementquerier.wrap(this.debugel",{"_index":144,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester",{"_index":168,"title":{},"body":{"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["tester.country.selectindex(0",{"_index":481,"title":{},"body":{"index.html":{}}}],["tester.country.selectlabel('fr",{"_index":476,"title":{},"body":{"index.html":{}}}],["tester.element('#som",{"_index":100,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["tester.elements('input",{"_index":104,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["tester.t",{"_index":6,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:101",{"_index":107,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:110",{"_index":109,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:120",{"_index":112,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:129",{"_index":72,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:136",{"_index":90,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:20",{"_index":68,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:25",{"_index":67,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:30",{"_index":85,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:33",{"_index":41,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:54",{"_index":117,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:61",{"_index":124,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:68",{"_index":127,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:80",{"_index":95,"title":{},"body":{"classes/ComponentTester.html":{}}}],["tester.ts:92",{"_index":102,"title":{},"body":{"classes/ComponentTester.html":{}}}],["testhtmlel",{"_index":164,"title":{"classes/TestHtmlElement.html":{}},"body":{"classes/TestButton.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testhtmlelement:104",{"_index":256,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testhtmlelement:114",{"_index":257,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testhtmlelement:123",{"_index":250,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testhtmlelement:16",{"_index":170,"title":{},"body":{"classes/TestButton.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testhtmlelement:20",{"_index":244,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testhtmlelement:38",{"_index":252,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testhtmlelement:46",{"_index":251,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testhtmlelement:62",{"_index":249,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testhtmlelement:74",{"_index":253,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testhtmlelement:86",{"_index":254,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testhtmlelement:95",{"_index":255,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["testinput",{"_index":98,"title":{"classes/TestInput.html":{}},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/variables.html":{}}}],["testselect",{"_index":110,"title":{"classes/TestSelect.html":{}},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["testtextarea",{"_index":113,"title":{"classes/TestTextArea.html":{}},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/variables.html":{}}}],["testxxx",{"_index":511,"title":{},"body":{"index.html":{}}}],["text",{"_index":203,"title":{},"body":{"classes/TestElement.html":{},"classes/TestSelect.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["textarea",{"_index":35,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["textarea(selector",{"_index":111,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["textarea.t",{"_index":313,"title":{},"body":{"classes/TestTextArea.html":{}}}],["textarea.ts:17",{"_index":315,"title":{},"body":{"classes/TestTextArea.html":{}}}],["textarea.ts:25",{"_index":316,"title":{},"body":{"classes/TestTextArea.html":{}}}],["textarea.ts:8",{"_index":314,"title":{},"body":{"classes/TestTextArea.html":{}}}],["textcont",{"_index":200,"title":{},"body":{"classes/TestElement.html":{},"miscellaneous/variables.html":{}}}],["this.debugelement.nativeel",{"_index":212,"title":{},"body":{"classes/TestElement.html":{}}}],["this.dispatcheventoftype('chang",{"_index":266,"title":{},"body":{"classes/TestInput.html":{},"classes/TestSelect.html":{}}}],["this.dispatcheventoftype('input",{"_index":263,"title":{},"body":{"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["this.fixtur",{"_index":140,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.fixture.componentinst",{"_index":146,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.fixture.debugel",{"_index":147,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.fixture.detectchanges(checknochang",{"_index":154,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.fixture.nativeel",{"_index":145,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.nativeelement.check",{"_index":264,"title":{},"body":{"classes/TestInput.html":{}}}],["this.nativeelement.click",{"_index":238,"title":{},"body":{"classes/TestHtmlElement.html":{}}}],["this.nativeelement.dis",{"_index":177,"title":{},"body":{"classes/TestButton.html":{}}}],["this.nativeelement.dispatchevent(ev",{"_index":217,"title":{},"body":{"classes/TestElement.html":{}}}],["this.nativeelement.dispatchevent(new",{"_index":214,"title":{},"body":{"classes/TestElement.html":{}}}],["this.nativeelement.getattribute(nam",{"_index":219,"title":{},"body":{"classes/TestElement.html":{}}}],["this.nativeelement.options.length",{"_index":312,"title":{},"body":{"classes/TestSelect.html":{}}}],["this.nativeelement.selectedindex",{"_index":302,"title":{},"body":{"classes/TestSelect.html":{}}}],["this.nativeelement.textcont",{"_index":213,"title":{},"body":{"classes/TestElement.html":{}}}],["this.nativeelement.valu",{"_index":262,"title":{},"body":{"classes/TestInput.html":{},"classes/TestTextArea.html":{}}}],["this.optionlabels.indexof(label",{"_index":306,"title":{},"body":{"classes/TestSelect.html":{}}}],["this.optionvalues.indexof(valu",{"_index":303,"title":{},"body":{"classes/TestSelect.html":{}}}],["this.queri",{"_index":209,"title":{},"body":{"classes/TestElement.html":{}}}],["this.querier.button(selector",{"_index":225,"title":{},"body":{"classes/TestElement.html":{}}}],["this.querier.element(selector",{"_index":220,"title":{},"body":{"classes/TestElement.html":{}}}],["this.querier.elements(selector",{"_index":221,"title":{},"body":{"classes/TestElement.html":{}}}],["this.querier.input(selector",{"_index":222,"title":{},"body":{"classes/TestElement.html":{}}}],["this.querier.select(selector",{"_index":223,"title":{},"body":{"classes/TestElement.html":{}}}],["this.querier.textarea(selector",{"_index":224,"title":{},"body":{"classes/TestElement.html":{}}}],["this.select('#c",{"_index":475,"title":{},"body":{"index.html":{}}}],["this.select('#countri",{"_index":472,"title":{},"body":{"index.html":{}}}],["this.selectedindex",{"_index":307,"title":{},"body":{"classes/TestSelect.html":{}}}],["this.selectindex(index",{"_index":305,"title":{},"body":{"classes/TestSelect.html":{}}}],["this.testel",{"_index":143,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.testelement.button(selector",{"_index":153,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.testelement.element(selector",{"_index":148,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.testelement.elements(selector",{"_index":149,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.testelement.input(selector",{"_index":150,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.testelement.select(selector",{"_index":151,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.testelement.textarea(selector",{"_index":152,"title":{},"body":{"classes/ComponentTester.html":{}}}],["this.tester.detectchang",{"_index":216,"title":{},"body":{"classes/TestElement.html":{},"classes/TestHtmlElement.html":{}}}],["throw",{"_index":76,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["thu",{"_index":99,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["tobecheck",{"_index":350,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["tocontaintext",{"_index":352,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["todo",{"_index":280,"title":{},"body":{"classes/TestSelect.html":{}}}],["tohaveclass",{"_index":596,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tohaveselectedindex",{"_index":355,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["tohaveselectedlabel",{"_index":357,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["tohaveselectedvalu",{"_index":359,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["tohavetext",{"_index":344,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["tohavevalu",{"_index":615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tort",{"_index":581,"title":{},"body":{"license.html":{}}}],["trigger",{"_index":55,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["true",{"_index":265,"title":{},"body":{"classes/TestInput.html":{}}}],["type",{"_index":38,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["typic",{"_index":503,"title":{},"body":{"index.html":{}}}],["uncheck",{"_index":242,"title":{},"body":{"classes/TestInput.html":{}}}],["undefin",{"_index":380,"title":{},"body":{"miscellaneous/functions.html":{}}}],["under",{"_index":397,"title":{},"body":{"miscellaneous/functions.html":{}}}],["understand",{"_index":417,"title":{},"body":{"index.html":{}}}],["unit",{"_index":408,"title":{},"body":{"index.html":{}}}],["up",{"_index":52,"title":{},"body":{"classes/ComponentTester.html":{}}}],["us",{"_index":17,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{}}}],["user",{"_index":53,"title":{},"body":{"classes/ComponentTester.html":{}}}],["util",{"_index":413,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["valu",{"_index":96,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["variabl",{"_index":589,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["veri",{"_index":364,"title":{},"body":{"changelog.html":{}}}],["version",{"_index":325,"title":{},"body":{"changelog.html":{}}}],["void",{"_index":93,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{}}}],["warranti",{"_index":563,"title":{},"body":{"license.html":{}}}],["was${!isneg",{"_index":620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["way",{"_index":454,"title":{},"body":{"index.html":{}}}],["whether",{"_index":578,"title":{},"body":{"license.html":{}}}],["without",{"_index":401,"title":{},"body":{"miscellaneous/functions.html":{},"license.html":{}}}],["wrap",{"_index":12,"title":{},"body":{"classes/ComponentTester.html":{},"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["wrapper",{"_index":458,"title":{},"body":{"index.html":{}}}],["write",{"_index":162,"title":{},"body":{"classes/TestButton.html":{},"classes/TestElement.html":{},"classes/TestHtmlElement.html":{},"classes/TestInput.html":{},"classes/TestSelect.html":{},"classes/TestTextArea.html":{},"index.html":{}}}],["written",{"_index":424,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":501,"title":{},"body":{"index.html":{}}}],["ye",{"_index":92,"title":{},"body":{"classes/ComponentTester.html":{}}}],["you'v",{"_index":423,"title":{},"body":{"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/ComponentTester.html":{"url":"classes/ComponentTester.html","title":"class - ComponentTester","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ComponentTester\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/component-tester.ts\n        \n\n            \n                Description\n            \n            \n                The main entry point of the API. It wraps an Angular ComponentFixture, and gives access to its\nmost used properties and methods. It also allows getting elements wrapped in TestElement (and its subclasses)\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                fixture\n                            \n                            \n                                    Readonly\n                                testElement\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                button\n                            \n                            \n                                    Static\n                                create\n                            \n                            \n                                detectChanges\n                            \n                            \n                                element\n                            \n                            \n                                elements\n                            \n                            \n                                input\n                            \n                            \n                                select\n                            \n                            \n                                textarea\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(arg: Type | ComponentFixture)\n                    \n                \n                        \n                            \n                                Defined in src/lib/component-tester.ts:33\n                            \n                        \n\n                \n                    \n                            Creates a ComponentFixture for the given component type using the TestBed, and creates a ComponentTester\nwrapping (and delegating) to this fixture. If a fixture is passed, then delegates to this fixture directly.\nNote that no detectChanges() call is made by this constructor. It's up to the subclass constructor,\nor to the user of the created ComponentTester, to call detectChanges() at least once to trigger change\ndetection. This is necessary because some component templates can only be evaluated once inputs\nhave been set on the component instance.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        arg\n                                                  \n                                                        \n                                                                    Type | ComponentFixture\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                        \n                                                                the type of the component to wrap, or a component fixture to wrap\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            fixture\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        fixture:     ComponentFixture\n\n                    \n                \n                    \n                        \n                            Type :     ComponentFixture\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/component-tester.ts:25\n                            \n                        \n\n                \n                    \n                        The component fixture of the component\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            testElement\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        testElement:     TestElement\n\n                    \n                \n                    \n                        \n                            Type :     TestElement\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/component-tester.ts:20\n                            \n                        \n\n                \n                    \n                        The test element of the component\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            button\n                            \n                            \n                        \n                    \n                \n                \n                    \nbutton(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/component-tester.ts:129\n                            \n                        \n\n\n                \n                    \n                            Gets the first button matched by the given selector. Throws an Error if the matched element isn't actually a button.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestButton | null\n\n                            \n                                \n                                    the wrapped button, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            create\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        create(componentType: Type)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/component-tester.ts:30\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n                            Creates a component fixture of the given type with the TestBed and wraps it into a ComponentTester\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        componentType\n                                                        \n                                                                    Type\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     ComponentTester\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            detectChanges\n                            \n                            \n                        \n                    \n                \n                \n                    \ndetectChanges(checkNoChanges?: boolean)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/component-tester.ts:136\n                            \n                        \n\n\n                \n                    \n                            Triggers a change detection using the wrapped fixture\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        checkNoChanges\n                                                        \n                                                                    boolean\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            element\n                            \n                            \n                        \n                    \n                \n                \n                    \nelement(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/component-tester.ts:80\n                            \n                        \n\n\n                \n                    \n                            Gets the first element matching the given CSS selector and wraps it into a TestElement. The actual type\nof the returned value is the TestElement subclass matching the type of the found element. So, if the\nmatched element is an input for example, the method will return a TestInput. You can thus use\ntester.element('#some-input') as TestInput.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestElement | null\n\n                            \n                                \n                                    the wrapped element, or null if no element matches the selector.\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            elements\n                            \n                            \n                        \n                    \n                \n                \n                    \nelements(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/component-tester.ts:92\n                            \n                        \n\n\n                \n                    \n                            Gets all the elements matching the given CSS selector and wraps them into a TestElement. The actual type\nof the returned elements is the TestElement subclass matching the type of the found element. So, if the\nmatched elements are inputs for example, the method will return an array of TestInput. You can thus use\ntester.elements('input') as Array.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Array>\n\n                            \n                                \n                                    the array of matched elements, empty if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            input\n                            \n                            \n                        \n                    \n                \n                \n                    \ninput(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/component-tester.ts:101\n                            \n                        \n\n\n                \n                    \n                            Gets the first input matched by the given selector. Throws an Error if the matched element isn't actually an input.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestInput | null\n\n                            \n                                \n                                    the wrapped input, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            select\n                            \n                            \n                        \n                    \n                \n                \n                    \nselect(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/component-tester.ts:110\n                            \n                        \n\n\n                \n                    \n                            Gets the first select matched by the given selector. Throws an Error if the matched element isn't actually a select.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestSelect | null\n\n                            \n                                \n                                    the wrapped select, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            textarea\n                            \n                            \n                        \n                    \n                \n                \n                    \ntextarea(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/component-tester.ts:120\n                            \n                        \n\n\n                \n                    \n                            Gets the first textarea matched by the given selector\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestTextArea | null\n\n                            \n                                \n                                    the wrapped textarea, or null if no element was matched. Throws an Error if the matched element isn't actually a textarea.\n\n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        nativeElement\n                    \n                \n\n                \n                    \n                        getnativeElement()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/component-tester.ts:54\n                                \n                            \n                    \n                        \n                                The native DOM host element of the component\n\n\n                                \n                                    Returns :     HTMLElement\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        componentInstance\n                    \n                \n\n                \n                    \n                        getcomponentInstance()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/component-tester.ts:61\n                                \n                            \n                    \n                        \n                                Gets the instance of the tested component from the wrapped fixture\n\n\n                                \n                                    Returns :     T\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        debugElement\n                    \n                \n\n                \n                    \n                        getdebugElement()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/component-tester.ts:68\n                                \n                            \n                    \n                        \n                                Gets the debug element from the wrapped fixture\n\n\n                                \n                                    Returns :     DebugElement\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { DebugElement, Type } from '@angular/core';\nimport { TestTextArea } from './test-textarea';\nimport { TestElement } from './test-element';\nimport { TestInput } from './test-input';\nimport { TestSelect } from './test-select';\nimport { TestButton } from './test-button';\nimport { TestElementQuerier } from './test-element-querier';\n\n/**\n * The main entry point of the API. It wraps an Angular ComponentFixture, and gives access to its\n * most used properties and methods. It also allows getting elements wrapped in TestElement (and its subclasses)\n * @param  the type of the component to test\n */\nexport class ComponentTester {\n\n  /**\n   * The test element of the component\n   */\n  readonly testElement: TestElement;\n\n  /**\n   * The component fixture of the component\n   */\n  readonly fixture: ComponentFixture;\n\n  /**\n   * Creates a component fixture of the given type with the TestBed and wraps it into a ComponentTester\n   */\n  static create(componentType: Type) {\n    const fixture = TestBed.createComponent(componentType);\n    return new ComponentTester(fixture);\n  }\n\n  /**\n   * Creates a ComponentFixture for the given component type using the TestBed, and creates a ComponentTester\n   * wrapping (and delegating) to this fixture. If a fixture is passed, then delegates to this fixture directly.\n   *\n   * Note that no `detectChanges()` call is made by this constructor. It's up to the subclass constructor,\n   * or to the user of the created ComponentTester, to call `detectChanges()` at least once to trigger change\n   * detection. This is necessary because some component templates can only be evaluated once inputs\n   * have been set on the component instance.\n   *\n   * @param arg the type of the component to wrap, or a component fixture to wrap\n   */\n  constructor(arg: Type | ComponentFixture) {\n    this.fixture = (arg instanceof ComponentFixture) ? arg : TestBed.createComponent(arg);\n    this.testElement = TestElementQuerier.wrap(this.debugElement, this);\n  }\n\n  /**\n   * The native DOM host element of the component\n   */\n  get nativeElement(): HTMLElement {\n    return this.fixture.nativeElement;\n  }\n\n  /**\n   * Gets the instance of the tested component from the wrapped fixture\n   */\n  get componentInstance(): T {\n    return this.fixture.componentInstance;\n  }\n\n  /**\n   * Gets the debug element from the wrapped fixture\n   */\n  get debugElement(): DebugElement {\n    return this.fixture.debugElement;\n  }\n\n  /**\n   * Gets the first element matching the given CSS selector and wraps it into a TestElement. The actual type\n   * of the returned value is the TestElement subclass matching the type of the found element. So, if the\n   * matched element is an input for example, the method will return a TestInput. You can thus use\n   * `tester.element('#some-input') as TestInput`.\n   * @param selector a CSS selector\n   * @returns the wrapped element, or null if no element matches the selector.\n   */\n  element(selector: string): TestElement | null {\n    return this.testElement.element(selector);\n  }\n\n  /**\n   * Gets all the elements matching the given CSS selector and wraps them into a TestElement. The actual type\n   * of the returned elements is the TestElement subclass matching the type of the found element. So, if the\n   * matched elements are inputs for example, the method will return an array of TestInput. You can thus use\n   * `tester.elements('input') as Array`.\n   * @param selector a CSS selector\n   * @returns the array of matched elements, empty if no element was matched\n   */\n  elements(selector: string): Array> {\n    return this.testElement.elements(selector);\n  }\n\n  /**\n   * Gets the first input matched by the given selector. Throws an Error if the matched element isn't actually an input.\n   * @param selector a CSS selector\n   * @returns the wrapped input, or null if no element was matched\n   */\n  input(selector: string): TestInput | null  {\n    return this.testElement.input(selector);\n  }\n\n  /**\n   * Gets the first select matched by the given selector. Throws an Error if the matched element isn't actually a select.\n   * @param selector a CSS selector\n   * @returns the wrapped select, or null if no element was matched\n   */\n  select(selector: string): TestSelect | null  {\n    return this.testElement.select(selector);\n  }\n\n  /**\n   * Gets the first textarea matched by the given selector\n   * @param selector a CSS selector\n   * @returns the wrapped textarea, or null if no element was matched. Throws an Error if the matched element isn't actually a textarea.\n   * @throws {Error} if the matched element isn't actually a textarea\n   */\n  textarea(selector: string): TestTextArea | null {\n    return this.testElement.textarea(selector);\n  }\n\n  /**\n   * Gets the first button matched by the given selector. Throws an Error if the matched element isn't actually a button.\n   * @param selector a CSS selector\n   * @returns the wrapped button, or null if no element was matched\n   */\n  button(selector: string): TestButton | null {\n    return this.testElement.button(selector);\n  }\n\n  /**\n   * Triggers a change detection using the wrapped fixture\n   */\n  detectChanges(checkNoChanges?: boolean) {\n    this.fixture.detectChanges(checkNoChanges);\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TestButton.html":{"url":"classes/TestButton.html","title":"class - TestButton","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  TestButton\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/test-button.ts\n        \n\n            \n                Description\n            \n            \n                A wrapped button element, providing additional methods and attributes helping with writing tests\n\n            \n\n            \n                Extends\n            \n            \n                    TestHtmlElement\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tester: ComponentTester, debugElement: DebugElement)\n                    \n                \n                        \n                            \n                                Defined in src/lib/test-button.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tester\n                                                  \n                                                        \n                                                                    ComponentTester\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        debugElement\n                                                  \n                                                        \n                                                                    DebugElement\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            click\n                            \n                            \n                        \n                    \n                \n                \n                    \nclick()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:16\n                            \n                        \n\n\n                \n                    \n                            Clicks on the wrapped element, then triggers a change detection\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        disabled\n                    \n                \n\n                \n                    \n                        getdisabled()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-button.ts:16\n                                \n                            \n                    \n                        \n                                the disabled flag of the button\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { ComponentTester } from './component-tester';\nimport { TestHtmlElement } from './test-html-element';\nimport { DebugElement } from '@angular/core';\n\n/**\n * A wrapped button element, providing additional methods and attributes helping with writing tests\n */\nexport class TestButton extends TestHtmlElement {\n  constructor(tester: ComponentTester, debugElement: DebugElement) {\n    super(tester, debugElement);\n  }\n\n  /**\n   * the disabled flag of the button\n   */\n  get disabled() {\n    return this.nativeElement.disabled;\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TestElement.html":{"url":"classes/TestElement.html","title":"class - TestElement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  TestElement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/test-element.ts\n        \n\n            \n                Description\n            \n            \n                A wrapped DOM element, providing additional methods and attributes helping with writing tests\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                debugElement\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                attr\n                            \n                            \n                                button\n                            \n                            \n                                dispatchEvent\n                            \n                            \n                                dispatchEventOfType\n                            \n                            \n                                element\n                            \n                            \n                                elements\n                            \n                            \n                                input\n                            \n                            \n                                select\n                            \n                            \n                                textarea\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tester: ComponentTester, debugElement: DebugElement)\n                    \n                \n                        \n                            \n                                Defined in src/lib/test-element.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tester\n                                                  \n                                                        \n                                                                    ComponentTester\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        debugElement\n                                                  \n                                                        \n                                                                    DebugElement\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            debugElement\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        debugElement:     DebugElement\n\n                    \n                \n                    \n                        \n                            Type :     DebugElement\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/test-element.ts:20\n                            \n                        \n\n                \n                    \n                        the wrapped debug element\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            attr\n                            \n                            \n                        \n                    \n                \n                \n                    \nattr(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-element.ts:62\n                            \n                        \n\n\n                \n                    \n                            Gets the attribute of the wrapped element with the given name\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                the name of the attribute to get\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            button\n                            \n                            \n                        \n                    \n                \n                \n                    \nbutton(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-element.ts:123\n                            \n                        \n\n\n                \n                    \n                            Gets the first button matched by the given selector. Throws an Error if the matched element isn't actually a button.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestButton | null\n\n                            \n                                \n                                    the wrapped button, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dispatchEvent\n                            \n                            \n                        \n                    \n                \n                \n                    \ndispatchEvent(event: Event)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-element.ts:46\n                            \n                        \n\n\n                \n                    \n                            dispatches the given event from the wrapped element, then triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        event\n                                                        \n                                                                    Event\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dispatchEventOfType\n                            \n                            \n                        \n                    \n                \n                \n                    \ndispatchEventOfType(type: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-element.ts:38\n                            \n                        \n\n\n                \n                    \n                            dispatches an event of the given type from the wrapped element, then triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        type\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            element\n                            \n                            \n                        \n                    \n                \n                \n                    \nelement(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-element.ts:74\n                            \n                        \n\n\n                \n                    \n                            Gets the first element matching the given CSS selector and wraps it into a TestElement. The actual type\nof the returned value is the TestElement subclass matching the type of the found element. So, if the\nmatched element is an input for example, the method will return a TestInput. You can thus use\ntester.element('#some-input') as TestInput.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestElement | null\n\n                            \n                                \n                                    the wrapped element, or null if no element matches the selector.\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            elements\n                            \n                            \n                        \n                    \n                \n                \n                    \nelements(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-element.ts:86\n                            \n                        \n\n\n                \n                    \n                            Gets all the elements matching the given CSS selector and wraps them into a TestElement. The actual type\nof the returned elements is the TestElement subclass matching the type of the found element. So, if the\nmatched elements are inputs for example, the method will return an array of TestInput. You can thus use\ntester.elements('input') as Array.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Array>\n\n                            \n                                \n                                    the array of matched elements, empty if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            input\n                            \n                            \n                        \n                    \n                \n                \n                    \ninput(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-element.ts:95\n                            \n                        \n\n\n                \n                    \n                            Gets the first input matched by the given selector. Throws an Error if the matched element isn't actually an input.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestInput | null\n\n                            \n                                \n                                    the wrapped input, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            select\n                            \n                            \n                        \n                    \n                \n                \n                    \nselect(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-element.ts:104\n                            \n                        \n\n\n                \n                    \n                            Gets the first select matched by the given selector. Throws an Error if the matched element isn't actually a select.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestSelect | null\n\n                            \n                                \n                                    the wrapped select, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            textarea\n                            \n                            \n                        \n                    \n                \n                \n                    \ntextarea(selector: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-element.ts:114\n                            \n                        \n\n\n                \n                    \n                            Gets the first textarea matched by the given selector\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestTextArea | null\n\n                            \n                                \n                                    the wrapped textarea, or null if no element was matched. Throws an Error if the matched element isn't actually a textarea.\n\n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        nativeElement\n                    \n                \n\n                \n                    \n                        getnativeElement()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-element.ts:24\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        textContent\n                    \n                \n\n                \n                    \n                        gettextContent()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-element.ts:31\n                                \n                            \n                    \n                        \n                                the text content of this element\n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        classes\n                    \n                \n\n                \n                    \n                        getclasses()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-element.ts:54\n                                \n                            \n                    \n                        \n                                Gets the CSS classes of the wrapped element, as an array\n\n\n                                \n                                    Returns :     Array\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { ComponentTester } from './component-tester';\nimport { TestButton } from './test-button';\nimport { TestSelect } from './test-select';\nimport { TestTextArea } from './test-textarea';\nimport { TestInput } from './test-input';\nimport { TestElementQuerier } from './test-element-querier';\nimport { DebugElement } from '@angular/core';\n\n/**\n * A wrapped DOM element, providing additional methods and attributes helping with writing tests\n */\nexport class TestElement {\n\n  private querier: TestElementQuerier;\n\n  constructor(protected tester: ComponentTester,\n              /**\n               * the wrapped debug element\n               */\n              public readonly debugElement: DebugElement) {\n    this.querier = new TestElementQuerier(tester, debugElement);\n  }\n\n  get nativeElement(): E {\n    return this.debugElement.nativeElement;\n  }\n\n  /**\n   * the text content of this element\n   */\n  get textContent() {\n    return this.nativeElement.textContent;\n  }\n\n  /**\n   * dispatches an event of the given type from the wrapped element, then triggers a change detection\n   */\n  dispatchEventOfType(type: string) {\n    this.nativeElement.dispatchEvent(new Event(type));\n    this.tester.detectChanges();\n  }\n\n  /**\n   * dispatches the given event from the wrapped element, then triggers a change detection\n   */\n  dispatchEvent(event: Event) {\n    this.nativeElement.dispatchEvent(event);\n    this.tester.detectChanges();\n  }\n\n  /**\n   * Gets the CSS classes of the wrapped element, as an array\n   */\n  get classes(): Array {\n    return Array.prototype.slice.call(this.nativeElement.classList);\n  }\n\n  /**\n   * Gets the attribute of the wrapped element with the given name\n   * @param name the name of the attribute to get\n   */\n  attr(name: string) {\n    return this.nativeElement.getAttribute(name);\n  }\n\n  /**\n   * Gets the first element matching the given CSS selector and wraps it into a TestElement. The actual type\n   * of the returned value is the TestElement subclass matching the type of the found element. So, if the\n   * matched element is an input for example, the method will return a TestInput. You can thus use\n   * `tester.element('#some-input') as TestInput`.\n   * @param selector a CSS selector\n   * @returns the wrapped element, or null if no element matches the selector.\n   */\n  element(selector: string): TestElement | null {\n    return this.querier.element(selector);\n  }\n\n  /**\n   * Gets all the elements matching the given CSS selector and wraps them into a TestElement. The actual type\n   * of the returned elements is the TestElement subclass matching the type of the found element. So, if the\n   * matched elements are inputs for example, the method will return an array of TestInput. You can thus use\n   * `tester.elements('input') as Array`.\n   * @param selector a CSS selector\n   * @returns the array of matched elements, empty if no element was matched\n   */\n  elements(selector: string): Array> {\n    return this.querier.elements(selector);\n  }\n\n  /**\n   * Gets the first input matched by the given selector. Throws an Error if the matched element isn't actually an input.\n   * @param selector a CSS selector\n   * @returns the wrapped input, or null if no element was matched\n   */\n  input(selector: string): TestInput | null {\n    return this.querier.input(selector);\n  }\n\n  /**\n   * Gets the first select matched by the given selector. Throws an Error if the matched element isn't actually a select.\n   * @param selector a CSS selector\n   * @returns the wrapped select, or null if no element was matched\n   */\n  select(selector: string): TestSelect | null {\n    return this.querier.select(selector);\n  }\n\n  /**\n   * Gets the first textarea matched by the given selector\n   * @param selector a CSS selector\n   * @returns the wrapped textarea, or null if no element was matched. Throws an Error if the matched element isn't actually a textarea.\n   * @throws {Error} if the matched element isn't actually a textarea\n   */\n  textarea(selector: string): TestTextArea | null {\n    return this.querier.textarea(selector);\n  }\n\n  /**\n   * Gets the first button matched by the given selector. Throws an Error if the matched element isn't actually a button.\n   * @param selector a CSS selector\n   * @returns the wrapped button, or null if no element was matched\n   */\n  button(selector: string): TestButton | null {\n    return this.querier.button(selector);\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TestHtmlElement.html":{"url":"classes/TestHtmlElement.html","title":"class - TestHtmlElement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  TestHtmlElement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/test-html-element.ts\n        \n\n            \n                Description\n            \n            \n                A wrapped DOM HTML element, providing additional methods and attributes helping with writing tests\n\n            \n\n            \n                Extends\n            \n            \n                    TestElement\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                debugElement\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                            \n                                attr\n                            \n                            \n                                button\n                            \n                            \n                                dispatchEvent\n                            \n                            \n                                dispatchEventOfType\n                            \n                            \n                                element\n                            \n                            \n                                elements\n                            \n                            \n                                input\n                            \n                            \n                                select\n                            \n                            \n                                textarea\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tester: ComponentTester, debugElement: DebugElement)\n                    \n                \n                        \n                            \n                                Defined in src/lib/test-html-element.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tester\n                                                  \n                                                        \n                                                                    ComponentTester\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        debugElement\n                                                  \n                                                        \n                                                                    DebugElement\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            debugElement\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        debugElement:     DebugElement\n\n                    \n                \n                    \n                        \n                            Type :     DebugElement\n\n                        \n                    \n                            \n                                \n                                    Inherited from     TestElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestElement:20\n                            \n                        \n\n                \n                    \n                        the wrapped debug element\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            click\n                            \n                            \n                        \n                    \n                \n                \n                    \nclick()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-html-element.ts:16\n                            \n                        \n\n\n                \n                    \n                            Clicks on the wrapped element, then triggers a change detection\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            attr\n                            \n                            \n                        \n                    \n                \n                \n                    \nattr(name: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestElement:62\n                            \n                        \n\n\n                \n                    \n                            Gets the attribute of the wrapped element with the given name\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                the name of the attribute to get\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            button\n                            \n                            \n                        \n                    \n                \n                \n                    \nbutton(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestElement:123\n                            \n                        \n\n\n                \n                    \n                            Gets the first button matched by the given selector. Throws an Error if the matched element isn't actually a button.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestButton | null\n\n                            \n                                \n                                    the wrapped button, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dispatchEvent\n                            \n                            \n                        \n                    \n                \n                \n                    \ndispatchEvent(event: Event)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestElement:46\n                            \n                        \n\n\n                \n                    \n                            dispatches the given event from the wrapped element, then triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        event\n                                                        \n                                                                    Event\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dispatchEventOfType\n                            \n                            \n                        \n                    \n                \n                \n                    \ndispatchEventOfType(type: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestElement:38\n                            \n                        \n\n\n                \n                    \n                            dispatches an event of the given type from the wrapped element, then triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        type\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            element\n                            \n                            \n                        \n                    \n                \n                \n                    \nelement(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestElement:74\n                            \n                        \n\n\n                \n                    \n                            Gets the first element matching the given CSS selector and wraps it into a TestElement. The actual type\nof the returned value is the TestElement subclass matching the type of the found element. So, if the\nmatched element is an input for example, the method will return a TestInput. You can thus use\ntester.element('#some-input') as TestInput.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestElement | null\n\n                            \n                                \n                                    the wrapped element, or null if no element matches the selector.\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            elements\n                            \n                            \n                        \n                    \n                \n                \n                    \nelements(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestElement:86\n                            \n                        \n\n\n                \n                    \n                            Gets all the elements matching the given CSS selector and wraps them into a TestElement. The actual type\nof the returned elements is the TestElement subclass matching the type of the found element. So, if the\nmatched elements are inputs for example, the method will return an array of TestInput. You can thus use\ntester.elements('input') as Array.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Array>\n\n                            \n                                \n                                    the array of matched elements, empty if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            input\n                            \n                            \n                        \n                    \n                \n                \n                    \ninput(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestElement:95\n                            \n                        \n\n\n                \n                    \n                            Gets the first input matched by the given selector. Throws an Error if the matched element isn't actually an input.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestInput | null\n\n                            \n                                \n                                    the wrapped input, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            select\n                            \n                            \n                        \n                    \n                \n                \n                    \nselect(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestElement:104\n                            \n                        \n\n\n                \n                    \n                            Gets the first select matched by the given selector. Throws an Error if the matched element isn't actually a select.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestSelect | null\n\n                            \n                                \n                                    the wrapped select, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            textarea\n                            \n                            \n                        \n                    \n                \n                \n                    \ntextarea(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestElement:114\n                            \n                        \n\n\n                \n                    \n                            Gets the first textarea matched by the given selector\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestTextArea | null\n\n                            \n                                \n                                    the wrapped textarea, or null if no element was matched. Throws an Error if the matched element isn't actually a textarea.\n\n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { ComponentTester } from './component-tester';\nimport { TestElement } from './test-element';\nimport { DebugElement } from '@angular/core';\n\n/**\n * A wrapped DOM HTML element, providing additional methods and attributes helping with writing tests\n */\nexport class TestHtmlElement extends TestElement {\n  constructor(tester: ComponentTester, debugElement: DebugElement) {\n    super(tester, debugElement);\n  }\n\n  /**\n   * Clicks on the wrapped element, then triggers a change detection\n   */\n  click() {\n    this.nativeElement.click();\n    this.tester.detectChanges();\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TestInput.html":{"url":"classes/TestInput.html","title":"class - TestInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  TestInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/test-input.ts\n        \n\n            \n                Description\n            \n            \n                A wrapped DOM HTML input element, providing additional methods and attributes helping with writing tests\n\n            \n\n            \n                Extends\n            \n            \n                    TestHtmlElement\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                debugElement\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                check\n                            \n                            \n                                fillWith\n                            \n                            \n                                uncheck\n                            \n                            \n                                click\n                            \n                            \n                                attr\n                            \n                            \n                                button\n                            \n                            \n                                dispatchEvent\n                            \n                            \n                                dispatchEventOfType\n                            \n                            \n                                element\n                            \n                            \n                                elements\n                            \n                            \n                                input\n                            \n                            \n                                select\n                            \n                            \n                                textarea\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tester: ComponentTester, debugElement: DebugElement)\n                    \n                \n                        \n                            \n                                Defined in src/lib/test-input.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tester\n                                                  \n                                                        \n                                                                    ComponentTester\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        debugElement\n                                                  \n                                                        \n                                                                    DebugElement\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            debugElement\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        debugElement:     DebugElement\n\n                    \n                \n                    \n                        \n                            Type :     DebugElement\n\n                        \n                    \n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:20\n                            \n                        \n\n                \n                    \n                        the wrapped debug element\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            check\n                            \n                            \n                        \n                    \n                \n                \n                    \ncheck()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-input.ts:39\n                            \n                        \n\n\n                \n                    \n                            Checks the wrapped input, then dispatches an event of type change and triggers a change detection\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fillWith\n                            \n                            \n                        \n                    \n                \n                \n                    \nfillWith(value: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-input.ts:17\n                            \n                        \n\n\n                \n                    \n                            Sets the value of the wrapped input, then dispatches an event of type input and triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                the new value of the input\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            uncheck\n                            \n                            \n                        \n                    \n                \n                \n                    \nuncheck()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-input.ts:47\n                            \n                        \n\n\n                \n                    \n                            Unchecks the wrapped input, then dispatches an event of type change and triggers a change detection\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            click\n                            \n                            \n                        \n                    \n                \n                \n                    \nclick()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:16\n                            \n                        \n\n\n                \n                    \n                            Clicks on the wrapped element, then triggers a change detection\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            attr\n                            \n                            \n                        \n                    \n                \n                \n                    \nattr(name: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:62\n                            \n                        \n\n\n                \n                    \n                            Gets the attribute of the wrapped element with the given name\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                the name of the attribute to get\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            button\n                            \n                            \n                        \n                    \n                \n                \n                    \nbutton(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:123\n                            \n                        \n\n\n                \n                    \n                            Gets the first button matched by the given selector. Throws an Error if the matched element isn't actually a button.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestButton | null\n\n                            \n                                \n                                    the wrapped button, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dispatchEvent\n                            \n                            \n                        \n                    \n                \n                \n                    \ndispatchEvent(event: Event)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:46\n                            \n                        \n\n\n                \n                    \n                            dispatches the given event from the wrapped element, then triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        event\n                                                        \n                                                                    Event\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dispatchEventOfType\n                            \n                            \n                        \n                    \n                \n                \n                    \ndispatchEventOfType(type: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:38\n                            \n                        \n\n\n                \n                    \n                            dispatches an event of the given type from the wrapped element, then triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        type\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            element\n                            \n                            \n                        \n                    \n                \n                \n                    \nelement(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:74\n                            \n                        \n\n\n                \n                    \n                            Gets the first element matching the given CSS selector and wraps it into a TestElement. The actual type\nof the returned value is the TestElement subclass matching the type of the found element. So, if the\nmatched element is an input for example, the method will return a TestInput. You can thus use\ntester.element('#some-input') as TestInput.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestElement | null\n\n                            \n                                \n                                    the wrapped element, or null if no element matches the selector.\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            elements\n                            \n                            \n                        \n                    \n                \n                \n                    \nelements(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:86\n                            \n                        \n\n\n                \n                    \n                            Gets all the elements matching the given CSS selector and wraps them into a TestElement. The actual type\nof the returned elements is the TestElement subclass matching the type of the found element. So, if the\nmatched elements are inputs for example, the method will return an array of TestInput. You can thus use\ntester.elements('input') as Array.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Array>\n\n                            \n                                \n                                    the array of matched elements, empty if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            input\n                            \n                            \n                        \n                    \n                \n                \n                    \ninput(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:95\n                            \n                        \n\n\n                \n                    \n                            Gets the first input matched by the given selector. Throws an Error if the matched element isn't actually an input.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestInput | null\n\n                            \n                                \n                                    the wrapped input, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            select\n                            \n                            \n                        \n                    \n                \n                \n                    \nselect(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:104\n                            \n                        \n\n\n                \n                    \n                            Gets the first select matched by the given selector. Throws an Error if the matched element isn't actually a select.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestSelect | null\n\n                            \n                                \n                                    the wrapped select, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            textarea\n                            \n                            \n                        \n                    \n                \n                \n                    \ntextarea(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:114\n                            \n                        \n\n\n                \n                    \n                            Gets the first textarea matched by the given selector\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestTextArea | null\n\n                            \n                                \n                                    the wrapped textarea, or null if no element was matched. Throws an Error if the matched element isn't actually a textarea.\n\n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        value\n                    \n                \n\n                \n                    \n                        getvalue()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-input.ts:25\n                                \n                            \n                    \n                        \n                                the value of the wrapped input\n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        checked\n                    \n                \n\n                \n                    \n                        getchecked()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-input.ts:32\n                                \n                            \n                    \n                        \n                                the checked property of the wrapped input\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { ComponentTester } from './component-tester';\nimport { TestHtmlElement } from './test-html-element';\nimport { DebugElement } from '@angular/core';\n\n/**\n * A wrapped DOM HTML input element, providing additional methods and attributes helping with writing tests\n */\nexport class TestInput extends TestHtmlElement {\n  constructor(tester: ComponentTester, debugElement: DebugElement) {\n    super(tester, debugElement);\n  }\n\n  /**\n   * Sets the value of the wrapped input, then dispatches an event of type input and triggers a change detection\n   * @param value the new value of the input\n   */\n  fillWith(value: string) {\n    this.nativeElement.value = value;\n    this.dispatchEventOfType('input');\n  }\n\n  /**\n   * the value of the wrapped input\n   */\n  get value() {\n    return this.nativeElement.value;\n  }\n\n  /**\n   * the checked property of the wrapped input\n   */\n  get checked() {\n    return this.nativeElement.checked;\n  }\n\n  /**\n   * Checks the wrapped input, then dispatches an event of type change and triggers a change detection\n   */\n  check() {\n    this.nativeElement.checked = true;\n    this.dispatchEventOfType('change');\n  }\n\n  /**\n   * Unchecks the wrapped input, then dispatches an event of type change and triggers a change detection\n   */\n  uncheck() {\n    this.nativeElement.checked = false;\n    this.dispatchEventOfType('change');\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TestSelect.html":{"url":"classes/TestSelect.html","title":"class - TestSelect","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  TestSelect\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/test-select.ts\n        \n\n            \n                Description\n            \n            \n                A wrapped DOM HTML select element, providing additional methods and attributes helping with writing tests\n\n            \n\n            \n                Extends\n            \n            \n                    TestHtmlElement\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                debugElement\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                selectIndex\n                            \n                            \n                                selectLabel\n                            \n                            \n                                selectValue\n                            \n                            \n                                click\n                            \n                            \n                                attr\n                            \n                            \n                                button\n                            \n                            \n                                dispatchEvent\n                            \n                            \n                                dispatchEventOfType\n                            \n                            \n                                element\n                            \n                            \n                                elements\n                            \n                            \n                                input\n                            \n                            \n                                select\n                            \n                            \n                                textarea\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tester: ComponentTester, debugElement: DebugElement)\n                    \n                \n                        \n                            \n                                Defined in src/lib/test-select.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tester\n                                                  \n                                                        \n                                                                    ComponentTester\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        debugElement\n                                                  \n                                                        \n                                                                    DebugElement\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            debugElement\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        debugElement:     DebugElement\n\n                    \n                \n                    \n                        \n                            Type :     DebugElement\n\n                        \n                    \n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:20\n                            \n                        \n\n                \n                    \n                        the wrapped debug element\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectIndex\n                            \n                            \n                        \n                    \n                \n                \n                    \nselectIndex(index: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-select.ts:16\n                            \n                        \n\n\n                \n                    \n                            Selects the option at the given index, then dispatches an event of type change and triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        index\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectLabel\n                            \n                            \n                        \n                    \n                \n                \n                    \nselectLabel(label: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-select.ts:38\n                            \n                        \n\n\n                \n                    \n                            Selects the first option with the given label (or text), then dispatches an event of type change and triggers a change detection.\nIf there is no option with the given label, then does nothing\nTODO should it throw instead?\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        label\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectValue\n                            \n                            \n                        \n                    \n                \n                \n                    \nselectValue(value: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-select.ts:26\n                            \n                        \n\n\n                \n                    \n                            Selects the first option with the given value, then dispatches an event of type change and triggers a change detection.\nIf there is no option with the given value, then does nothing\nTODO should it throw instead?\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            click\n                            \n                            \n                        \n                    \n                \n                \n                    \nclick()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:16\n                            \n                        \n\n\n                \n                    \n                            Clicks on the wrapped element, then triggers a change detection\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            attr\n                            \n                            \n                        \n                    \n                \n                \n                    \nattr(name: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:62\n                            \n                        \n\n\n                \n                    \n                            Gets the attribute of the wrapped element with the given name\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                the name of the attribute to get\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            button\n                            \n                            \n                        \n                    \n                \n                \n                    \nbutton(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:123\n                            \n                        \n\n\n                \n                    \n                            Gets the first button matched by the given selector. Throws an Error if the matched element isn't actually a button.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestButton | null\n\n                            \n                                \n                                    the wrapped button, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dispatchEvent\n                            \n                            \n                        \n                    \n                \n                \n                    \ndispatchEvent(event: Event)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:46\n                            \n                        \n\n\n                \n                    \n                            dispatches the given event from the wrapped element, then triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        event\n                                                        \n                                                                    Event\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dispatchEventOfType\n                            \n                            \n                        \n                    \n                \n                \n                    \ndispatchEventOfType(type: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:38\n                            \n                        \n\n\n                \n                    \n                            dispatches an event of the given type from the wrapped element, then triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        type\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            element\n                            \n                            \n                        \n                    \n                \n                \n                    \nelement(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:74\n                            \n                        \n\n\n                \n                    \n                            Gets the first element matching the given CSS selector and wraps it into a TestElement. The actual type\nof the returned value is the TestElement subclass matching the type of the found element. So, if the\nmatched element is an input for example, the method will return a TestInput. You can thus use\ntester.element('#some-input') as TestInput.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestElement | null\n\n                            \n                                \n                                    the wrapped element, or null if no element matches the selector.\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            elements\n                            \n                            \n                        \n                    \n                \n                \n                    \nelements(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:86\n                            \n                        \n\n\n                \n                    \n                            Gets all the elements matching the given CSS selector and wraps them into a TestElement. The actual type\nof the returned elements is the TestElement subclass matching the type of the found element. So, if the\nmatched elements are inputs for example, the method will return an array of TestInput. You can thus use\ntester.elements('input') as Array.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Array>\n\n                            \n                                \n                                    the array of matched elements, empty if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            input\n                            \n                            \n                        \n                    \n                \n                \n                    \ninput(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:95\n                            \n                        \n\n\n                \n                    \n                            Gets the first input matched by the given selector. Throws an Error if the matched element isn't actually an input.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestInput | null\n\n                            \n                                \n                                    the wrapped input, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            select\n                            \n                            \n                        \n                    \n                \n                \n                    \nselect(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:104\n                            \n                        \n\n\n                \n                    \n                            Gets the first select matched by the given selector. Throws an Error if the matched element isn't actually a select.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestSelect | null\n\n                            \n                                \n                                    the wrapped select, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            textarea\n                            \n                            \n                        \n                    \n                \n                \n                    \ntextarea(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:114\n                            \n                        \n\n\n                \n                    \n                            Gets the first textarea matched by the given selector\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestTextArea | null\n\n                            \n                                \n                                    the wrapped textarea, or null if no element was matched. Throws an Error if the matched element isn't actually a textarea.\n\n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        selectedIndex\n                    \n                \n\n                \n                    \n                        getselectedIndex()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-select.ts:48\n                                \n                            \n                    \n                        \n                                the selected index of the wrapped select\n\n\n                                \n                                    Returns :     number\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        selectedValue\n                    \n                \n\n                \n                    \n                        getselectedValue()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-select.ts:55\n                                \n                            \n                    \n                        \n                                the value of the selected option of the wrapped select, or null if there is no selected option\n\n\n                                \n                                    Returns :     string | null\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        selectedLabel\n                    \n                \n\n                \n                    \n                        getselectedLabel()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-select.ts:65\n                                \n                            \n                    \n                        \n                                the label (or text if no label) of the selected option of the wrapped select, or null if there is no selected option\n\n\n                                \n                                    Returns :     string | null\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        optionValues\n                    \n                \n\n                \n                    \n                        getoptionValues()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-select.ts:75\n                                \n                            \n                    \n                        \n                                the values of the options, as an array\n\n\n                                \n                                    Returns :     Array\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        optionLabels\n                    \n                \n\n                \n                    \n                        getoptionLabels()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-select.ts:82\n                                \n                            \n                    \n                        \n                                the labels (or texts if no label) of the options, as an array\n\n\n                                \n                                    Returns :     Array\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        size\n                    \n                \n\n                \n                    \n                        getsize()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-select.ts:89\n                                \n                            \n                    \n                        \n                                the number of options in the select\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { ComponentTester } from './component-tester';\nimport { TestHtmlElement } from './test-html-element';\nimport { DebugElement } from '@angular/core';\n\n/**\n * A wrapped DOM HTML select element, providing additional methods and attributes helping with writing tests\n */\nexport class TestSelect extends TestHtmlElement {\n  constructor(tester: ComponentTester, debugElement: DebugElement) {\n    super(tester, debugElement);\n  }\n\n  /**\n   * Selects the option at the given index, then dispatches an event of type change and triggers a change detection\n   */\n  selectIndex(index: number) {\n    this.nativeElement.selectedIndex = index;\n    this.dispatchEventOfType('change');\n  }\n\n  /**\n   * Selects the first option with the given value, then dispatches an event of type change and triggers a change detection.\n   * If there is no option with the given value, then does nothing\n   * TODO should it throw instead?\n   */\n  selectValue(value: string) {\n    const index = this.optionValues.indexOf(value);\n    if (index >= 0) {\n      this.selectIndex(index);\n    }\n  }\n\n  /**\n   * Selects the first option with the given label (or text), then dispatches an event of type change and triggers a change detection.\n   * If there is no option with the given label, then does nothing\n   * TODO should it throw instead?\n   */\n  selectLabel(label: string) {\n    const index = this.optionLabels.indexOf(label);\n    if (index >= 0) {\n      this.selectIndex(index);\n    }\n  }\n\n  /**\n   * the selected index of the wrapped select\n   */\n  get selectedIndex(): number {\n    return this.nativeElement.selectedIndex;\n  }\n\n  /**\n   * the value of the selected option of the wrapped select, or null if there is no selected option\n   */\n  get selectedValue(): string | null {\n    if (this.selectedIndex  {\n    return (Array.prototype.slice.call(this.nativeElement.options) as Array).map(option => option.value);\n  }\n\n  /**\n   * the labels (or texts if no label) of the options, as an array\n   */\n  get optionLabels(): Array {\n    return (Array.prototype.slice.call(this.nativeElement.options) as Array).map(option => option.label);\n  }\n\n  /**\n   * the number of options in the select\n   */\n  get size() {\n    return this.nativeElement.options.length;\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TestTextArea.html":{"url":"classes/TestTextArea.html","title":"class - TestTextArea","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  TestTextArea\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/test-textarea.ts\n        \n\n            \n                Description\n            \n            \n                A wrapped DOM HTML textarea element, providing additional methods and attributes helping with writing tests\n\n            \n\n            \n                Extends\n            \n            \n                    TestHtmlElement\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                debugElement\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                fillWith\n                            \n                            \n                                click\n                            \n                            \n                                attr\n                            \n                            \n                                button\n                            \n                            \n                                dispatchEvent\n                            \n                            \n                                dispatchEventOfType\n                            \n                            \n                                element\n                            \n                            \n                                elements\n                            \n                            \n                                input\n                            \n                            \n                                select\n                            \n                            \n                                textarea\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tester: ComponentTester, debugElement: DebugElement)\n                    \n                \n                        \n                            \n                                Defined in src/lib/test-textarea.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tester\n                                                  \n                                                        \n                                                                    ComponentTester\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                        debugElement\n                                                  \n                                                        \n                                                                    DebugElement\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            debugElement\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        debugElement:     DebugElement\n\n                    \n                \n                    \n                        \n                            Type :     DebugElement\n\n                        \n                    \n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:20\n                            \n                        \n\n                \n                    \n                        the wrapped debug element\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fillWith\n                            \n                            \n                        \n                    \n                \n                \n                    \nfillWith(value: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/test-textarea.ts:17\n                            \n                        \n\n\n                \n                    \n                            Sets the value of the wrapped textarea, then dispatches an event of type input and triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                the new value of the textarea\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            click\n                            \n                            \n                        \n                    \n                \n                \n                    \nclick()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:16\n                            \n                        \n\n\n                \n                    \n                            Clicks on the wrapped element, then triggers a change detection\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            attr\n                            \n                            \n                        \n                    \n                \n                \n                    \nattr(name: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:62\n                            \n                        \n\n\n                \n                    \n                            Gets the attribute of the wrapped element with the given name\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                the name of the attribute to get\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            button\n                            \n                            \n                        \n                    \n                \n                \n                    \nbutton(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:123\n                            \n                        \n\n\n                \n                    \n                            Gets the first button matched by the given selector. Throws an Error if the matched element isn't actually a button.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestButton | null\n\n                            \n                                \n                                    the wrapped button, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dispatchEvent\n                            \n                            \n                        \n                    \n                \n                \n                    \ndispatchEvent(event: Event)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:46\n                            \n                        \n\n\n                \n                    \n                            dispatches the given event from the wrapped element, then triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        event\n                                                        \n                                                                    Event\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dispatchEventOfType\n                            \n                            \n                        \n                    \n                \n                \n                    \ndispatchEventOfType(type: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:38\n                            \n                        \n\n\n                \n                    \n                            dispatches an event of the given type from the wrapped element, then triggers a change detection\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        type\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            element\n                            \n                            \n                        \n                    \n                \n                \n                    \nelement(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:74\n                            \n                        \n\n\n                \n                    \n                            Gets the first element matching the given CSS selector and wraps it into a TestElement. The actual type\nof the returned value is the TestElement subclass matching the type of the found element. So, if the\nmatched element is an input for example, the method will return a TestInput. You can thus use\ntester.element('#some-input') as TestInput.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestElement | null\n\n                            \n                                \n                                    the wrapped element, or null if no element matches the selector.\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            elements\n                            \n                            \n                        \n                    \n                \n                \n                    \nelements(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:86\n                            \n                        \n\n\n                \n                    \n                            Gets all the elements matching the given CSS selector and wraps them into a TestElement. The actual type\nof the returned elements is the TestElement subclass matching the type of the found element. So, if the\nmatched elements are inputs for example, the method will return an array of TestInput. You can thus use\ntester.elements('input') as Array.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Array>\n\n                            \n                                \n                                    the array of matched elements, empty if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            input\n                            \n                            \n                        \n                    \n                \n                \n                    \ninput(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:95\n                            \n                        \n\n\n                \n                    \n                            Gets the first input matched by the given selector. Throws an Error if the matched element isn't actually an input.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestInput | null\n\n                            \n                                \n                                    the wrapped input, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            select\n                            \n                            \n                        \n                    \n                \n                \n                    \nselect(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:104\n                            \n                        \n\n\n                \n                    \n                            Gets the first select matched by the given selector. Throws an Error if the matched element isn't actually a select.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestSelect | null\n\n                            \n                                \n                                    the wrapped select, or null if no element was matched\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            textarea\n                            \n                            \n                        \n                    \n                \n                \n                    \ntextarea(selector: string)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     TestHtmlElement\n\n                                \n                            \n                        \n                            \n                                    Defined in TestHtmlElement:114\n                            \n                        \n\n\n                \n                    \n                            Gets the first textarea matched by the given selector\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        selector\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                        \n                                                                a CSS selector\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TestTextArea | null\n\n                            \n                                \n                                    the wrapped textarea, or null if no element was matched. Throws an Error if the matched element isn't actually a textarea.\n\n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        value\n                    \n                \n\n                \n                    \n                        getvalue()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/test-textarea.ts:25\n                                \n                            \n                    \n                        \n                                the value of the wrapped textarea\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { ComponentTester } from './component-tester';\nimport { TestHtmlElement } from './test-html-element';\nimport { DebugElement } from '@angular/core';\n\n/**\n * A wrapped DOM HTML textarea element, providing additional methods and attributes helping with writing tests\n */\nexport class TestTextArea extends TestHtmlElement {\n  constructor(tester: ComponentTester, debugElement: DebugElement) {\n    super(tester, debugElement);\n  }\n\n  /**\n   * Sets the value of the wrapped textarea, then dispatches an event of type input and triggers a change detection\n   * @param value the new value of the textarea\n   */\n  fillWith(value: string) {\n    this.nativeElement.value = value;\n    this.dispatchEventOfType('input');\n  }\n\n  /**\n   * the value of the wrapped textarea\n   */\n  get value() {\n    return this.nativeElement.value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChange Log\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n\n0.2.3 (2018-06-17)\n\n0.2.2 (2018-06-04)\n\n0.2.1 (2018-06-04)\n\n0.2.0 (2018-05-28)\nBug Fixes\n\ncustom matchers always return false if no element (a282826)\nfix toHaveText on empty text contents (0172de3)\n\nFeatures\n\nadd custom matcher for class (39d1f3a)\nadd custom matcher for value (eee2e97)\ncustom matcher toBeChecked (065ab58)\ncustom matcher toContainText (#13) (e0a0472)\ncustom matcher toHaveSelectedIndex (e1163fb)\ncustom matcher toHaveSelectedLabel (2c49330)\ncustom matcher toHaveSelectedValue (085fd65)\ncustom matcher toHaveText (8036c22)\n\n\n0.1.0 (2018-05-25)\nVery first release :champagne:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Peer Dependencies\n    \n    \n        \n            @angular/core : ^6.0.0\n        \n            @angular/router : ^6.0.0\n        \n            rxjs : ^6.0.0\n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            fakeRoute   (src/.../route.ts)\n                        \n                        \n                            fakeSnapshot   (src/.../route.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/route.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            fakeRoute\n                            \n                            \n                        \n                    \n                \n                \n                    \nfakeRoute(options: undefined)\n                    \n                \n\n\n\n\n                \n                    \n                            Creates a fake partial ActivatedRoute for tests.\nIf you pass params, then the created route's paramMap will contain the same values.\nThe same goes for queryParams and queryParamMap.\nIf you pass a parent route and a snapshot, and the passed snapshot doesn't have a parent, then the snapshot's\nparent will be set to the parent route snapshot. This allows the code under test to use\nroute.parent.snapshot or route.snapshot.parent.\nIf you pass a snapshot with a parent, but don't pass a parent or pass a parent without snapshot, then the route's\nparent snapshot will be set to the given snapshot's parent. This allows the code under test to use\nroute.parent.snapshot or route.snapshot.parent.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fakeSnapshot\n                            \n                            \n                        \n                    \n                \n                \n                    \nfakeSnapshot(options: undefined)\n                    \n                \n\n\n\n\n                \n                    \n                            Creates a fake partial ActivatedRouteSnapshot for tests.\nIf you pass params, then the created snapshot's paramMap will contain the same values.\nThe same goes for queryParams and queryParamMap.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\nngx-speculoos\nngx-speculoos helps you write simpler, cleaner unit tests for your Angular components, based on the\npage object pattern. It also provides utilities to make writing Angular unit tests.\nThe library simply wraps the standard Angular ComponentFixture, and you should thus be \nable to understand and start using ngx-speculoos in just a few minutes if you already know\nhow to write Angular unit tests.\nWhy should you care?\nIf you've ever written tests like the following:\nit('should display French cities when selecting the country France', () => {\n  const countrySelect = fixture.nativeElement.querySelector('#country'); // countrySelect is of type any\n  countrySelect.selectedIndex = 12; // what is at index 12?\n  countrySelect.dispatchEvent(new Event('change')); // why do I need to do that?\n  fixture.detectChanges();\n\n  const city = fixture.nativeElement.querySelector('#city'); // city is of type any\n  expect(city).toBeTruthy();\n  expect(city.options.length).toBe(3);\n  expect(city.options[0].value).toBe('');\n  expect(city.options[0].label).toBe('');\n  expect(city.options[1].value).toBe('PARIS');\n  expect(city.options[1].label).toBe('Paris');\n  expect(city.options[2].value).toBe('LYON');\n  expect(city.options[2].label).toBe('Lyon');\n});\n\nit('should hide cities when selecting the empty country option', () => {\n  const countrySelect = fixture.nativeElement.querySelector('#country'); // I did that previously. What about DRY?\n  countrySelect.selectedIndex = 0;\n  countrySelect.dispatchEvent(new Event('change')); // why do I need to do that?\n  fixture.detectChanges(); // why do I need to do that?\n\n  expect(fixture.nativeElement.querySelector('#city')).toBeFalsy(); // I did that previously. What about DRY?\n});ngx-speculoos allows writing the above tests in a simpler, cleaner way:\n\nby using the page object pattern (which is optional, but recommended), you avoid repetitions. \nby using wrappers around elements, dispatching events and triggering change detection is automatic.\nby using wrappers around elements, you get useful additional methods to make tests easier to write and read.\nby using custom matchers, you get even simpler expectations and more readable error messages\nin any case you need them, you always have access to the fixture, the native elements, the debug elements, etc.\n\nclass MyComponentTester extends ComponentTester {\n  constructor() {\n    super(MyComponent);\n  }\n\n  get country() {\n    return this.select('#country'); // returns a TestSelect object, not any. Similar methods exist for inputs, buttons, etc.\n  }\n\n  get city() {\n    return this.select('#city'); // returns a TestSelect object, not any\n  }\n}\n\n[...]\n\nit('should display French cities when selecting the country France', () => {\n  tester.country.selectLabel('France'); // no dispatchEvent, no detectChanges needed\n\n  expect(tester.city.optionValues).toEqual(['', 'PARIS', 'LYON']);\n  expect(tester.city.optionLabels).toEqual(['', 'Paris', 'Lyon']);\n});\n\nit('should hide cities when selecting empty country option', () => {\n  tester.country.selectIndex(0); // no repetition of the selector, no dispatchEvent, no detectChanges needed\n\n  expect(tester.city).toBeFalsy(); // no repetition of the selector\n});If you use Jasmine, we also have custom matchers for frequent expectations:\n  beforeEach(() => jasmine.addMatchers(speculoosMatchers));\n\n  it('should contain a pre-populated form', () => {\n    expect(tester.informationMessage).toContainText('Please check that everything is correct');\n    expect(tester.country).toHaveSelectedValue('FR');\n    expect(tester.city).toHaveSelectedLabel('Paris');\n    expect(tester.name).toHaveValue('Doe');\n    expect(tester.newsletter).toBeChecked();\n  });Installation\nUsing npm: npm install --save-dev ngx-speculoos\nUsing yarn: yarn add --dev ngx-speculoos\nGetting started\n\nimport ComponentTester, and other needed classes from ngx-speculoos\nCreate a MyComponentTester class (in your my-component.spec.ts file, typically) extending \nComponentTester, as shown above.\nExpose getters (or methods, if you prefer) returning the elements used in your tests, using\none of the ComponentTester methods (element, elements, input, select, textarea, button).\nSee the API documentation for details\nWrite your tests, as shown above, benefitting from the additional methods on the TestXxx classes.\nIf needed, you can always get the fixture, componentInstance, debugElement, nativeElement, etc.\nfrom the ComponentTester, and the nativeElement from each TestXxx wrapper.\nIf you like our custom matchers, add them in a beforeEach block as shown above, and enjoy.\n\nIssues, questions\nPlease, provide feedback by filing issues, or by submitting pull requests, to the Github Project.\nComplete example\nYou can look at a minimal complete example in the demo project.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2018 Ninja Squad\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n    \n            \n                \n                    \n                        \n                        7 classes\n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            speculoosMatchers   (src/.../matchers.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/matchers.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            speculoosMatchers\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        speculoosMatchers:     jasmine.CustomMatcherFactories\n\n                    \n                \n                    \n                        \n                            Type :     jasmine.CustomMatcherFactories\n\n                        \n                    \n                    \n                        \n                            Default value : {\n\n  /**\n   * Checks that the receiver is a TestElement wrapping a DOM element and as the given CSS class\n   */\n  toHaveClass: (util: jasmine.MatchersUtil, customEqualityTesters: Array): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: any, expected: string) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check class '${expected}' on element, but element was falsy` };\n      }\n      if (!(el instanceof TestElement)) {\n        return { pass: false, message: `Expected to check class '${expected}' on element, but element was not a TestElement` };\n      }\n      const actual = el.classes;\n      const pass = actual.indexOf(expected) !== -1;\n      const message = `Expected element to ${isNegative ? 'not ' : ''}have class '${expected}', `\n      + `but had ${actual.length ? '\\'' + actual.join(', ') + '\\'' : 'none'}`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(false, el, expected);\n      },\n      negativeCompare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(true, el, expected);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestInput or a TestTextArea and has the given value\n   */\n  toHaveValue: (util: jasmine.MatchersUtil, customEqualityTesters: Array): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: any, expected: string) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check value '${expected}' on element, but element was falsy` };\n      }\n      if (!(el instanceof TestInput) && !(el instanceof TestTextArea)) {\n        return {\n          pass: false,\n          message: `Expected to check value '${expected}' on element, but element was neither a TestInput nor a TestTextArea`\n        };\n      }\n      const actual = el.value;\n      const pass = actual === expected;\n      const message = `Expected element to ${isNegative ? 'not ' : ''}have value '${expected}', but had value '${actual}'`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(false, el, expected);\n      },\n      negativeCompare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(true, el, expected);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestElement wrapping a DOM element and has the exact given textContent\n   */\n  toHaveText: (util: jasmine.MatchersUtil, customEqualityTesters: Array): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: any, expected: string) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check text '${expected}' on element, but element was falsy` };\n      }\n      if (!(el instanceof TestElement)) {\n        return { pass: false, message: `Expected to check text '${expected}' on element, but element was not a TestElement` };\n      }\n      const actual = el.textContent;\n      const pass = actual === expected;\n      const message = `Expected element to ${isNegative ? 'not ' : ''}have text '${expected}', but had '${actual}'`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(false, el, expected);\n      },\n      negativeCompare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(true, el, expected);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestElement wrapping a DOM element and contains the given textContent\n   */\n  toContainText: (util: jasmine.MatchersUtil, customEqualityTesters: Array): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: any, expected: string) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check text '${expected}' on element, but element was falsy` };\n      }\n      if (!(el instanceof TestElement)) {\n        return { pass: false, message: `Expected to check text '${expected}' on element, but element was not a TestElement` };\n      }\n      const actual = el.textContent;\n      if (!actual) {\n        return {\n          pass: isNegative,\n          message: `Expected element to ${isNegative ? 'not ' : ''}contain text '${expected}', but had no text`\n        };\n      }\n      const pass = actual.indexOf(expected) !== -1;\n      const message = `Expected element to ${isNegative ? 'not ' : ''}contain text '${expected}', but had text '${actual}'`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(false, el, expected);\n      },\n      negativeCompare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(true, el, expected);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestElement wrapping a DOM element and contains the given textContent\n   */\n  toBeChecked: (util: jasmine.MatchersUtil, customEqualityTesters: Array): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: any) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check if element was checked, but element was falsy` };\n      }\n      if (!(el instanceof TestInput)) {\n        return { pass: false, message: `Expected to check if element was checked, but element was not a TestInput` };\n      }\n      const pass = el.checked;\n      const message = `Expected element to be ${isNegative ? 'not ' : ''}checked, but was${!isNegative ? ' not' : ''}`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: any): jasmine.CustomMatcherResult => {\n        return assert(false, el);\n      },\n      negativeCompare: (el: any): jasmine.CustomMatcherResult => {\n        return assert(true, el);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestSelect wrapping a DOM element and has the given selected index\n   */\n  toHaveSelectedIndex: (util: jasmine.MatchersUtil, customEqualityTesters: Array): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: any, expected: number) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check selected index ${expected} on element, but element was falsy` };\n      }\n      if (!(el instanceof TestSelect)) {\n        return { pass: false, message: `Expected to check selected index ${expected} on element, but element was not a TestSelect` };\n      }\n      const actual = el.selectedIndex;\n      const pass = actual === expected;\n      const message = `Expected element to ${isNegative ? 'not ' : ''}have selected index ${expected}, but had ${actual}`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: any, expected: number): jasmine.CustomMatcherResult => {\n        return assert(false, el, expected);\n      },\n      negativeCompare: (el: any, expected: number): jasmine.CustomMatcherResult => {\n        return assert(true, el, expected);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestSelect wrapping a DOM element with the selected option's value equal to the given value\n   */\n  toHaveSelectedValue: (util: jasmine.MatchersUtil, customEqualityTesters: Array): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: any, expected: string) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check selected value '${expected}' on element, but element was falsy` };\n      }\n      if (!(el instanceof TestSelect)) {\n        return { pass: false, message: `Expected to check selected value '${expected}' on element, but element was not a TestSelect` };\n      }\n      const actual = el.selectedValue;\n      const pass = actual  === expected;\n      const message = `Expected element to ${isNegative ? 'not ' : ''}have selected value '${expected}', but had '${actual}'`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(false, el, expected);\n      },\n      negativeCompare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(true, el, expected);\n      }\n    };\n  },\n\n  /**\n   * Checks that the receiver is a TestSelect wrapping a DOM element with the selected option's label equal to the given label\n   */\n  toHaveSelectedLabel: (util: jasmine.MatchersUtil, customEqualityTesters: Array): jasmine.CustomMatcher => {\n    const assert = (isNegative: boolean, el: any, expected: string) => {\n      if (!el) {\n        return { pass: false, message: `Expected to check selected label '${expected}' on element, but element was falsy` };\n      }\n      if (!(el instanceof TestSelect)) {\n        return { pass: false, message: `Expected to check selected label '${expected}' on element, but element was not a TestSelect` };\n      }\n      const actual = el.selectedLabel;\n      const pass = actual  === expected;\n      const message = `Expected element to ${isNegative ? 'not ' : ''}have selected label '${expected}', but had '${actual}'`;\n      return { pass: isNegative ? !pass : pass, message };\n    };\n    return {\n      compare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(false, el, expected);\n      },\n      negativeCompare: (el: any, expected: string): jasmine.CustomMatcherResult => {\n        return assert(true, el, expected);\n      }\n    };\n  }\n}\n                        \n                    \n\n\n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
